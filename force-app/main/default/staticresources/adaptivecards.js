(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["AdaptiveCards"] = factory();
	else
		root["AdaptiveCards"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/activity-request.ts":
/*!*********************************!*\
  !*** ./src/activity-request.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LoginRequestResponse = exports.ErrorResponse = exports.SuccessResponse = exports.ActivityResponse = exports.ActivityRequestError = exports.ActivityRequestTrigger = void 0;
var ActivityRequestTrigger;
(function (ActivityRequestTrigger) {
    ActivityRequestTrigger["Automatic"] = "automatic";
    ActivityRequestTrigger["Manual"] = "manual";
})(ActivityRequestTrigger = exports.ActivityRequestTrigger || (exports.ActivityRequestTrigger = {}));
var ActivityRequestError = /** @class */ (function () {
    function ActivityRequestError(code, message) {
        this.code = code;
        this.message = message;
    }
    return ActivityRequestError;
}());
exports.ActivityRequestError = ActivityRequestError;
var ActivityResponse = /** @class */ (function () {
    function ActivityResponse(request) {
        this.request = request;
    }
    return ActivityResponse;
}());
exports.ActivityResponse = ActivityResponse;
var SuccessResponse = /** @class */ (function (_super) {
    __extends(SuccessResponse, _super);
    function SuccessResponse(request, rawContent) {
        var _this = _super.call(this, request) || this;
        _this.request = request;
        _this.rawContent = rawContent;
        return _this;
    }
    return SuccessResponse;
}(ActivityResponse));
exports.SuccessResponse = SuccessResponse;
var ErrorResponse = /** @class */ (function (_super) {
    __extends(ErrorResponse, _super);
    function ErrorResponse(request, error) {
        var _this = _super.call(this, request) || this;
        _this.request = request;
        _this.error = error;
        return _this;
    }
    return ErrorResponse;
}(ActivityResponse));
exports.ErrorResponse = ErrorResponse;
var LoginRequestResponse = /** @class */ (function (_super) {
    __extends(LoginRequestResponse, _super);
    function LoginRequestResponse(request, _auth) {
        var _this = _super.call(this, request) || this;
        _this.request = request;
        _this._auth = _auth;
        for (var _i = 0, _a = _this._auth.buttons; _i < _a.length; _i++) {
            var button = _a[_i];
            if (button.type === "signin" && button.value !== undefined) {
                try {
                    new URL(button.value);
                    _this.signinButton = button;
                    break;
                }
                catch (e) {
                    // Ignore parsing error
                }
            }
        }
        return _this;
    }
    Object.defineProperty(LoginRequestResponse.prototype, "tokenExchangeResource", {
        get: function () {
            return this._auth.tokenExchangeResource;
        },
        enumerable: false,
        configurable: true
    });
    return LoginRequestResponse;
}(ActivityResponse));
exports.LoginRequestResponse = LoginRequestResponse;


/***/ }),

/***/ "./src/adaptive-applet.ts":
/*!********************************!*\
  !*** ./src/adaptive-applet.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AdaptiveApplet = void 0;
var Enums = __webpack_require__(/*! ./enums */ "./src/enums.ts");
var Utils = __webpack_require__(/*! ./utils */ "./src/utils.ts");
var shared_1 = __webpack_require__(/*! ./shared */ "./src/shared.ts");
var activity_request_1 = __webpack_require__(/*! ./activity-request */ "./src/activity-request.ts");
var strings_1 = __webpack_require__(/*! ./strings */ "./src/strings.ts");
var card_elements_1 = __webpack_require__(/*! ./card-elements */ "./src/card-elements.ts");
var serialization_1 = __webpack_require__(/*! ./serialization */ "./src/serialization.ts");
function logEvent(level, message) {
    var optionalParams = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        optionalParams[_i - 2] = arguments[_i];
    }
    if (shared_1.GlobalSettings.applets.logEnabled) {
        if (shared_1.GlobalSettings.applets.onLogEvent) {
            shared_1.GlobalSettings.applets.onLogEvent(level, message, optionalParams);
        }
        else {
            switch (level) {
                case Enums.LogLevel.Warning:
                    console.warn(message, optionalParams);
                    break;
                case Enums.LogLevel.Error:
                    console.error(message, optionalParams);
                    break;
                default:
                    console.log(message, optionalParams);
                    break;
            }
        }
    }
}
var ActivityRequest = /** @class */ (function () {
    function ActivityRequest(action, trigger, consecutiveRefreshes) {
        this.action = action;
        this.trigger = trigger;
        this.consecutiveRefreshes = consecutiveRefreshes;
        this.attemptNumber = 0;
    }
    ActivityRequest.prototype.retryAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.onSend) {
                    this.onSend(this);
                }
                return [2 /*return*/];
            });
        });
    };
    return ActivityRequest;
}());
var AdaptiveApplet = /** @class */ (function () {
    function AdaptiveApplet() {
        this._allowAutomaticCardUpdate = false;
        this.renderedElement = document.createElement("div");
        this.renderedElement.className = "aaf-cardHost";
        this.renderedElement.style.position = "relative";
        this.renderedElement.style.display = "flex";
        this.renderedElement.style.flexDirection = "column";
        this._cardHostElement = document.createElement("div");
        this._refreshButtonHostElement = document.createElement("div");
        this._refreshButtonHostElement.className = "aaf-refreshButtonHost";
        this._refreshButtonHostElement.style.display = "none";
        this.renderedElement.appendChild(this._cardHostElement);
        this.renderedElement.appendChild(this._refreshButtonHostElement);
    }
    AdaptiveApplet.prototype.displayCard = function (card) {
        if (card.renderedElement) {
            Utils.clearElementChildren(this._cardHostElement);
            this._refreshButtonHostElement.style.display = "none";
            this._cardHostElement.appendChild(card.renderedElement);
        }
        else {
            throw new Error("displayCard: undefined card.");
        }
    };
    AdaptiveApplet.prototype.showManualRefreshButton = function (refreshAction) {
        var _this = this;
        var displayBuiltInManualRefreshButton = this.onShowManualRefreshButton ? this.onShowManualRefreshButton(this) : true;
        if (displayBuiltInManualRefreshButton) {
            this._refreshButtonHostElement.style.display = "none";
            var renderedRefreshButton = undefined;
            if (this.onRenderManualRefreshButton) {
                renderedRefreshButton = this.onRenderManualRefreshButton(this);
            }
            else {
                var message = strings_1.Strings.runtime.refreshThisCard();
                if (shared_1.GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Automatic) {
                    var autoRefreshPausedMessage = strings_1.Strings.runtime.automaticRefreshPaused();
                    if (autoRefreshPausedMessage[autoRefreshPausedMessage.length - 1] !== " ") {
                        autoRefreshPausedMessage += " ";
                    }
                    message = strings_1.Strings.runtime.clckToRestartAutomaticRefresh();
                }
                var cardPayload = {
                    type: "AdaptiveCard",
                    version: "1.2",
                    body: [
                        {
                            type: "RichTextBlock",
                            horizontalAlignment: "right",
                            inlines: [
                                {
                                    type: "TextRun",
                                    text: message,
                                    selectAction: {
                                        type: "Action.Submit",
                                        id: "refreshCard"
                                    }
                                }
                            ]
                        }
                    ]
                };
                var card = new card_elements_1.AdaptiveCard();
                card.parse(cardPayload, new card_elements_1.SerializationContext(serialization_1.Versions.v1_2));
                card.onExecuteAction = function (action) {
                    if (action.id === "refreshCard") {
                        Utils.clearElementChildren(_this._refreshButtonHostElement);
                        _this.internalExecuteAction(refreshAction, activity_request_1.ActivityRequestTrigger.Automatic, 0);
                    }
                };
                renderedRefreshButton = card.render();
            }
            if (renderedRefreshButton) {
                Utils.clearElementChildren(this._refreshButtonHostElement);
                this._refreshButtonHostElement.appendChild(renderedRefreshButton);
                this._refreshButtonHostElement.style.removeProperty("display");
            }
        }
    };
    AdaptiveApplet.prototype.createActivityRequest = function (action, trigger, consecutiveRefreshes) {
        var _this = this;
        if (this.card) {
            var request_1 = new ActivityRequest(action, trigger, consecutiveRefreshes);
            request_1.onSend = function (sender) {
                sender.attemptNumber++;
                _this.internalSendActivityRequestAsync(request_1);
            };
            var cancel = this.onPrepareActivityRequest ? !this.onPrepareActivityRequest(this, request_1, action) : false;
            return cancel ? undefined : request_1;
        }
        else {
            throw new Error("createActivityRequest: no card has been set.");
        }
    };
    AdaptiveApplet.prototype.createMagicCodeInputCard = function (attemptNumber) {
        var payload = {
            type: "AdaptiveCard",
            version: "1.0",
            body: [
                {
                    type: "TextBlock",
                    color: "attention",
                    text: attemptNumber === 1 ? undefined : "That didn't work... let's try again.",
                    wrap: true,
                    horizontalAlignment: "center"
                },
                {
                    type: "TextBlock",
                    text: "Please login in the popup. You will obtain a magic code. Paste that code below and select \"Submit\"",
                    wrap: true,
                    horizontalAlignment: "center"
                },
                {
                    type: "Input.Text",
                    id: "magicCode",
                    placeholder: "Enter magic code"
                },
                {
                    type: "ActionSet",
                    horizontalAlignment: "center",
                    actions: [
                        {
                            type: "Action.Submit",
                            id: AdaptiveApplet.submitMagicCodeActionId,
                            title: "Submit"
                        },
                        {
                            type: "Action.Submit",
                            id: AdaptiveApplet.cancelMagicCodeAuthActionId,
                            title: "Cancel"
                        }
                    ]
                }
            ]
        };
        var card = new card_elements_1.AdaptiveCard();
        card.parse(payload);
        return card;
    };
    AdaptiveApplet.prototype.cancelAutomaticRefresh = function () {
        if (this._allowAutomaticCardUpdate) {
            logEvent(Enums.LogLevel.Warning, "Automatic card refresh has been cancelled as a result of the user interacting with the card.");
        }
        this._allowAutomaticCardUpdate = false;
    };
    AdaptiveApplet.prototype.createSerializationContext = function () {
        return this.onCreateSerializationContext ? this.onCreateSerializationContext(this) : new card_elements_1.SerializationContext();
    };
    AdaptiveApplet.prototype.internalSetCard = function (payload, consecutiveRefreshes) {
        var _this = this;
        if (typeof payload === "object" && payload["type"] === "AdaptiveCard") {
            this._cardPayload = payload;
        }
        if (this._cardPayload) {
            try {
                var card = new card_elements_1.AdaptiveCard();
                if (this.hostConfig) {
                    card.hostConfig = this.hostConfig;
                }
                var serializationContext = this.createSerializationContext();
                card.parse(this._cardPayload, serializationContext);
                var doChangeCard = this.onCardChanging ? this.onCardChanging(this, this._cardPayload) : true;
                if (doChangeCard) {
                    this._card = card;
                    if (this._card.authentication && this._card.authentication.tokenExchangeResource && this.onPrefetchSSOToken) {
                        this.onPrefetchSSOToken(this, this._card.authentication.tokenExchangeResource);
                    }
                    this._card.onExecuteAction = function (action) {
                        // If the user takes an action, cancel any pending automatic refresh
                        _this.cancelAutomaticRefresh();
                        _this.internalExecuteAction(action, activity_request_1.ActivityRequestTrigger.Manual, 0);
                    };
                    this._card.onInputValueChanged = function (input) {
                        // If the user modifies an input, cancel any pending automatic refresh
                        _this.cancelAutomaticRefresh();
                    };
                    this._card.render();
                    if (this._card.renderedElement) {
                        this.displayCard(this._card);
                        if (this.onCardChanged) {
                            this.onCardChanged(this);
                        }
                        if (this._card.refresh) {
                            if (shared_1.GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Automatic && consecutiveRefreshes < shared_1.GlobalSettings.applets.refresh.maximumConsecutiveAutomaticRefreshes) {
                                if (shared_1.GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes <= 0) {
                                    logEvent(Enums.LogLevel.Info, "Triggering automatic card refresh number " + (consecutiveRefreshes + 1));
                                    this.internalExecuteAction(this._card.refresh.action, activity_request_1.ActivityRequestTrigger.Automatic, consecutiveRefreshes + 1);
                                }
                                else {
                                    logEvent(Enums.LogLevel.Info, "Scheduling automatic card refresh number " + (consecutiveRefreshes + 1) + " in " + shared_1.GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes + "ms");
                                    var action_1 = this._card.refresh.action;
                                    this._allowAutomaticCardUpdate = true;
                                    window.setTimeout(function () {
                                        if (_this._allowAutomaticCardUpdate) {
                                            _this.internalExecuteAction(action_1, activity_request_1.ActivityRequestTrigger.Automatic, consecutiveRefreshes + 1);
                                        }
                                    }, shared_1.GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes);
                                }
                            }
                            else if (shared_1.GlobalSettings.applets.refresh.mode !== Enums.RefreshMode.Disabled) {
                                if (consecutiveRefreshes > 0) {
                                    logEvent(Enums.LogLevel.Warning, "Stopping automatic refreshes after " + consecutiveRefreshes + " consecutive refreshes.");
                                }
                                else {
                                    logEvent(Enums.LogLevel.Warning, "The card has a refresh section, but automatic refreshes are disabled.");
                                }
                                if (shared_1.GlobalSettings.applets.refresh.allowManualRefreshesAfterAutomaticRefreshes || shared_1.GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Manual) {
                                    logEvent(Enums.LogLevel.Info, "Showing manual refresh button.");
                                    this.showManualRefreshButton(this._card.refresh.action);
                                }
                            }
                        }
                    }
                }
            }
            catch (error) {
                // Ignore all errors
                logEvent(Enums.LogLevel.Error, "setCard: " + error);
            }
        }
    };
    AdaptiveApplet.prototype.internalExecuteAction = function (action, trigger, consecutiveRefreshes) {
        if (action instanceof card_elements_1.ExecuteAction) {
            if (this.channelAdapter) {
                var request = this.createActivityRequest(action, trigger, consecutiveRefreshes);
                if (request) {
                    request.retryAsync();
                }
            }
            else {
                throw new Error("internalExecuteAction: No channel adapter set.");
            }
        }
        if (this.onAction) {
            this.onAction(this, action);
        }
    };
    AdaptiveApplet.prototype.createProgressOverlay = function (request) {
        if (!this._progressOverlay) {
            if (this.onCreateProgressOverlay) {
                this._progressOverlay = this.onCreateProgressOverlay(this, request);
            }
            else {
                this._progressOverlay = document.createElement("div");
                this._progressOverlay.className = "aaf-progress-overlay";
                var spinner = document.createElement("div");
                spinner.className = "aaf-spinner";
                spinner.style.width = "28px";
                spinner.style.height = "28px";
                this._progressOverlay.appendChild(spinner);
            }
        }
        return this._progressOverlay;
    };
    AdaptiveApplet.prototype.removeProgressOverlay = function (request) {
        if (this.onRemoveProgressOverlay) {
            this.onRemoveProgressOverlay(this, request);
        }
        if (this._progressOverlay !== undefined) {
            this.renderedElement.removeChild(this._progressOverlay);
            this._progressOverlay = undefined;
        }
    };
    AdaptiveApplet.prototype.activityRequestSucceeded = function (response, parsedContent) {
        if (this.onActivityRequestSucceeded) {
            this.onActivityRequestSucceeded(this, response, parsedContent);
        }
    };
    AdaptiveApplet.prototype.activityRequestFailed = function (response) {
        return this.onActivityRequestFailed ? this.onActivityRequestFailed(this, response) : shared_1.GlobalSettings.applets.defaultTimeBetweenRetryAttempts;
    };
    AdaptiveApplet.prototype.showAuthCodeInputDialog = function (request) {
        var _this = this;
        var showBuiltInAuthCodeInputCard = this.onShowAuthCodeInputDialog ? this.onShowAuthCodeInputDialog(this, request) : true;
        if (showBuiltInAuthCodeInputCard) {
            var authCodeInputCard = this.createMagicCodeInputCard(request.attemptNumber);
            authCodeInputCard.render();
            authCodeInputCard.onExecuteAction = function (submitMagicCodeAction) {
                if (_this.card && submitMagicCodeAction instanceof card_elements_1.SubmitAction) {
                    switch (submitMagicCodeAction.id) {
                        case AdaptiveApplet.submitMagicCodeActionId:
                            var authCode = undefined;
                            if (submitMagicCodeAction.data && typeof submitMagicCodeAction.data["magicCode"] === "string") {
                                authCode = submitMagicCodeAction.data["magicCode"];
                            }
                            if (authCode) {
                                _this.displayCard(_this.card);
                                request.authCode = authCode;
                                request.retryAsync();
                            }
                            else {
                                alert("Please enter the magic code you received.");
                            }
                            break;
                        case AdaptiveApplet.cancelMagicCodeAuthActionId:
                            logEvent(Enums.LogLevel.Warning, "Authentication cancelled by user.");
                            _this.displayCard(_this.card);
                            break;
                        default:
                            logEvent(Enums.LogLevel.Error, "Unespected action taken from magic code input card (id = " + submitMagicCodeAction.id + ")");
                            alert(strings_1.Strings.magicCodeInputCard.somethingWentWrong());
                            break;
                    }
                }
            };
            this.displayCard(authCodeInputCard);
        }
    };
    AdaptiveApplet.prototype.internalSendActivityRequestAsync = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var overlay, done, _loop_1, this_1, state_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.channelAdapter) {
                            throw new Error("internalSendActivityRequestAsync: channelAdapter is not set.");
                        }
                        overlay = this.createProgressOverlay(request);
                        if (overlay !== undefined) {
                            this.renderedElement.appendChild(overlay);
                        }
                        done = false;
                        _loop_1 = function () {
                            var response, error_1, parsedContent, retryIn_1, attemptOAuth, left, top_1;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        response = undefined;
                                        if (request.attemptNumber === 1) {
                                            logEvent(Enums.LogLevel.Info, "Sending activity request to channel (attempt " + request.attemptNumber + ")");
                                        }
                                        else {
                                            logEvent(Enums.LogLevel.Info, "Re-sending activity request to channel (attempt " + request.attemptNumber + ")");
                                        }
                                        _b.label = 1;
                                    case 1:
                                        _b.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, this_1.channelAdapter.sendRequestAsync(request)];
                                    case 2:
                                        response = _b.sent();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        error_1 = _b.sent();
                                        logEvent(Enums.LogLevel.Error, "Activity request failed: " + error_1);
                                        this_1.removeProgressOverlay(request);
                                        done = true;
                                        return [3 /*break*/, 4];
                                    case 4:
                                        if (!response) return [3 /*break*/, 10];
                                        if (!(response instanceof activity_request_1.SuccessResponse)) return [3 /*break*/, 5];
                                        this_1.removeProgressOverlay(request);
                                        if (response.rawContent === undefined) {
                                            throw new Error("internalSendActivityRequestAsync: Action.Execute result is undefined");
                                        }
                                        parsedContent = response.rawContent;
                                        try {
                                            parsedContent = JSON.parse(response.rawContent);
                                        }
                                        catch (_c) {
                                            // Leave parseContent as is
                                        }
                                        if (typeof parsedContent === "string") {
                                            logEvent(Enums.LogLevel.Info, "The activity request returned a string after " + request.attemptNumber + " attempt(s).");
                                            this_1.activityRequestSucceeded(response, parsedContent);
                                        }
                                        else if (typeof parsedContent === "object" && parsedContent["type"] === "AdaptiveCard") {
                                            logEvent(Enums.LogLevel.Info, "The activity request returned an Adaptive Card after " + request.attemptNumber + " attempt(s).");
                                            this_1.internalSetCard(parsedContent, request.consecutiveRefreshes);
                                            this_1.activityRequestSucceeded(response, this_1.card);
                                        }
                                        else {
                                            throw new Error("internalSendActivityRequestAsync: Action.Execute result is of unsupported type (" + typeof response.rawContent + ")");
                                        }
                                        done = true;
                                        return [3 /*break*/, 10];
                                    case 5:
                                        if (!(response instanceof activity_request_1.ErrorResponse)) return [3 /*break*/, 9];
                                        retryIn_1 = this_1.activityRequestFailed(response);
                                        if (!(retryIn_1 >= 0 && request.attemptNumber < shared_1.GlobalSettings.applets.maximumRetryAttempts)) return [3 /*break*/, 7];
                                        logEvent(Enums.LogLevel.Warning, "Activity request failed: " + response.error.message + ". Retrying in " + retryIn_1 + "ms");
                                        request.attemptNumber++;
                                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                                window.setTimeout(function () { resolve(); }, retryIn_1);
                                            })];
                                    case 6:
                                        _b.sent();
                                        return [3 /*break*/, 8];
                                    case 7:
                                        logEvent(Enums.LogLevel.Error, "Activity request failed: " + response.error.message + ". Giving up after " + request.attemptNumber + " attempt(s)");
                                        this_1.removeProgressOverlay(request);
                                        done = true;
                                        _b.label = 8;
                                    case 8: return [3 /*break*/, 10];
                                    case 9:
                                        if (response instanceof activity_request_1.LoginRequestResponse) {
                                            logEvent(Enums.LogLevel.Info, "The activity request returned a LoginRequestResponse after " + request.attemptNumber + " attempt(s).");
                                            if (request.attemptNumber <= shared_1.GlobalSettings.applets.maximumRetryAttempts) {
                                                attemptOAuth = true;
                                                if (response.tokenExchangeResource && this_1.onSSOTokenNeeded) {
                                                    // Attempt to use SSO. The host will return true if it can handle SSO, in which case
                                                    // we bypass OAuth
                                                    attemptOAuth = !this_1.onSSOTokenNeeded(this_1, request, response.tokenExchangeResource);
                                                }
                                                if (attemptOAuth) {
                                                    // Attempt to use OAuth
                                                    this_1.removeProgressOverlay(request);
                                                    if (response.signinButton === undefined) {
                                                        throw new Error("internalSendActivityRequestAsync: the login request doesn't contain a valid signin URL.");
                                                    }
                                                    logEvent(Enums.LogLevel.Info, "Login required at " + response.signinButton.value);
                                                    if (this_1.onShowSigninPrompt) {
                                                        // Bypass the built-in auth prompt if the host app handles it
                                                        this_1.onShowSigninPrompt(this_1, request, response.signinButton);
                                                    }
                                                    else {
                                                        this_1.showAuthCodeInputDialog(request);
                                                        left = window.screenX + (window.outerWidth - shared_1.GlobalSettings.applets.authPromptWidth) / 2;
                                                        top_1 = window.screenY + (window.outerHeight - shared_1.GlobalSettings.applets.authPromptHeight) / 2;
                                                        window.open(response.signinButton.value, response.signinButton.title ? response.signinButton.title : "Sign in", "width=" + shared_1.GlobalSettings.applets.authPromptWidth + ",height=" + shared_1.GlobalSettings.applets.authPromptHeight + ",left=" + left + ",top=" + top_1);
                                                    }
                                                }
                                            }
                                            else {
                                                logEvent(Enums.LogLevel.Error, "Authentication failed. Giving up after " + request.attemptNumber + " attempt(s)");
                                                alert(strings_1.Strings.magicCodeInputCard.authenticationFailed());
                                            }
                                            return [2 /*return*/, "break"];
                                        }
                                        else {
                                            throw new Error("Unhandled response type: " + response.toString());
                                        }
                                        _b.label = 10;
                                    case 10: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _a.label = 1;
                    case 1:
                        if (!!done) return [3 /*break*/, 3];
                        return [5 /*yield**/, _loop_1()];
                    case 2:
                        state_1 = _a.sent();
                        if (state_1 === "break")
                            return [3 /*break*/, 3];
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AdaptiveApplet.prototype.refreshCard = function () {
        if (this._card && this._card.refresh) {
            this.internalExecuteAction(this._card.refresh.action, activity_request_1.ActivityRequestTrigger.Manual, 0);
        }
    };
    AdaptiveApplet.prototype.setCard = function (payload) {
        this.internalSetCard(payload, 0);
    };
    Object.defineProperty(AdaptiveApplet.prototype, "card", {
        get: function () {
            return this._card;
        },
        enumerable: false,
        configurable: true
    });
    AdaptiveApplet.submitMagicCodeActionId = "submitMagicCode";
    AdaptiveApplet.cancelMagicCodeAuthActionId = "cancelMagicCodeAuth";
    return AdaptiveApplet;
}());
exports.AdaptiveApplet = AdaptiveApplet;


/***/ }),

/***/ "./src/adaptivecards.ts":
/*!******************************!*\
  !*** ./src/adaptivecards.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
__exportStar(__webpack_require__(/*! ./strings */ "./src/strings.ts"), exports);
__exportStar(__webpack_require__(/*! ./enums */ "./src/enums.ts"), exports);
__exportStar(__webpack_require__(/*! ./shared */ "./src/shared.ts"), exports);
__exportStar(__webpack_require__(/*! ./utils */ "./src/utils.ts"), exports);
__exportStar(__webpack_require__(/*! ./serialization */ "./src/serialization.ts"), exports);
__exportStar(__webpack_require__(/*! ./host-capabilities */ "./src/host-capabilities.ts"), exports);
__exportStar(__webpack_require__(/*! ./host-config */ "./src/host-config.ts"), exports);
__exportStar(__webpack_require__(/*! ./registry */ "./src/registry.ts"), exports);
__exportStar(__webpack_require__(/*! ./card-object */ "./src/card-object.ts"), exports);
__exportStar(__webpack_require__(/*! ./card-elements */ "./src/card-elements.ts"), exports);
__exportStar(__webpack_require__(/*! ./table */ "./src/table.ts"), exports);
__exportStar(__webpack_require__(/*! ./channel-adapter */ "./src/channel-adapter.ts"), exports);
__exportStar(__webpack_require__(/*! ./activity-request */ "./src/activity-request.ts"), exports);
__exportStar(__webpack_require__(/*! ./adaptive-applet */ "./src/adaptive-applet.ts"), exports);


/***/ }),

/***/ "./src/card-elements.ts":
/*!******************************!*\
  !*** ./src/card-elements.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SerializationContext = exports.AdaptiveCard = exports.Authentication = exports.TokenExchangeResource = exports.AuthCardButton = exports.RefreshDefinition = exports.RefreshActionProperty = exports.ContainerWithActions = exports.ColumnSet = exports.Column = exports.Container = exports.BackgroundImage = exports.ContainerBase = exports.StylableCardElementContainer = exports.ContainerStyleProperty = exports.ActionSet = exports.ShowCardAction = exports.HttpAction = exports.HttpHeader = exports.ToggleVisibilityAction = exports.OpenUrlAction = exports.ExecuteAction = exports.SubmitAction = exports.SubmitActionBase = exports.Action = exports.TimeInput = exports.TimeProperty = exports.DateInput = exports.NumberInput = exports.ChoiceSetInput = exports.Choice = exports.ToggleInput = exports.TextInput = exports.Input = exports.Media = exports.MediaSource = exports.ImageSet = exports.CardElementContainer = exports.Image = exports.FactSet = exports.Fact = exports.RichTextBlock = exports.TextRun = exports.TextBlock = exports.BaseTextBlock = exports.ActionProperty = exports.CardElement = exports.renderSeparation = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Enums = __webpack_require__(/*! ./enums */ "./src/enums.ts");
var shared_1 = __webpack_require__(/*! ./shared */ "./src/shared.ts");
var Utils = __webpack_require__(/*! ./utils */ "./src/utils.ts");
var host_config_1 = __webpack_require__(/*! ./host-config */ "./src/host-config.ts");
var TextFormatters = __webpack_require__(/*! ./text-formatters */ "./src/text-formatters.ts");
var card_object_1 = __webpack_require__(/*! ./card-object */ "./src/card-object.ts");
var serialization_1 = __webpack_require__(/*! ./serialization */ "./src/serialization.ts");
var registry_1 = __webpack_require__(/*! ./registry */ "./src/registry.ts");
var strings_1 = __webpack_require__(/*! ./strings */ "./src/strings.ts");
var controls_1 = __webpack_require__(/*! ./controls */ "./src/controls/index.ts");
function renderSeparation(hostConfig, separationDefinition, orientation) {
    if (separationDefinition.spacing > 0 || (separationDefinition.lineThickness && separationDefinition.lineThickness > 0)) {
        var separator = document.createElement("div");
        separator.className = hostConfig.makeCssClassName("ac-" + (orientation == Enums.Orientation.Horizontal ? "horizontal" : "vertical") + "-separator");
        separator.setAttribute("aria-hidden", "true");
        var color = separationDefinition.lineColor ? Utils.stringToCssColor(separationDefinition.lineColor) : "";
        if (orientation == Enums.Orientation.Horizontal) {
            if (separationDefinition.lineThickness) {
                separator.style.paddingTop = (separationDefinition.spacing / 2) + "px";
                separator.style.marginBottom = (separationDefinition.spacing / 2) + "px";
                separator.style.borderBottom = separationDefinition.lineThickness + "px solid " + color;
            }
            else {
                separator.style.height = separationDefinition.spacing + "px";
            }
        }
        else {
            if (separationDefinition.lineThickness) {
                separator.style.paddingLeft = (separationDefinition.spacing / 2) + "px";
                separator.style.marginRight = (separationDefinition.spacing / 2) + "px";
                separator.style.borderRight = separationDefinition.lineThickness + "px solid " + color;
            }
            else {
                separator.style.width = separationDefinition.spacing + "px";
            }
        }
        separator.style.overflow = "hidden";
        separator.style.flex = "0 0 auto";
        return separator;
    }
    else {
        return undefined;
    }
}
exports.renderSeparation = renderSeparation;
var CardElement = /** @class */ (function (_super) {
    __extends(CardElement, _super);
    function CardElement() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._truncatedDueToOverflow = false;
        return _this;
    }
    Object.defineProperty(CardElement.prototype, "lang", {
        get: function () {
            var lang = this.getValue(CardElement.langProperty);
            if (lang) {
                return lang;
            }
            else {
                if (this.parent) {
                    return this.parent.lang;
                }
                else {
                    return undefined;
                }
            }
        },
        set: function (value) {
            this.setValue(CardElement.langProperty, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "isVisible", {
        get: function () {
            return this.getValue(CardElement.isVisibleProperty);
        },
        set: function (value) {
            // If the element is going to be hidden, reset any changes that were due
            // to overflow truncation (this ensures that if the element is later
            // un-hidden it has the right content)
            if (shared_1.GlobalSettings.useAdvancedCardBottomTruncation && !value) {
                this.undoOverflowTruncation();
            }
            if (this.isVisible !== value) {
                this.setValue(CardElement.isVisibleProperty, value);
                this.updateRenderedElementVisibility();
                if (this._renderedElement) {
                    raiseElementVisibilityChangedEvent(this);
                }
            }
            if (this._renderedElement) {
                this._renderedElement.setAttribute("aria-expanded", value.toString());
            }
        },
        enumerable: false,
        configurable: true
    });
    CardElement.prototype.internalRenderSeparator = function () {
        var renderedSeparator = renderSeparation(this.hostConfig, {
            spacing: this.hostConfig.getEffectiveSpacing(this.spacing),
            lineThickness: this.separator ? this.hostConfig.separator.lineThickness : undefined,
            lineColor: this.separator ? this.hostConfig.separator.lineColor : undefined
        }, this.separatorOrientation);
        if (shared_1.GlobalSettings.alwaysBleedSeparators && renderedSeparator && this.separatorOrientation == Enums.Orientation.Horizontal) {
            // Adjust separator's margins if the option to always bleed separators is turned on
            var parentContainer = this.getParentContainer();
            if (parentContainer && parentContainer.getEffectivePadding()) {
                var parentPhysicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(parentContainer.getEffectivePadding());
                renderedSeparator.style.marginLeft = "-" + parentPhysicalPadding.left + "px";
                renderedSeparator.style.marginRight = "-" + parentPhysicalPadding.right + "px";
            }
        }
        return renderedSeparator;
    };
    CardElement.prototype.updateRenderedElementVisibility = function () {
        var displayMode = this.isDesignMode() || this.isVisible ? this._defaultRenderedElementDisplayMode : "none";
        if (this._renderedElement) {
            if (displayMode) {
                this._renderedElement.style.display = displayMode;
            }
            else {
                this._renderedElement.style.removeProperty("display");
            }
        }
        if (this._separatorElement) {
            if (this.parent && this.parent.isFirstElement(this)) {
                this._separatorElement.style.display = "none";
            }
            else {
                if (displayMode) {
                    this._separatorElement.style.display = displayMode;
                }
                else {
                    this._separatorElement.style.removeProperty("display");
                }
            }
        }
    };
    CardElement.prototype.hideElementDueToOverflow = function () {
        if (this._renderedElement && this.isVisible) {
            this._renderedElement.style.visibility = "hidden";
            this.isVisible = false;
            raiseElementVisibilityChangedEvent(this, false);
        }
    };
    CardElement.prototype.showElementHiddenDueToOverflow = function () {
        if (this._renderedElement && !this.isVisible) {
            this._renderedElement.style.removeProperty("visibility");
            this.isVisible = true;
            raiseElementVisibilityChangedEvent(this, false);
        }
    };
    // Marked private to emulate internal access
    CardElement.prototype.handleOverflow = function (maxHeight) {
        if (this.isVisible || this.isHiddenDueToOverflow()) {
            var handled = this.truncateOverflow(maxHeight);
            // Even if we were unable to truncate the element to fit this time,
            // it still could have been previously truncated
            this._truncatedDueToOverflow = handled || this._truncatedDueToOverflow;
            if (!handled) {
                this.hideElementDueToOverflow();
            }
            else if (handled && !this.isVisible) {
                this.showElementHiddenDueToOverflow();
            }
        }
    };
    // Marked private to emulate internal access
    CardElement.prototype.resetOverflow = function () {
        var sizeChanged = false;
        if (this._truncatedDueToOverflow) {
            this.undoOverflowTruncation();
            this._truncatedDueToOverflow = false;
            sizeChanged = true;
        }
        if (this.isHiddenDueToOverflow()) {
            this.showElementHiddenDueToOverflow();
        }
        return sizeChanged;
    };
    CardElement.prototype.getDefaultSerializationContext = function () {
        return new SerializationContext();
    };
    CardElement.prototype.createPlaceholderElement = function () {
        var styleDefinition = this.getEffectiveStyleDefinition();
        var foregroundCssColor = Utils.stringToCssColor(styleDefinition.foregroundColors.default.subtle);
        var element = document.createElement("div");
        element.style.border = "1px dashed " + foregroundCssColor;
        element.style.padding = "4px";
        element.style.minHeight = "32px";
        element.style.fontSize = "10px";
        element.style.color = foregroundCssColor;
        element.innerText = "Empty " + this.getJsonTypeName();
        return element;
    };
    CardElement.prototype.adjustRenderedElementSize = function (renderedElement) {
        if (this.height === "auto") {
            renderedElement.style.flex = "0 0 auto";
        }
        else {
            renderedElement.style.flex = "1 1 auto";
        }
    };
    CardElement.prototype.isDisplayed = function () {
        return this._renderedElement !== undefined && this.isVisible && this._renderedElement.offsetHeight > 0;
    };
    CardElement.prototype.overrideInternalRender = function () {
        return this.internalRender();
    };
    CardElement.prototype.applyPadding = function () {
        if (this.separatorElement && this.separatorOrientation === Enums.Orientation.Horizontal) {
            if (shared_1.GlobalSettings.alwaysBleedSeparators && !this.isBleeding()) {
                var padding = new shared_1.PaddingDefinition();
                this.getImmediateSurroundingPadding(padding);
                var physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);
                this.separatorElement.style.marginLeft = "-" + physicalPadding.left + "px";
                this.separatorElement.style.marginRight = "-" + physicalPadding.right + "px";
            }
            else {
                this.separatorElement.style.marginRight = "0";
                this.separatorElement.style.marginLeft = "0";
            }
        }
    };
    /*
     * Called when this element overflows the bottom of the card.
     * maxHeight will be the amount of space still available on the card (0 if
     * the element is fully off the card).
     */
    CardElement.prototype.truncateOverflow = function (maxHeight) {
        // Child implementations should return true if the element handled
        // the truncation request such that its content fits within maxHeight,
        // false if the element should fall back to being hidden
        return false;
    };
    /*
     * This should reverse any changes performed in truncateOverflow().
     */
    CardElement.prototype.undoOverflowTruncation = function () { };
    CardElement.prototype.getDefaultPadding = function () {
        return new shared_1.PaddingDefinition();
    };
    CardElement.prototype.getHasBackground = function () {
        return false;
    };
    CardElement.prototype.getHasBorder = function () {
        return false;
    };
    CardElement.prototype.getPadding = function () {
        return this._padding;
    };
    CardElement.prototype.setPadding = function (value) {
        this._padding = value;
    };
    CardElement.prototype.shouldSerialize = function (context) {
        return context.elementRegistry.findByName(this.getJsonTypeName()) !== undefined;
    };
    Object.defineProperty(CardElement.prototype, "useDefaultSizing", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "separatorOrientation", {
        get: function () {
            return Enums.Orientation.Horizontal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "defaultStyle", {
        get: function () {
            return Enums.ContainerStyle.Default;
        },
        enumerable: false,
        configurable: true
    });
    CardElement.prototype.parse = function (source, context) {
        _super.prototype.parse.call(this, source, context ? context : new SerializationContext());
    };
    CardElement.prototype.asString = function () {
        return "";
    };
    CardElement.prototype.isBleeding = function () {
        return false;
    };
    CardElement.prototype.getEffectiveStyle = function () {
        if (this.parent) {
            return this.parent.getEffectiveStyle();
        }
        return this.defaultStyle;
    };
    CardElement.prototype.getEffectiveStyleDefinition = function () {
        return this.hostConfig.containerStyles.getStyleByName(this.getEffectiveStyle());
    };
    CardElement.prototype.getEffectiveTextStyleDefinition = function () {
        if (this.parent) {
            return this.parent.getEffectiveTextStyleDefinition();
        }
        return this.hostConfig.textStyles.default;
    };
    CardElement.prototype.getForbiddenActionTypes = function () {
        return [];
    };
    CardElement.prototype.getImmediateSurroundingPadding = function (result, processTop, processRight, processBottom, processLeft) {
        if (processTop === void 0) { processTop = true; }
        if (processRight === void 0) { processRight = true; }
        if (processBottom === void 0) { processBottom = true; }
        if (processLeft === void 0) { processLeft = true; }
        if (this.parent) {
            var doProcessTop = processTop && this.parent.isTopElement(this);
            var doProcessRight = processRight && this.parent.isRightMostElement(this);
            var doProcessBottom = processBottom && this.parent.isBottomElement(this);
            var doProcessLeft = processLeft && this.parent.isLeftMostElement(this);
            var effectivePadding = this.parent.getEffectivePadding();
            if (effectivePadding) {
                if (doProcessTop && effectivePadding.top != Enums.Spacing.None) {
                    result.top = effectivePadding.top;
                    doProcessTop = false;
                }
                if (doProcessRight && effectivePadding.right != Enums.Spacing.None) {
                    result.right = effectivePadding.right;
                    doProcessRight = false;
                }
                if (doProcessBottom && effectivePadding.bottom != Enums.Spacing.None) {
                    result.bottom = effectivePadding.bottom;
                    doProcessBottom = false;
                }
                if (doProcessLeft && effectivePadding.left != Enums.Spacing.None) {
                    result.left = effectivePadding.left;
                    doProcessLeft = false;
                }
            }
            if (doProcessTop || doProcessRight || doProcessBottom || doProcessLeft) {
                this.parent.getImmediateSurroundingPadding(result, doProcessTop, doProcessRight, doProcessBottom, doProcessLeft);
            }
        }
    };
    CardElement.prototype.getActionCount = function () {
        return 0;
    };
    CardElement.prototype.getActionAt = function (index) {
        throw new Error(strings_1.Strings.errors.indexOutOfRange(index));
    };
    CardElement.prototype.indexOfAction = function (action) {
        for (var i = 0; i < this.getActionCount(); i++) {
            if (this.getActionAt(i) === action) {
                return i;
            }
        }
        return -1;
    };
    CardElement.prototype.remove = function () {
        if (this.parent && this.parent instanceof CardElementContainer) {
            return this.parent.removeItem(this);
        }
        return false;
    };
    CardElement.prototype.render = function () {
        this._renderedElement = this.overrideInternalRender();
        this._separatorElement = this.internalRenderSeparator();
        if (this._renderedElement) {
            if (this.id) {
                this._renderedElement.id = this.id;
            }
            if (this.customCssSelector) {
                this._renderedElement.classList.add(this.customCssSelector);
            }
            this._renderedElement.style.boxSizing = "border-box";
            this._defaultRenderedElementDisplayMode = this._renderedElement.style.display ? this._renderedElement.style.display : undefined;
            this.adjustRenderedElementSize(this._renderedElement);
            this.updateLayout(false);
        }
        else if (this.isDesignMode()) {
            this._renderedElement = this.createPlaceholderElement();
        }
        return this._renderedElement;
    };
    CardElement.prototype.updateLayout = function (processChildren) {
        if (processChildren === void 0) { processChildren = true; }
        this.updateRenderedElementVisibility();
        this.applyPadding();
    };
    CardElement.prototype.indexOf = function (cardElement) {
        return -1;
    };
    CardElement.prototype.isDesignMode = function () {
        var rootElement = this.getRootElement();
        return rootElement instanceof AdaptiveCard && rootElement.designMode;
    };
    CardElement.prototype.isFirstElement = function (element) {
        return true;
    };
    CardElement.prototype.isLastElement = function (element) {
        return true;
    };
    CardElement.prototype.isAtTheVeryLeft = function () {
        return this.parent ? this.parent.isLeftMostElement(this) && this.parent.isAtTheVeryLeft() : true;
    };
    CardElement.prototype.isAtTheVeryRight = function () {
        return this.parent ? this.parent.isRightMostElement(this) && this.parent.isAtTheVeryRight() : true;
    };
    CardElement.prototype.isAtTheVeryTop = function () {
        return this.parent ? this.parent.isFirstElement(this) && this.parent.isAtTheVeryTop() : true;
    };
    CardElement.prototype.isAtTheVeryBottom = function () {
        return this.parent ? this.parent.isLastElement(this) && this.parent.isAtTheVeryBottom() : true;
    };
    CardElement.prototype.isBleedingAtTop = function () {
        return false;
    };
    CardElement.prototype.isBleedingAtBottom = function () {
        return false;
    };
    CardElement.prototype.isLeftMostElement = function (element) {
        return true;
    };
    CardElement.prototype.isRightMostElement = function (element) {
        return true;
    };
    CardElement.prototype.isTopElement = function (element) {
        return this.isFirstElement(element);
    };
    CardElement.prototype.isBottomElement = function (element) {
        return this.isLastElement(element);
    };
    CardElement.prototype.isHiddenDueToOverflow = function () {
        return this._renderedElement !== undefined && this._renderedElement.style.visibility == 'hidden';
    };
    CardElement.prototype.getRootElement = function () {
        return this.getRootObject();
    };
    CardElement.prototype.getParentContainer = function () {
        var currentElement = this.parent;
        while (currentElement) {
            if (currentElement instanceof Container) {
                return currentElement;
            }
            currentElement = currentElement.parent;
        }
        return undefined;
    };
    CardElement.prototype.getAllInputs = function (processActions) {
        if (processActions === void 0) { processActions = true; }
        return [];
    };
    CardElement.prototype.getResourceInformation = function () {
        return [];
    };
    CardElement.prototype.getElementById = function (id) {
        return this.id === id ? this : undefined;
    };
    CardElement.prototype.getActionById = function (id) {
        return undefined;
    };
    CardElement.prototype.getEffectivePadding = function () {
        var padding = this.getPadding();
        return padding ? padding : this.getDefaultPadding();
    };
    CardElement.prototype.getEffectiveHorizontalAlignment = function () {
        if (this.horizontalAlignment !== undefined) {
            return this.horizontalAlignment;
        }
        if (this.parent) {
            return this.parent.getEffectiveHorizontalAlignment();
        }
        return Enums.HorizontalAlignment.Left;
    };
    Object.defineProperty(CardElement.prototype, "lwcRef", {
        get: function () {
            if (this._lwcRef) {
                return this._lwcRef;
            } 
        },
        set: function (value) {
            this._lwcRef = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "hostConfig", {
        get: function () {
            if (this._hostConfig) {
                return this._hostConfig;
            }
            else {
                if (this.parent) {
                    return this.parent.hostConfig;
                }
                else {
                    return host_config_1.defaultHostConfig;
                }
            }
        },
        set: function (value) {
            this._hostConfig = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "index", {
        get: function () {
            if (this.parent) {
                return this.parent.indexOf(this);
            }
            else {
                return 0;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "isInteractive", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "isStandalone", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "isInline", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "hasVisibleSeparator", {
        get: function () {
            if (this.parent && this.separatorElement) {
                return !this.parent.isFirstElement(this) && (this.isVisible || this.isDesignMode());
            }
            else {
                return false;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "separatorElement", {
        get: function () {
            return this._separatorElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        enumerable: false,
        configurable: true
    });
    CardElement.langProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_1, "lang", true, /^[a-z]{2,3}$/ig);
    CardElement.isVisibleProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_2, "isVisible", true);
    CardElement.separatorProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_0, "separator", false);
    CardElement.heightProperty = new serialization_1.ValueSetProperty(serialization_1.Versions.v1_1, "height", [
        { value: "auto" },
        { value: "stretch" }
    ], "auto");
    CardElement.horizontalAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_0, "horizontalAlignment", Enums.HorizontalAlignment);
    CardElement.spacingProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_0, "spacing", Enums.Spacing, Enums.Spacing.Default);
    __decorate([
        (0, serialization_1.property)(CardElement.horizontalAlignmentProperty)
    ], CardElement.prototype, "horizontalAlignment", void 0);
    __decorate([
        (0, serialization_1.property)(CardElement.spacingProperty)
    ], CardElement.prototype, "spacing", void 0);
    __decorate([
        (0, serialization_1.property)(CardElement.separatorProperty)
    ], CardElement.prototype, "separator", void 0);
    __decorate([
        (0, serialization_1.property)(CardElement.heightProperty)
    ], CardElement.prototype, "height", void 0);
    __decorate([
        (0, serialization_1.property)(CardElement.langProperty)
    ], CardElement.prototype, "lang", null);
    __decorate([
        (0, serialization_1.property)(CardElement.isVisibleProperty)
    ], CardElement.prototype, "isVisible", null);
    return CardElement;
}(card_object_1.CardObject));
exports.CardElement = CardElement;
var ActionProperty = /** @class */ (function (_super) {
    __extends(ActionProperty, _super);
    function ActionProperty(targetVersion, name, forbiddenActionTypes) {
        if (forbiddenActionTypes === void 0) { forbiddenActionTypes = []; }
        var _this = _super.call(this, targetVersion, name, undefined) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.forbiddenActionTypes = forbiddenActionTypes;
        return _this;
    }
    ActionProperty.prototype.parse = function (sender, source, context) {
        var parent = sender;
        return context.parseAction(parent, source[this.name], this.forbiddenActionTypes, parent.isDesignMode());
    };
    ActionProperty.prototype.toJSON = function (sender, target, value, context) {
        context.serializeValue(target, this.name, value ? value.toJSON(context) : undefined, undefined, true);
    };
    return ActionProperty;
}(serialization_1.PropertyDefinition));
exports.ActionProperty = ActionProperty;
var BaseTextBlock = /** @class */ (function (_super) {
    __extends(BaseTextBlock, _super);
    function BaseTextBlock(text) {
        var _this = _super.call(this) || this;
        _this.ariaHidden = false;
        if (text) {
            _this.text = text;
        }
        return _this;
    }
    BaseTextBlock.prototype.populateSchema = function (schema) {
        _super.prototype.populateSchema.call(this, schema);
        // selectAction is declared on BaseTextBlock but is only exposed on TextRun,
        // so the property is removed from the BaseTextBlock schema.
        schema.remove(BaseTextBlock.selectActionProperty);
    };
    Object.defineProperty(BaseTextBlock.prototype, "text", {
        get: function () {
            return this.getValue(BaseTextBlock.textProperty);
        },
        set: function (value) {
            this.setText(value);
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    BaseTextBlock.prototype.getFontSize = function (fontType) {
        switch (this.effectiveSize) {
            case Enums.TextSize.Small:
                return fontType.fontSizes.small;
            case Enums.TextSize.Medium:
                return fontType.fontSizes.medium;
            case Enums.TextSize.Large:
                return fontType.fontSizes.large;
            case Enums.TextSize.ExtraLarge:
                return fontType.fontSizes.extraLarge;
            default:
                return fontType.fontSizes.default;
        }
    };
    BaseTextBlock.prototype.getColorDefinition = function (colorSet, color) {
        switch (color) {
            case Enums.TextColor.Accent:
                return colorSet.accent;
            case Enums.TextColor.Dark:
                return colorSet.dark;
            case Enums.TextColor.Light:
                return colorSet.light;
            case Enums.TextColor.Good:
                return colorSet.good;
            case Enums.TextColor.Warning:
                return colorSet.warning;
            case Enums.TextColor.Attention:
                return colorSet.attention;
            default:
                return colorSet.default;
        }
    };
    BaseTextBlock.prototype.setText = function (value) {
        this.setValue(BaseTextBlock.textProperty, value);
    };
    BaseTextBlock.prototype.init = function (textDefinition) {
        this.size = textDefinition.size;
        this.weight = textDefinition.weight;
        this.color = textDefinition.color;
        this.isSubtle = textDefinition.isSubtle;
    };
    BaseTextBlock.prototype.asString = function () {
        return this.text;
    };
    BaseTextBlock.prototype.applyStylesTo = function (targetElement) {
        var fontType = this.hostConfig.getFontTypeDefinition(this.effectiveFontType);
        if (fontType.fontFamily) {
            targetElement.style.fontFamily = fontType.fontFamily;
        }
        var fontSize;
        switch (this.effectiveSize) {
            case Enums.TextSize.Small:
                fontSize = fontType.fontSizes.small;
                break;
            case Enums.TextSize.Medium:
                fontSize = fontType.fontSizes.medium;
                break;
            case Enums.TextSize.Large:
                fontSize = fontType.fontSizes.large;
                break;
            case Enums.TextSize.ExtraLarge:
                fontSize = fontType.fontSizes.extraLarge;
                break;
            default:
                fontSize = fontType.fontSizes.default;
                break;
        }
        targetElement.style.fontSize = fontSize + "px";
        var colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);
        targetElement.style.color = Utils.stringToCssColor(this.effectiveIsSubtle ? colorDefinition.subtle : colorDefinition.default);
        var fontWeight;
        switch (this.effectiveWeight) {
            case Enums.TextWeight.Lighter:
                fontWeight = fontType.fontWeights.lighter;
                break;
            case Enums.TextWeight.Bolder:
                fontWeight = fontType.fontWeights.bolder;
                break;
            default:
                fontWeight = fontType.fontWeights.default;
                break;
        }
        targetElement.style.fontWeight = fontWeight.toString();
        if (this.ariaHidden) {
            targetElement.setAttribute("aria-hidden", "true");
        }
    };
    Object.defineProperty(BaseTextBlock.prototype, "effectiveColor", {
        get: function () {
            return this.color !== undefined ? this.color : this.getEffectiveTextStyleDefinition().color;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseTextBlock.prototype, "effectiveFontType", {
        get: function () {
            return this.fontType !== undefined ? this.fontType : this.getEffectiveTextStyleDefinition().fontType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseTextBlock.prototype, "effectiveIsSubtle", {
        get: function () {
            return this.isSubtle !== undefined ? this.isSubtle : this.getEffectiveTextStyleDefinition().isSubtle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseTextBlock.prototype, "effectiveSize", {
        get: function () {
            return this.size !== undefined ? this.size : this.getEffectiveTextStyleDefinition().size;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseTextBlock.prototype, "effectiveWeight", {
        get: function () {
            return this.weight !== undefined ? this.weight : this.getEffectiveTextStyleDefinition().weight;
        },
        enumerable: false,
        configurable: true
    });
    //#region Schema
    BaseTextBlock.textProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "text", true);
    BaseTextBlock.sizeProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_0, "size", Enums.TextSize);
    BaseTextBlock.weightProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_0, "weight", Enums.TextWeight);
    BaseTextBlock.colorProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_0, "color", Enums.TextColor);
    BaseTextBlock.isSubtleProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_0, "isSubtle");
    BaseTextBlock.fontTypeProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_2, "fontType", Enums.FontType);
    BaseTextBlock.selectActionProperty = new ActionProperty(serialization_1.Versions.v1_1, "selectAction", ["Action.ShowCard"]);
    __decorate([
        (0, serialization_1.property)(BaseTextBlock.sizeProperty)
    ], BaseTextBlock.prototype, "size", void 0);
    __decorate([
        (0, serialization_1.property)(BaseTextBlock.weightProperty)
    ], BaseTextBlock.prototype, "weight", void 0);
    __decorate([
        (0, serialization_1.property)(BaseTextBlock.colorProperty)
    ], BaseTextBlock.prototype, "color", void 0);
    __decorate([
        (0, serialization_1.property)(BaseTextBlock.fontTypeProperty)
    ], BaseTextBlock.prototype, "fontType", void 0);
    __decorate([
        (0, serialization_1.property)(BaseTextBlock.isSubtleProperty)
    ], BaseTextBlock.prototype, "isSubtle", void 0);
    __decorate([
        (0, serialization_1.property)(BaseTextBlock.textProperty)
    ], BaseTextBlock.prototype, "text", null);
    __decorate([
        (0, serialization_1.property)(BaseTextBlock.selectActionProperty)
    ], BaseTextBlock.prototype, "selectAction", void 0);
    return BaseTextBlock;
}(CardElement));
exports.BaseTextBlock = BaseTextBlock;
var TextBlock = /** @class */ (function (_super) {
    __extends(TextBlock, _super);
    function TextBlock() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.wrap = false;
        _this._treatAsPlainText = true;
        _this.useMarkdown = true;
        return _this;
    }
    TextBlock.prototype.restoreOriginalContent = function () {
        if (this.renderedElement !== undefined) {
            if (this.maxLines && this.maxLines > 0) {
                this.renderedElement.style.maxHeight = this._computedLineHeight * this.maxLines + "px";
            }
            this.renderedElement.innerHTML = this._originalInnerHtml;
        }
    };
    TextBlock.prototype.truncateIfSupported = function (maxHeight) {
        if (this.renderedElement !== undefined) {
            // For now, only truncate TextBlocks that contain just a single
            // paragraph -- since the maxLines calculation doesn't take into
            // account Markdown lists
            var children = this.renderedElement.children;
            var isTextOnly = !children.length;
            var truncationSupported = isTextOnly || children.length == 1 && children[0].tagName.toLowerCase() == 'p';
            if (truncationSupported) {
                var element = isTextOnly ? this.renderedElement : children[0];
                Utils.truncate(element, maxHeight, this._computedLineHeight);
                return true;
            }
        }
        return false;
    };
    TextBlock.prototype.setText = function (value) {
        _super.prototype.setText.call(this, value);
        this._processedText = undefined;
    };
    TextBlock.prototype.internalRender = function () {
        var _this = this;
        this._processedText = undefined;
        if (this.text) {
            var preProcessedText = this.preProcessPropertyValue(BaseTextBlock.textProperty);
            var hostConfig = this.hostConfig;
            var element = void 0;
            if (this.forElementId) {
                var labelElement = document.createElement("label");
                labelElement.htmlFor = this.forElementId;
                element = labelElement;
            }
            else {
                element = document.createElement("div");
            }
            element.classList.add(hostConfig.makeCssClassName("ac-textBlock"));
            element.style.overflow = "hidden";
            this.applyStylesTo(element);
            if (this.style === "heading") {
                element.setAttribute("role", "heading");
                var headingLevel = this.hostConfig.textBlock.headingLevel;
                if (headingLevel !== undefined && headingLevel > 0) {
                    element.setAttribute("aria-level", headingLevel.toString());
                }
            }
            if (this.selectAction && hostConfig.supportsInteractivity) {
                element.onclick = function (e) {
                    if (_this.selectAction && _this.selectAction.isEnabled) {
                        e.preventDefault();
                        e.cancelBubble = true;
                        _this.selectAction.execute();
                    }
                };
                this.selectAction.setupElementForAccessibility(element);
                if (this.selectAction.isEnabled) {
                    element.classList.add(hostConfig.makeCssClassName("ac-selectable"));
                }
            }
            if (!this._processedText) {
                this._treatAsPlainText = true;
                var formattedText = TextFormatters.formatText(this.lang, preProcessedText);
                if (this.useMarkdown && formattedText) {
                    if (shared_1.GlobalSettings.allowMarkForTextHighlighting) {
                        formattedText = formattedText.replace(/<mark>/g, "===").replace(/<\/mark>/g, "/==/");
                    }
                    var markdownProcessingResult = AdaptiveCard.applyMarkdown(formattedText);
                    if (markdownProcessingResult.didProcess && markdownProcessingResult.outputHtml) {
                        this._processedText = markdownProcessingResult.outputHtml;
                        this._treatAsPlainText = false;
                        // Only process <mark> tag if markdown processing was applied because
                        // markdown processing is also responsible for sanitizing the input string
                        if (shared_1.GlobalSettings.allowMarkForTextHighlighting && this._processedText) {
                            var markStyle = "";
                            var effectiveStyle = this.getEffectiveStyleDefinition();
                            if (effectiveStyle.highlightBackgroundColor) {
                                markStyle += "background-color: " + effectiveStyle.highlightBackgroundColor + ";";
                            }
                            if (effectiveStyle.highlightForegroundColor) {
                                markStyle += "color: " + effectiveStyle.highlightForegroundColor + ";";
                            }
                            if (markStyle) {
                                markStyle = 'style="' + markStyle + '"';
                            }
                            this._processedText = this._processedText.replace(/===/g, "<mark " + markStyle + ">").replace(/\/==\//g, "</mark>");
                        }
                    }
                    else {
                        this._processedText = formattedText;
                        this._treatAsPlainText = true;
                    }
                }
                else {
                    this._processedText = formattedText;
                    this._treatAsPlainText = true;
                }
            }
            if (!this._processedText) {
                this._processedText = "";
            }
            if (this._treatAsPlainText) {
                element.innerText = this._processedText;
            }
            else {
                element.innerHTML = this._processedText;
            }
            if (element.firstElementChild instanceof HTMLElement) {
                var firstElementChild = element.firstElementChild;
                firstElementChild.style.marginTop = "0px";
                firstElementChild.style.width = "100%";
                if (!this.wrap) {
                    firstElementChild.style.overflow = "hidden";
                    firstElementChild.style.textOverflow = "ellipsis";
                }
            }
            if (element.lastElementChild instanceof HTMLElement) {
                element.lastElementChild.style.marginBottom = "0px";
            }
            var anchors = element.getElementsByTagName("a");
            for (var i = 0; i < anchors.length; i++) {
                var anchor = anchors[i];
                anchor.classList.add(hostConfig.makeCssClassName("ac-anchor"));
                anchor.target = "_blank";
                anchor.onclick = function (e) {
                    if (raiseAnchorClickedEvent(_this, e.target, e)) {
                        e.preventDefault();
                        e.cancelBubble = true;
                    }
                };
                anchor.oncontextmenu = function (e) {
                    if (raiseAnchorClickedEvent(_this, e.target, e)) {
                        e.preventDefault();
                        e.cancelBubble = true;
                        return false;
                    }
                    return true;
                };
            }
            if (this.wrap) {
                element.style.wordWrap = "break-word";
                if (this.maxLines && this.maxLines > 0) {
                    element.style.overflow = "hidden";
                    if (Utils.isInternetExplorer() || !shared_1.GlobalSettings.useWebkitLineClamp) {
                        element.style.maxHeight = (this._computedLineHeight * this.maxLines) + "px";
                    }
                    else {
                        // While non standard, --webkit-line-clamp works in every browser (except IE)
                        // and is a great solution to support the maxLines feature with ellipsis
                        // truncation. With --webkit-line-clamp there is need to use explicit line heights
                        element.style.removeProperty("line-height");
                        element.style.display = "-webkit-box";
                        element.style.webkitBoxOrient = "vertical";
                        element.style.webkitLineClamp = this.maxLines.toString();
                    }
                }
            }
            else {
                element.style.whiteSpace = "nowrap";
                element.style.textOverflow = "ellipsis";
            }
            if (shared_1.GlobalSettings.useAdvancedTextBlockTruncation || shared_1.GlobalSettings.useAdvancedCardBottomTruncation) {
                this._originalInnerHtml = element.innerHTML;
            }
            return element;
        }
        else {
            return undefined;
        }
    };
    TextBlock.prototype.truncateOverflow = function (maxHeight) {
        if (maxHeight >= this._computedLineHeight) {
            return this.truncateIfSupported(maxHeight);
        }
        return false;
    };
    TextBlock.prototype.undoOverflowTruncation = function () {
        this.restoreOriginalContent();
        if (shared_1.GlobalSettings.useAdvancedTextBlockTruncation && this.maxLines) {
            var maxHeight = this._computedLineHeight * this.maxLines;
            this.truncateIfSupported(maxHeight);
        }
    };
    TextBlock.prototype.applyStylesTo = function (targetElement) {
        _super.prototype.applyStylesTo.call(this, targetElement);
        switch (this.getEffectiveHorizontalAlignment()) {
            case Enums.HorizontalAlignment.Center:
                targetElement.style.textAlign = "center";
                break;
            case Enums.HorizontalAlignment.Right:
                targetElement.style.textAlign = "end";
                break;
            default:
                targetElement.style.textAlign = "start";
                break;
        }
        var lineHeights = this.hostConfig.lineHeights;
        if (lineHeights) {
            switch (this.effectiveSize) {
                case Enums.TextSize.Small:
                    this._computedLineHeight = lineHeights.small;
                    break;
                case Enums.TextSize.Medium:
                    this._computedLineHeight = lineHeights.medium;
                    break;
                case Enums.TextSize.Large:
                    this._computedLineHeight = lineHeights.large;
                    break;
                case Enums.TextSize.ExtraLarge:
                    this._computedLineHeight = lineHeights.extraLarge;
                    break;
                default:
                    this._computedLineHeight = lineHeights.default;
                    break;
            }
        }
        else {
            // Looks like 1.33 is the magic number to compute line-height
            // from font size.
            this._computedLineHeight = this.getFontSize(this.hostConfig.getFontTypeDefinition(this.effectiveFontType)) * 1.33;
        }
        targetElement.style.lineHeight = this._computedLineHeight + "px";
    };
    TextBlock.prototype.getJsonTypeName = function () {
        return "TextBlock";
    };
    TextBlock.prototype.getEffectiveTextStyleDefinition = function () {
        if (this.style) {
            return this.hostConfig.textStyles.getStyleByName(this.style);
        }
        return _super.prototype.getEffectiveTextStyleDefinition.call(this);
    };
    TextBlock.prototype.updateLayout = function (processChildren) {
        if (processChildren === void 0) { processChildren = false; }
        _super.prototype.updateLayout.call(this, processChildren);
        if (shared_1.GlobalSettings.useAdvancedTextBlockTruncation && this.maxLines && this.isDisplayed()) {
            // Reset the element's innerHTML in case the available room for
            // content has increased
            this.restoreOriginalContent();
            this.truncateIfSupported(this._computedLineHeight * this.maxLines);
        }
    };
    TextBlock.wrapProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_0, "wrap", false);
    TextBlock.maxLinesProperty = new serialization_1.NumProperty(serialization_1.Versions.v1_0, "maxLines");
    TextBlock.styleProperty = new serialization_1.ValueSetProperty(serialization_1.Versions.v1_5, "style", [
        { value: "default" },
        { value: "columnHeader" },
        { value: "heading" }
    ]);
    __decorate([
        (0, serialization_1.property)(TextBlock.wrapProperty)
    ], TextBlock.prototype, "wrap", void 0);
    __decorate([
        (0, serialization_1.property)(TextBlock.maxLinesProperty)
    ], TextBlock.prototype, "maxLines", void 0);
    __decorate([
        (0, serialization_1.property)(TextBlock.styleProperty)
    ], TextBlock.prototype, "style", void 0);
    return TextBlock;
}(BaseTextBlock));
exports.TextBlock = TextBlock;
var TextRun = /** @class */ (function (_super) {
    __extends(TextRun, _super);
    function TextRun() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.italic = false;
        _this.strikethrough = false;
        _this.highlight = false;
        _this.underline = false;
        return _this;
    }
    TextRun.prototype.populateSchema = function (schema) {
        _super.prototype.populateSchema.call(this, schema);
        schema.add(BaseTextBlock.selectActionProperty);
    };
    //#endregion
    TextRun.prototype.internalRender = function () {
        var _this = this;
        if (this.text) {
            var preProcessedText = this.preProcessPropertyValue(BaseTextBlock.textProperty);
            var hostConfig = this.hostConfig;
            var formattedText = TextFormatters.formatText(this.lang, preProcessedText);
            if (!formattedText) {
                formattedText = "";
            }
            var element = document.createElement("span");
            element.classList.add(hostConfig.makeCssClassName("ac-textRun"));
            this.applyStylesTo(element);
            if (this.selectAction && hostConfig.supportsInteractivity) {
                var anchor = document.createElement("a");
                anchor.classList.add(hostConfig.makeCssClassName("ac-anchor"));
                var href = this.selectAction.getHref();
                anchor.href = href ? href : "";
                anchor.target = "_blank";
                anchor.onclick = function (e) {
                    if (_this.selectAction && _this.selectAction.isEnabled) {
                        e.preventDefault();
                        e.cancelBubble = true;
                        _this.selectAction.execute();
                    }
                };
                this.selectAction.setupElementForAccessibility(anchor);
                anchor.innerText = formattedText;
                element.appendChild(anchor);
            }
            else {
                element.innerText = formattedText;
            }
            return element;
        }
        else {
            return undefined;
        }
    };
    TextRun.prototype.applyStylesTo = function (targetElement) {
        _super.prototype.applyStylesTo.call(this, targetElement);
        if (this.italic) {
            targetElement.style.fontStyle = "italic";
        }
        if (this.strikethrough) {
            targetElement.style.textDecoration = "line-through";
        }
        if (this.highlight) {
            var colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);
            targetElement.style.backgroundColor = Utils.stringToCssColor(this.effectiveIsSubtle ? colorDefinition.highlightColors.subtle : colorDefinition.highlightColors.default);
        }
        if (this.underline) {
            targetElement.style.textDecoration = "underline";
        }
    };
    TextRun.prototype.getJsonTypeName = function () {
        return "TextRun";
    };
    Object.defineProperty(TextRun.prototype, "isStandalone", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextRun.prototype, "isInline", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    TextRun.italicProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_2, "italic", false);
    TextRun.strikethroughProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_2, "strikethrough", false);
    TextRun.highlightProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_2, "highlight", false);
    TextRun.underlineProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_3, "underline", false);
    __decorate([
        (0, serialization_1.property)(TextRun.italicProperty)
    ], TextRun.prototype, "italic", void 0);
    __decorate([
        (0, serialization_1.property)(TextRun.strikethroughProperty)
    ], TextRun.prototype, "strikethrough", void 0);
    __decorate([
        (0, serialization_1.property)(TextRun.highlightProperty)
    ], TextRun.prototype, "highlight", void 0);
    __decorate([
        (0, serialization_1.property)(TextRun.underlineProperty)
    ], TextRun.prototype, "underline", void 0);
    return TextRun;
}(BaseTextBlock));
exports.TextRun = TextRun;
var RichTextBlock = /** @class */ (function (_super) {
    __extends(RichTextBlock, _super);
    function RichTextBlock() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._inlines = [];
        return _this;
    }
    RichTextBlock.prototype.internalAddInline = function (inline, forceAdd) {
        if (forceAdd === void 0) { forceAdd = false; }
        if (!inline.isInline) {
            throw new Error(strings_1.Strings.errors.elementCannotBeUsedAsInline());
        }
        var doAdd = inline.parent === undefined || forceAdd;
        if (!doAdd && inline.parent != this) {
            throw new Error(strings_1.Strings.errors.inlineAlreadyParented());
        }
        else {
            inline.setParent(this);
            this._inlines.push(inline);
        }
    };
    RichTextBlock.prototype.internalParse = function (source, context) {
        _super.prototype.internalParse.call(this, source, context);
        this._inlines = [];
        if (Array.isArray(source["inlines"])) {
            for (var _i = 0, _a = source["inlines"]; _i < _a.length; _i++) {
                var jsonInline = _a[_i];
                var inline = void 0;
                if (typeof jsonInline === "string") {
                    var textRun = new TextRun();
                    textRun.text = jsonInline;
                    inline = textRun;
                }
                else {
                    // No fallback for inlines in 1.2
                    inline = context.parseElement(this, jsonInline, false);
                }
                if (inline) {
                    this.internalAddInline(inline, true);
                }
            }
        }
    };
    RichTextBlock.prototype.internalToJSON = function (target, context) {
        _super.prototype.internalToJSON.call(this, target, context);
        if (this._inlines.length > 0) {
            var jsonInlines = [];
            for (var _i = 0, _a = this._inlines; _i < _a.length; _i++) {
                var inline = _a[_i];
                jsonInlines.push(inline.toJSON(context));
            }
            context.serializeValue(target, "inlines", jsonInlines);
        }
    };
    RichTextBlock.prototype.internalRender = function () {
        if (this._inlines.length > 0) {
            var element = void 0;
            if (this.forElementId) {
                var labelElement = document.createElement("label");
                labelElement.htmlFor = this.forElementId;
                element = labelElement;
            }
            else {
                element = document.createElement("div");
            }
            element.className = this.hostConfig.makeCssClassName("ac-richTextBlock");
            switch (this.getEffectiveHorizontalAlignment()) {
                case Enums.HorizontalAlignment.Center:
                    element.style.textAlign = "center";
                    break;
                case Enums.HorizontalAlignment.Right:
                    element.style.textAlign = "end";
                    break;
                default:
                    element.style.textAlign = "start";
                    break;
            }
            var renderedInlines = 0;
            for (var _i = 0, _a = this._inlines; _i < _a.length; _i++) {
                var inline = _a[_i];
                var renderedInline = inline.render();
                if (renderedInline) {
                    element.appendChild(renderedInline);
                    renderedInlines++;
                }
            }
            if (renderedInlines > 0) {
                return element;
            }
        }
        return undefined;
    };
    RichTextBlock.prototype.asString = function () {
        var result = "";
        for (var _i = 0, _a = this._inlines; _i < _a.length; _i++) {
            var inline = _a[_i];
            result += inline.asString();
        }
        return result;
    };
    RichTextBlock.prototype.getJsonTypeName = function () {
        return "RichTextBlock";
    };
    RichTextBlock.prototype.getInlineCount = function () {
        return this._inlines.length;
    };
    RichTextBlock.prototype.getInlineAt = function (index) {
        if (index >= 0 && index < this._inlines.length) {
            return this._inlines[index];
        }
        else {
            throw new Error(strings_1.Strings.errors.indexOutOfRange(index));
        }
    };
    RichTextBlock.prototype.addInline = function (inline) {
        if (typeof inline === "string") {
            this.internalAddInline(new TextRun(inline));
        }
        else {
            this.internalAddInline(inline);
        }
    };
    RichTextBlock.prototype.removeInline = function (inline) {
        var index = this._inlines.indexOf(inline);
        if (index >= 0) {
            this._inlines[index].setParent(undefined);
            this._inlines.splice(index, 1);
            return true;
        }
        return false;
    };
    return RichTextBlock;
}(CardElement));
exports.RichTextBlock = RichTextBlock;
var Fact = /** @class */ (function (_super) {
    __extends(Fact, _super);
    function Fact(name, value) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.value = value;
        return _this;
    }
    //#endregion
    Fact.prototype.getSchemaKey = function () {
        return "Fact";
    };
    //#region Schema
    Fact.titleProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "title");
    Fact.valueProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "value");
    __decorate([
        (0, serialization_1.property)(Fact.titleProperty)
    ], Fact.prototype, "name", void 0);
    __decorate([
        (0, serialization_1.property)(Fact.valueProperty)
    ], Fact.prototype, "value", void 0);
    return Fact;
}(serialization_1.SerializableObject));
exports.Fact = Fact;
var FactSet = /** @class */ (function (_super) {
    __extends(FactSet, _super);
    function FactSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FactSet.prototype, "useDefaultSizing", {
        //#endregion
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    FactSet.prototype.internalRender = function () {
        var element = undefined;
        var hostConfig = this.hostConfig;
        if (this.facts.length > 0) {
            element = document.createElement("table");
            element.style.borderWidth = "0px";
            element.style.borderSpacing = "0px";
            element.style.borderStyle = "none";
            element.style.borderCollapse = "collapse";
            element.style.display = "block";
            element.style.overflow = "hidden";
            element.classList.add(hostConfig.makeCssClassName("ac-factset"));
            element.setAttribute("role", "presentation");
            for (var i = 0; i < this.facts.length; i++) {
                var trElement = document.createElement("tr");
                if (i > 0) {
                    trElement.style.marginTop = hostConfig.factSet.spacing + "px";
                }
                // Title column
                var tdElement = document.createElement("td");
                tdElement.style.padding = "0";
                tdElement.classList.add(hostConfig.makeCssClassName("ac-fact-title"));
                if (hostConfig.factSet.title.maxWidth) {
                    tdElement.style.maxWidth = hostConfig.factSet.title.maxWidth + "px";
                }
                tdElement.style.verticalAlign = "top";
                var textBlock = new TextBlock();
                textBlock.setParent(this);
                textBlock.text = (!this.facts[i].name && this.isDesignMode()) ? "Title" : this.facts[i].name;
                textBlock.size = hostConfig.factSet.title.size;
                textBlock.color = hostConfig.factSet.title.color;
                textBlock.isSubtle = hostConfig.factSet.title.isSubtle;
                textBlock.weight = hostConfig.factSet.title.weight;
                textBlock.wrap = hostConfig.factSet.title.wrap;
                textBlock.spacing = Enums.Spacing.None;
                Utils.appendChild(tdElement, textBlock.render());
                Utils.appendChild(trElement, tdElement);
                // Spacer column
                tdElement = document.createElement("td");
                tdElement.style.width = "10px";
                Utils.appendChild(trElement, tdElement);
                // Value column
                tdElement = document.createElement("td");
                tdElement.style.padding = "0";
                tdElement.style.verticalAlign = "top";
                tdElement.classList.add(hostConfig.makeCssClassName("ac-fact-value"));
                textBlock = new TextBlock();
                textBlock.setParent(this);
                textBlock.text = this.facts[i].value;
                textBlock.size = hostConfig.factSet.value.size;
                textBlock.color = hostConfig.factSet.value.color;
                textBlock.isSubtle = hostConfig.factSet.value.isSubtle;
                textBlock.weight = hostConfig.factSet.value.weight;
                textBlock.wrap = hostConfig.factSet.value.wrap;
                textBlock.spacing = Enums.Spacing.None;
                Utils.appendChild(tdElement, textBlock.render());
                Utils.appendChild(trElement, tdElement);
                Utils.appendChild(element, trElement);
            }
        }
        return element;
    };
    FactSet.prototype.getJsonTypeName = function () {
        return "FactSet";
    };
    //#region Schema
    FactSet.factsProperty = new serialization_1.SerializableObjectCollectionProperty(serialization_1.Versions.v1_0, "facts", Fact);
    __decorate([
        (0, serialization_1.property)(FactSet.factsProperty)
    ], FactSet.prototype, "facts", void 0);
    return FactSet;
}(CardElement));
exports.FactSet = FactSet;
var ImageDimensionProperty = /** @class */ (function (_super) {
    __extends(ImageDimensionProperty, _super);
    function ImageDimensionProperty(targetVersion, name, internalName, fallbackProperty) {
        var _this = _super.call(this, targetVersion, name) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.internalName = internalName;
        _this.fallbackProperty = fallbackProperty;
        return _this;
    }
    ImageDimensionProperty.prototype.getInternalName = function () {
        return this.internalName;
    };
    ImageDimensionProperty.prototype.parse = function (sender, source, context) {
        var result = undefined;
        var sourceValue = source[this.name];
        if (sourceValue === undefined) {
            return this.defaultValue;
        }
        var isValid = false;
        if (typeof sourceValue === "string") {
            try {
                var size = shared_1.SizeAndUnit.parse(sourceValue, true);
                if (size.unit == Enums.SizeUnit.Pixel) {
                    result = size.physicalSize;
                    isValid = true;
                }
            }
            catch (_a) {
                // Swallow the exception
            }
            // If the source value isn't valid per this property definition,
            // check its validity per the fallback property, if specified
            if (!isValid && this.fallbackProperty) {
                isValid = this.fallbackProperty.isValidValue(sourceValue, context);
            }
        }
        if (!isValid) {
            context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(sourceValue, this.name));
        }
        return result;
    };
    ImageDimensionProperty.prototype.toJSON = function (sender, target, value, context) {
        context.serializeValue(target, this.name, typeof value === "number" && !isNaN(value) ? value + "px" : undefined);
    };
    return ImageDimensionProperty;
}(serialization_1.PropertyDefinition));
var Image = /** @class */ (function (_super) {
    __extends(Image, _super);
    function Image() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.size = Enums.Size.Auto;
        _this.style = Enums.ImageStyle.Default;
        return _this;
    }
    Image.prototype.populateSchema = function (schema) {
        _super.prototype.populateSchema.call(this, schema);
        schema.remove(CardElement.heightProperty);
    };
    //#endregion
    Image.prototype.applySize = function (element) {
        if (this.pixelWidth || this.pixelHeight) {
            if (this.pixelWidth) {
                element.style.width = this.pixelWidth + "px";
            }
            if (this.pixelHeight) {
                element.style.height = this.pixelHeight + "px";
            }
        }
        else {
            if (this.maxHeight) {
                // If the image is constrained in height, we set its height property and
                // auto and stretch are ignored (default to medium). THis is necessary for
                // ImageSet which uses a maximum image height as opposed to the cards width
                // as a constraining dimension
                switch (this.size) {
                    case Enums.Size.Small:
                        element.style.height = this.hostConfig.imageSizes.small + "px";
                        break;
                    case Enums.Size.Large:
                        element.style.height = this.hostConfig.imageSizes.large + "px";
                        break;
                    default:
                        element.style.height = this.hostConfig.imageSizes.medium + "px";
                        break;
                }
                element.style.maxHeight = this.maxHeight + "px";
            }
            else {
                switch (this.size) {
                    case Enums.Size.Stretch:
                        element.style.width = "100%";
                        break;
                    case Enums.Size.Auto:
                        element.style.maxWidth = "100%";
                        break;
                    case Enums.Size.Small:
                        element.style.width = this.hostConfig.imageSizes.small + "px";
                        break;
                    case Enums.Size.Large:
                        element.style.width = this.hostConfig.imageSizes.large + "px";
                        break;
                    case Enums.Size.Medium:
                        element.style.width = this.hostConfig.imageSizes.medium + "px";
                        break;
                }
                element.style.maxHeight = "100%";
            }
        }
    };
    Object.defineProperty(Image.prototype, "useDefaultSizing", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Image.prototype.internalRender = function () {
        var _this = this;
        var element = undefined;
        if (this.url) {
            element = document.createElement("div");
            element.style.display = "flex";
            element.style.alignItems = "flex-start";
            // Cache hostConfig to avoid walking the parent hierarchy multiple times
            var hostConfig = this.hostConfig;
            switch (this.getEffectiveHorizontalAlignment()) {
                case Enums.HorizontalAlignment.Center:
                    element.style.justifyContent = "center";
                    break;
                case Enums.HorizontalAlignment.Right:
                    element.style.justifyContent = "flex-end";
                    break;
                default:
                    element.style.justifyContent = "flex-start";
                    break;
            }
            var imageElement = document.createElement("img");
            imageElement.onload = function (e) {
                raiseImageLoadedEvent(_this);
            };
            imageElement.onerror = function (e) {
                if (_this.renderedElement) {
                    var card = _this.getRootElement();
                    _this.renderedElement.innerHTML = "";
                    if (card && card.designMode) {
                        var errorElement = document.createElement("div");
                        errorElement.style.display = "flex";
                        errorElement.style.alignItems = "center";
                        errorElement.style.justifyContent = "center";
                        errorElement.style.backgroundColor = "#EEEEEE";
                        errorElement.style.color = "black";
                        errorElement.innerText = ":-(";
                        errorElement.style.padding = "10px";
                        _this.applySize(errorElement);
                        _this.renderedElement.appendChild(errorElement);
                    }
                }
                raiseImageLoadedEvent(_this);
            };
            imageElement.style.minWidth = "0";
            imageElement.classList.add(hostConfig.makeCssClassName("ac-image"));
            if (this.selectAction && hostConfig.supportsInteractivity) {
                imageElement.onkeypress = function (e) {
                    if (_this.selectAction && _this.selectAction.isEnabled && (e.code == "Enter" || e.code == "Space")) { // enter or space pressed
                        e.preventDefault();
                        e.cancelBubble = true;
                        _this.selectAction.execute();
                    }
                };
                imageElement.onclick = function (e) {
                    if (_this.selectAction && _this.selectAction.isEnabled) {
                        e.preventDefault();
                        e.cancelBubble = true;
                        _this.selectAction.execute();
                    }
                };
                this.selectAction.setupElementForAccessibility(imageElement);
                if (this.selectAction.isEnabled) {
                    imageElement.classList.add(hostConfig.makeCssClassName("ac-selectable"));
                }
            }
            this.applySize(imageElement);
            if (this.style === Enums.ImageStyle.Person) {
                imageElement.style.borderRadius = "50%";
                imageElement.style.backgroundPosition = "50% 50%";
                imageElement.style.backgroundRepeat = "no-repeat";
            }
            imageElement.style.backgroundColor = Utils.stringToCssColor(this.backgroundColor);
            imageElement.src = this.preProcessPropertyValue(Image.urlProperty);
            var altTextProperty = this.preProcessPropertyValue(Image.altTextProperty);
            if (altTextProperty) {
                imageElement.alt = altTextProperty;
            }
            element.appendChild(imageElement);
        }
        return element;
    };
    Image.prototype.getJsonTypeName = function () {
        return "Image";
    };
    Image.prototype.getActionById = function (id) {
        var result = _super.prototype.getActionById.call(this, id);
        if (!result && this.selectAction) {
            result = this.selectAction.getActionById(id);
        }
        return result;
    };
    Image.prototype.getResourceInformation = function () {
        return this.url ? [{ url: this.url, mimeType: "image" }] : [];
    };
    Image.urlProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "url");
    Image.altTextProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "altText");
    Image.backgroundColorProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_1, "backgroundColor");
    Image.styleProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_0, "style", Enums.ImageStyle, Enums.ImageStyle.Default);
    Image.sizeProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_0, "size", Enums.Size, Enums.Size.Auto);
    Image.pixelWidthProperty = new ImageDimensionProperty(serialization_1.Versions.v1_1, "width", "pixelWidth");
    Image.pixelHeightProperty = new ImageDimensionProperty(serialization_1.Versions.v1_1, "height", "pixelHeight", CardElement.heightProperty);
    Image.selectActionProperty = new ActionProperty(serialization_1.Versions.v1_1, "selectAction", ["Action.ShowCard"]);
    __decorate([
        (0, serialization_1.property)(Image.urlProperty)
    ], Image.prototype, "url", void 0);
    __decorate([
        (0, serialization_1.property)(Image.altTextProperty)
    ], Image.prototype, "altText", void 0);
    __decorate([
        (0, serialization_1.property)(Image.backgroundColorProperty)
    ], Image.prototype, "backgroundColor", void 0);
    __decorate([
        (0, serialization_1.property)(Image.sizeProperty)
    ], Image.prototype, "size", void 0);
    __decorate([
        (0, serialization_1.property)(Image.styleProperty)
    ], Image.prototype, "style", void 0);
    __decorate([
        (0, serialization_1.property)(Image.pixelWidthProperty)
    ], Image.prototype, "pixelWidth", void 0);
    __decorate([
        (0, serialization_1.property)(Image.pixelHeightProperty)
    ], Image.prototype, "pixelHeight", void 0);
    __decorate([
        (0, serialization_1.property)(Image.selectActionProperty)
    ], Image.prototype, "selectAction", void 0);
    return Image;
}(CardElement));
exports.Image = Image;
var CardElementContainer = /** @class */ (function (_super) {
    __extends(CardElementContainer, _super);
    function CardElementContainer() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allowVerticalOverflow = false;
        return _this;
    }
    CardElementContainer.prototype.populateSchema = function (schema) {
        _super.prototype.populateSchema.call(this, schema);
        if (!this.isSelectable) {
            schema.remove(CardElementContainer.selectActionProperty);
        }
    };
    //#endregion
    CardElementContainer.prototype.isElementAllowed = function (element) {
        return this.hostConfig.supportsInteractivity || !element.isInteractive;
    };
    CardElementContainer.prototype.applyPadding = function () {
        _super.prototype.applyPadding.call(this);
        if (!this.renderedElement) {
            return;
        }
        var physicalPadding = new shared_1.SpacingDefinition();
        if (this.getEffectivePadding()) {
            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());
        }
        this.renderedElement.style.paddingTop = physicalPadding.top + "px";
        this.renderedElement.style.paddingRight = physicalPadding.right + "px";
        this.renderedElement.style.paddingBottom = physicalPadding.bottom + "px";
        this.renderedElement.style.paddingLeft = physicalPadding.left + "px";
        this.renderedElement.style.marginRight = "0";
        this.renderedElement.style.marginLeft = "0";
    };
    Object.defineProperty(CardElementContainer.prototype, "isSelectable", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    CardElementContainer.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        for (var i = 0; i < this.getItemCount(); i++) {
            var item = this.getItemAt(i);
            if (!this.hostConfig.supportsInteractivity && item.isInteractive) {
                context.addFailure(this, Enums.ValidationEvent.InteractivityNotAllowed, strings_1.Strings.errors.interactivityNotAllowed());
            }
            if (!this.isElementAllowed(item)) {
                context.addFailure(this, Enums.ValidationEvent.InteractivityNotAllowed, strings_1.Strings.errors.elementTypeNotAllowed(item.getJsonTypeName()));
            }
            item.internalValidateProperties(context);
        }
        if (this._selectAction) {
            this._selectAction.internalValidateProperties(context);
        }
    };
    CardElementContainer.prototype.render = function () {
        var _this = this;
        var element = _super.prototype.render.call(this);
        if (element) {
            var hostConfig = this.hostConfig;
            if (this.allowVerticalOverflow) {
                element.style.overflowX = "hidden";
                element.style.overflowY = "auto";
            }
            if (element && this.isSelectable && this._selectAction && hostConfig.supportsInteractivity) {
                element.onclick = function (e) {
                    if (_this._selectAction && _this._selectAction.isEnabled) {
                        e.preventDefault();
                        e.cancelBubble = true;
                        _this._selectAction.execute();
                    }
                };
                element.onkeypress = function (e) {
                    if (_this._selectAction && _this._selectAction.isEnabled && (e.code == "Enter" || e.code == "Space")) {
                        // Enter or space pressed
                        e.preventDefault();
                        e.cancelBubble = true;
                        _this._selectAction.execute();
                    }
                };
                this._selectAction.setupElementForAccessibility(element);
                if (this._selectAction.isEnabled) {
                    element.classList.add(hostConfig.makeCssClassName("ac-selectable"));
                }
            }
        }
        return element;
    };
    CardElementContainer.prototype.updateLayout = function (processChildren) {
        if (processChildren === void 0) { processChildren = true; }
        _super.prototype.updateLayout.call(this, processChildren);
        if (processChildren) {
            for (var i = 0; i < this.getItemCount(); i++) {
                this.getItemAt(i).updateLayout();
            }
        }
    };
    CardElementContainer.prototype.getAllInputs = function (processActions) {
        if (processActions === void 0) { processActions = true; }
        var result = [];
        for (var i = 0; i < this.getItemCount(); i++) {
            result = result.concat(this.getItemAt(i).getAllInputs(processActions));
        }
        return result;
    };
    CardElementContainer.prototype.getResourceInformation = function () {
        var result = [];
        for (var i = 0; i < this.getItemCount(); i++) {
            result = result.concat(this.getItemAt(i).getResourceInformation());
        }
        return result;
    };
    CardElementContainer.prototype.getElementById = function (id) {
        var result = _super.prototype.getElementById.call(this, id);
        if (!result) {
            for (var i = 0; i < this.getItemCount(); i++) {
                result = this.getItemAt(i).getElementById(id);
                if (result) {
                    break;
                }
            }
        }
        return result;
    };
    /**
     * @inheritdoc
     */
    CardElementContainer.prototype.findDOMNodeOwner = function (node) {
        var target = undefined;
        for (var i = 0; i < this.getItemCount(); i++) {
            // recur through child elements
            target = this.getItemAt(i).findDOMNodeOwner(node);
            if (target) {
                return target;
            }
        }
        // if not found in children, defer to parent implementation
        return _super.prototype.findDOMNodeOwner.call(this, node);
    };
    CardElementContainer.selectActionProperty = new ActionProperty(serialization_1.Versions.v1_1, "selectAction", ["Action.ShowCard"]);
    __decorate([
        (0, serialization_1.property)(CardElementContainer.selectActionProperty)
    ], CardElementContainer.prototype, "_selectAction", void 0);
    return CardElementContainer;
}(CardElement));
exports.CardElementContainer = CardElementContainer;
var ImageSet = /** @class */ (function (_super) {
    __extends(ImageSet, _super);
    function ImageSet() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._images = [];
        _this.imageSize = Enums.ImageSize.Medium;
        return _this;
    }
    //#endregion
    ImageSet.prototype.internalRender = function () {
        var element = undefined;
        if (this._images.length > 0) {
            element = document.createElement("div");
            element.style.display = "flex";
            element.style.flexWrap = "wrap";
            for (var _i = 0, _a = this._images; _i < _a.length; _i++) {
                var image = _a[_i];
                switch (this.imageSize) {
                    case Enums.ImageSize.Small:
                        image.size = Enums.Size.Small;
                        break;
                    case Enums.ImageSize.Large:
                        image.size = Enums.Size.Large;
                        break;
                    default:
                        image.size = Enums.Size.Medium;
                        break;
                }
                image.maxHeight = this.hostConfig.imageSet.maxImageHeight;
                var renderedImage = image.render();
                if (renderedImage) {
                    renderedImage.style.display = "inline-flex";
                    renderedImage.style.margin = "0px";
                    renderedImage.style.marginRight = "10px";
                    Utils.appendChild(element, renderedImage);
                }
            }
        }
        return element;
    };
    ImageSet.prototype.getItemCount = function () {
        return this._images.length;
    };
    ImageSet.prototype.getItemAt = function (index) {
        return this._images[index];
    };
    ImageSet.prototype.getFirstVisibleRenderedItem = function () {
        return this._images && this._images.length > 0 ? this._images[0] : undefined;
    };
    ImageSet.prototype.getLastVisibleRenderedItem = function () {
        return this._images && this._images.length > 0 ? this._images[this._images.length - 1] : undefined;
    };
    ImageSet.prototype.removeItem = function (item) {
        if (item instanceof Image) {
            var itemIndex = this._images.indexOf(item);
            if (itemIndex >= 0) {
                this._images.splice(itemIndex, 1);
                item.setParent(undefined);
                this.updateLayout();
                return true;
            }
        }
        return false;
    };
    ImageSet.prototype.getJsonTypeName = function () {
        return "ImageSet";
    };
    ImageSet.prototype.addImage = function (image) {
        if (!image.parent) {
            this._images.push(image);
            image.setParent(this);
        }
        else {
            throw new Error("This image already belongs to another ImageSet");
        }
    };
    ImageSet.prototype.indexOf = function (cardElement) {
        return cardElement instanceof Image ? this._images.indexOf(cardElement) : -1;
    };
    ImageSet.imagesProperty = new serialization_1.SerializableObjectCollectionProperty(serialization_1.Versions.v1_0, "images", Image, function (sender, item) { item.setParent(sender); });
    ImageSet.imageSizeProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_0, "imageSize", Enums.ImageSize, Enums.ImageSize.Medium);
    __decorate([
        (0, serialization_1.property)(ImageSet.imagesProperty)
    ], ImageSet.prototype, "_images", void 0);
    __decorate([
        (0, serialization_1.property)(ImageSet.imageSizeProperty)
    ], ImageSet.prototype, "imageSize", void 0);
    return ImageSet;
}(CardElementContainer));
exports.ImageSet = ImageSet;
var MediaSource = /** @class */ (function (_super) {
    __extends(MediaSource, _super);
    function MediaSource(url, mimeType) {
        var _this = _super.call(this) || this;
        _this.url = url;
        _this.mimeType = mimeType;
        return _this;
    }
    //#endregion
    MediaSource.prototype.getSchemaKey = function () {
        return "MediaSource";
    };
    MediaSource.prototype.isValid = function () {
        return this.mimeType && this.url ? true : false;
    };
    MediaSource.prototype.render = function () {
        var result = undefined;
        if (this.isValid()) {
            result = document.createElement("source");
            result.src = this.url;
            result.type = this.mimeType;
        }
        return result;
    };
    //#region Schema
    MediaSource.mimeTypeProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_1, "mimeType");
    MediaSource.urlProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_1, "url");
    __decorate([
        (0, serialization_1.property)(MediaSource.mimeTypeProperty)
    ], MediaSource.prototype, "mimeType", void 0);
    __decorate([
        (0, serialization_1.property)(MediaSource.urlProperty)
    ], MediaSource.prototype, "url", void 0);
    return MediaSource;
}(serialization_1.SerializableObject));
exports.MediaSource = MediaSource;
var Media = /** @class */ (function (_super) {
    __extends(Media, _super);
    function Media() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.sources = [];
        return _this;
    }
    Media.prototype.getPosterUrl = function () {
        return this.poster ? this.poster : this.hostConfig.media.defaultPoster;
    };
    Media.prototype.processSources = function () {
        this._selectedSources = [];
        this._selectedMediaType = undefined;
        for (var _i = 0, _a = this.sources; _i < _a.length; _i++) {
            var source = _a[_i];
            var mimeComponents = source.mimeType ? source.mimeType.split('/') : [];
            if (mimeComponents.length == 2) {
                if (!this._selectedMediaType) {
                    var index = Media.supportedMediaTypes.indexOf(mimeComponents[0]);
                    if (index >= 0) {
                        this._selectedMediaType = Media.supportedMediaTypes[index];
                    }
                }
                if (mimeComponents[0] == this._selectedMediaType) {
                    this._selectedSources.push(source);
                }
            }
        }
    };
    Media.prototype.handlePlayButtonInvoke = function (event) {
        if (this.hostConfig.media.allowInlinePlayback) {
            event.preventDefault();
            event.cancelBubble = true;
            if (this.renderedElement) {
                var mediaPlayerElement = this.renderMediaPlayer();
                this.renderedElement.innerHTML = "";
                this.renderedElement.appendChild(mediaPlayerElement);
                mediaPlayerElement.play();
                mediaPlayerElement.focus();
            }
        }
        else {
            if (Media.onPlay) {
                event.preventDefault();
                event.cancelBubble = true;
                Media.onPlay(this);
            }
        }
    };
    Media.prototype.renderPoster = function () {
        var _this = this;
        var playButtonArrowWidth = 12;
        var playButtonArrowHeight = 15;
        var posterRootElement = document.createElement("div");
        posterRootElement.className = this.hostConfig.makeCssClassName("ac-media-poster");
        posterRootElement.setAttribute("role", "contentinfo");
        posterRootElement.setAttribute("aria-label", this.altText ? this.altText : strings_1.Strings.defaults.mediaPlayerAriaLabel());
        posterRootElement.style.position = "relative";
        posterRootElement.style.display = "flex";
        var posterUrl = this.getPosterUrl();
        if (posterUrl) {
            var posterImageElement_1 = document.createElement("img");
            posterImageElement_1.style.width = "100%";
            posterImageElement_1.style.height = "100%";
            posterImageElement_1.setAttribute("role", "presentation");
            posterImageElement_1.onerror = function (e) {
                if (posterImageElement_1.parentNode) {
                    posterImageElement_1.parentNode.removeChild(posterImageElement_1);
                }
                posterRootElement.classList.add("empty");
                posterRootElement.style.minHeight = "150px";
            };
            posterImageElement_1.src = posterUrl;
            posterRootElement.appendChild(posterImageElement_1);
        }
        else {
            posterRootElement.classList.add("empty");
            posterRootElement.style.minHeight = "150px";
        }
        if (this.hostConfig.supportsInteractivity && this._selectedSources.length > 0) {
            var playButtonOuterElement = document.createElement("div");
            playButtonOuterElement.tabIndex = 0;
            playButtonOuterElement.setAttribute("role", "button");
            playButtonOuterElement.setAttribute("aria-label", strings_1.Strings.defaults.mediaPlayerPlayMedia());
            playButtonOuterElement.className = this.hostConfig.makeCssClassName("ac-media-playButton");
            playButtonOuterElement.style.display = "flex";
            playButtonOuterElement.style.alignItems = "center";
            playButtonOuterElement.style.justifyContent = "center";
            playButtonOuterElement.onclick = function (e) {
                _this.handlePlayButtonInvoke(e);
            };
            playButtonOuterElement.onkeypress = function (e) {
                if (e.code == "Enter" || e.code == "Space") { // space or enter
                    _this.handlePlayButtonInvoke(e);
                }
            };
            var playButtonInnerElement = document.createElement("div");
            playButtonInnerElement.className = this.hostConfig.makeCssClassName("ac-media-playButton-arrow");
            playButtonInnerElement.style.width = playButtonArrowWidth + "px";
            playButtonInnerElement.style.height = playButtonArrowHeight + "px";
            playButtonInnerElement.style.borderTopWidth = (playButtonArrowHeight / 2) + "px";
            playButtonInnerElement.style.borderBottomWidth = (playButtonArrowHeight / 2) + "px";
            playButtonInnerElement.style.borderLeftWidth = playButtonArrowWidth + "px";
            playButtonInnerElement.style.borderRightWidth = "0";
            playButtonInnerElement.style.borderStyle = "solid";
            playButtonInnerElement.style.borderTopColor = "transparent";
            playButtonInnerElement.style.borderRightColor = "transparent";
            playButtonInnerElement.style.borderBottomColor = "transparent";
            playButtonInnerElement.style.transform = "translate(" + (playButtonArrowWidth / 10) + "px,0px)";
            playButtonOuterElement.appendChild(playButtonInnerElement);
            var playButtonContainer = document.createElement("div");
            playButtonContainer.style.position = "absolute";
            playButtonContainer.style.left = "0";
            playButtonContainer.style.top = "0";
            playButtonContainer.style.width = "100%";
            playButtonContainer.style.height = "100%";
            playButtonContainer.style.display = "flex";
            playButtonContainer.style.justifyContent = "center";
            playButtonContainer.style.alignItems = "center";
            playButtonContainer.appendChild(playButtonOuterElement);
            posterRootElement.appendChild(playButtonContainer);
        }
        return posterRootElement;
    };
    Media.prototype.renderMediaPlayer = function () {
        var mediaElement;
        if (this._selectedMediaType == "video") {
            var videoPlayer = document.createElement("video");
            var posterUrl = this.getPosterUrl();
            if (posterUrl) {
                videoPlayer.poster = posterUrl;
            }
            mediaElement = videoPlayer;
        }
        else {
            mediaElement = document.createElement("audio");
        }
        mediaElement.setAttribute("aria-label", this.altText ? this.altText : strings_1.Strings.defaults.mediaPlayerAriaLabel());
        mediaElement.setAttribute("webkit-playsinline", "");
        mediaElement.setAttribute("playsinline", "");
        mediaElement.autoplay = true;
        mediaElement.controls = true;
        if (Utils.isMobileOS()) {
            mediaElement.muted = true;
        }
        mediaElement.preload = "none";
        mediaElement.style.width = "100%";
        for (var _i = 0, _a = this.sources; _i < _a.length; _i++) {
            var source = _a[_i];
            var renderedSource = source.render();
            Utils.appendChild(mediaElement, renderedSource);
        }
        return mediaElement;
    };
    Media.prototype.internalRender = function () {
        var element = document.createElement("div");
        element.className = this.hostConfig.makeCssClassName("ac-media");
        this.processSources();
        element.appendChild(this.renderPoster());
        return element;
    };
    Media.prototype.getJsonTypeName = function () {
        return "Media";
    };
    Media.prototype.getResourceInformation = function () {
        var result = [];
        var posterUrl = this.getPosterUrl();
        if (posterUrl) {
            result.push({ url: posterUrl, mimeType: "image" });
        }
        for (var _i = 0, _a = this.sources; _i < _a.length; _i++) {
            var mediaSource = _a[_i];
            if (mediaSource.isValid()) {
                result.push({
                    url: mediaSource.url,
                    mimeType: mediaSource.mimeType
                });
            }
        }
        return result;
    };
    Object.defineProperty(Media.prototype, "selectedMediaType", {
        get: function () {
            return this._selectedMediaType;
        },
        enumerable: false,
        configurable: true
    });
    Media.sourcesProperty = new serialization_1.SerializableObjectCollectionProperty(serialization_1.Versions.v1_1, "sources", MediaSource);
    Media.posterProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_1, "poster");
    Media.altTextProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_1, "altText");
    //#endregion
    Media.supportedMediaTypes = ["audio", "video"];
    __decorate([
        (0, serialization_1.property)(Media.sourcesProperty)
    ], Media.prototype, "sources", void 0);
    __decorate([
        (0, serialization_1.property)(Media.posterProperty)
    ], Media.prototype, "poster", void 0);
    __decorate([
        (0, serialization_1.property)(Media.altTextProperty)
    ], Media.prototype, "altText", void 0);
    return Media;
}(CardElement));
exports.Media = Media;
var Input = /** @class */ (function (_super) {
    __extends(Input, _super);
    function Input() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Input.prototype.getAllLabelIds = function () {
        var labelIds = [];
        if (this.labelledBy) {
            labelIds.push(this.labelledBy);
        }
        if (this._renderedLabelElement) {
            labelIds.push(this._renderedLabelElement.id);
        }
        if (this._renderedErrorMessageElement) {
            labelIds.push(this._renderedErrorMessageElement.id);
        }
        return labelIds;
    };
    Input.prototype.updateInputControlAriaLabelledBy = function () {
        if (this._renderedInputControlElement) {
            var labelIds = this.getAllLabelIds();
            if (labelIds.length > 0) {
                this._renderedInputControlElement.setAttribute("aria-labelledby", labelIds.join(" "));
            }
            else {
                this._renderedInputControlElement.removeAttribute("aria-labelledby");
            }
        }
    };
    Object.defineProperty(Input.prototype, "isNullable", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "renderedInputControlElement", {
        get: function () {
            return this._renderedInputControlElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "inputControlContainerElement", {
        get: function () {
            return this._inputControlContainerElement;
        },
        enumerable: false,
        configurable: true
    });
    Input.prototype.overrideInternalRender = function () {
        var hostConfig = this.hostConfig;
        this._outerContainerElement = document.createElement("div");
        this._outerContainerElement.style.display = "flex";
        this._outerContainerElement.style.flexDirection = "column";
        var renderedInputControlId = Utils.generateUniqueId();
        if (this.label) {
            var labelRichTextBlock = new RichTextBlock();
            labelRichTextBlock.setParent(this);
            labelRichTextBlock.forElementId = renderedInputControlId;
            var labelInline = new TextRun(this.label);
            labelRichTextBlock.addInline(labelInline);
            if (this.isRequired) {
                labelInline.init(hostConfig.inputs.label.requiredInputs);
                var isRequiredCueInline = new TextRun(hostConfig.inputs.label.requiredInputs.suffix);
                isRequiredCueInline.color = hostConfig.inputs.label.requiredInputs.suffixColor;
                isRequiredCueInline.ariaHidden = true;
                labelRichTextBlock.addInline(isRequiredCueInline);
            }
            else {
                labelInline.init(hostConfig.inputs.label.optionalInputs);
            }
            this._renderedLabelElement = labelRichTextBlock.render();
            if (this._renderedLabelElement) {
                this._renderedLabelElement.id = Utils.generateUniqueId();
                this._renderedLabelElement.style.marginBottom = hostConfig.getEffectiveSpacing(hostConfig.inputs.label.inputSpacing) + "px";
                this._outerContainerElement.appendChild(this._renderedLabelElement);
            }
        }
        this._inputControlContainerElement = document.createElement("div");
        this._inputControlContainerElement.className = hostConfig.makeCssClassName("ac-input-container");
        this._inputControlContainerElement.style.display = "flex";
        if (this.height === "stretch") {
            this._inputControlContainerElement.style.alignItems = "stretch";
            this._inputControlContainerElement.style.flex = "1 1 auto";
        }
        this._renderedInputControlElement = this.internalRender();
        if (this._renderedInputControlElement) {
            this._renderedInputControlElement.id = renderedInputControlId;
            this._renderedInputControlElement.style.minWidth = "0px";
            if (this.isNullable && this.isRequired) {
                this._renderedInputControlElement.setAttribute("aria-required", "true");
                this._renderedInputControlElement.classList.add(hostConfig.makeCssClassName("ac-input-required"));
            }
            this._inputControlContainerElement.appendChild(this._renderedInputControlElement);
            this._outerContainerElement.appendChild(this._inputControlContainerElement);
            this.updateInputControlAriaLabelledBy();
            return this._outerContainerElement;
        }
        return undefined;
    };
    Input.prototype.valueChanged = function () {
        if (this.isValid()) {
            this.resetValidationFailureCue();
        }
        if (this.onValueChanged) {
            this.onValueChanged(this);
        }
        raiseInputValueChangedEvent(this);
    };
    Input.prototype.resetValidationFailureCue = function () {
        if (this.renderedInputControlElement) {
            this.renderedInputControlElement.classList.remove(this.hostConfig.makeCssClassName("ac-input-validation-failed"));
            this.updateInputControlAriaLabelledBy();
            if (this._renderedErrorMessageElement) {
                this._outerContainerElement.removeChild(this._renderedErrorMessageElement);
                this._renderedErrorMessageElement = undefined;
            }
        }
    };
    Input.prototype.showValidationErrorMessage = function () {
        if (this.renderedElement && this.errorMessage && shared_1.GlobalSettings.displayInputValidationErrors) {
            var errorMessageTextBlock = new TextBlock();
            errorMessageTextBlock.setParent(this);
            errorMessageTextBlock.text = this.errorMessage;
            errorMessageTextBlock.wrap = true;
            errorMessageTextBlock.init(this.hostConfig.inputs.errorMessage);
            this._renderedErrorMessageElement = errorMessageTextBlock.render();
            if (this._renderedErrorMessageElement) {
                this._renderedErrorMessageElement.id = Utils.generateUniqueId();
                this._outerContainerElement.appendChild(this._renderedErrorMessageElement);
                this.updateInputControlAriaLabelledBy();
            }
        }
    };
    Input.prototype.focus = function () {
        if (this._renderedInputControlElement) {
            this._renderedInputControlElement.focus();
        }
    };
    Input.prototype.isValid = function () {
        return true;
    };
    Input.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (!this.id) {
            context.addFailure(this, Enums.ValidationEvent.PropertyCantBeNull, strings_1.Strings.errors.inputsMustHaveUniqueId());
        }
        if (this.isRequired) {
            if (!this.label) {
                context.addFailure(this, Enums.ValidationEvent.RequiredInputsShouldHaveLabel, "Required inputs should have a label");
            }
            if (!this.errorMessage) {
                context.addFailure(this, Enums.ValidationEvent.RequiredInputsShouldHaveErrorMessage, "Required inputs should have an error message");
            }
        }
    };
    Input.prototype.validateValue = function () {
        this.resetValidationFailureCue();
        var result = this.isRequired ? this.isSet() && this.isValid() : this.isValid();
        if (!result && this.renderedInputControlElement) {
            this.renderedInputControlElement.classList.add(this.hostConfig.makeCssClassName("ac-input-validation-failed"));
            this.showValidationErrorMessage();
        }
        return result;
    };
    Input.prototype.getAllInputs = function (processActions) {
        if (processActions === void 0) { processActions = true; }
        return [this];
    };
    Object.defineProperty(Input.prototype, "isInteractive", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    //#region Schema
    Input.labelProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_3, "label", true);
    Input.isRequiredProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_3, "isRequired", false);
    Input.errorMessageProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_3, "errorMessage", true);
    __decorate([
        (0, serialization_1.property)(Input.labelProperty)
    ], Input.prototype, "label", void 0);
    __decorate([
        (0, serialization_1.property)(Input.isRequiredProperty)
    ], Input.prototype, "isRequired", void 0);
    __decorate([
        (0, serialization_1.property)(Input.errorMessageProperty)
    ], Input.prototype, "errorMessage", void 0);
    return Input;
}(CardElement));
exports.Input = Input;
var TextInput = /** @class */ (function (_super) {
    __extends(TextInput, _super);
    function TextInput() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isMultiline = false;
        _this.style = Enums.InputTextStyle.Text;
        return _this;
    }
    //#endregion
    TextInput.prototype.setupInput = function (input) {
        var _this = this;
        input.style.flex = "1 1 auto";
        input.tabIndex = 0;
        if (this.placeholder) {
            input.placeholder = this.placeholder;
            input.setAttribute("aria-label", this.placeholder);
        }
        if (this.defaultValue) {
            input.value = this.defaultValue;
        }
        if (this.maxLength && this.maxLength > 0) {
            input.maxLength = this.maxLength;
        }
        input.oninput = function () { _this.valueChanged(); };
        input.onkeypress = function (e) {
            // Ctrl+Enter pressed
            if (e.ctrlKey && e.code === "Enter" && _this.inlineAction && _this.inlineAction.isEnabled) {
                _this.inlineAction.execute();
            }
        };
    };
    TextInput.prototype.internalRender = function () {
        var result;
        if (this.isMultiline && this.style !== Enums.InputTextStyle.Password) {
            result = document.createElement("textarea");
            result.className = this.hostConfig.makeCssClassName("ac-input", "ac-textInput", "ac-multiline");
            if (this.height === "stretch") {
                result.style.height = "initial";
            }
        }
        else {
            result = document.createElement("input");
            result.className = this.hostConfig.makeCssClassName("ac-input", "ac-textInput");
            result.type = Enums.InputTextStyle[this.style].toLowerCase();
        }
        this.setupInput(result);
        return result;
    };
    TextInput.prototype.overrideInternalRender = function () {
        var _this = this;
        var renderedInputControl = _super.prototype.overrideInternalRender.call(this);
        if (this.inlineAction) {
            var button_1 = document.createElement("button");
            button_1.className = this.hostConfig.makeCssClassName(this.inlineAction.isEnabled ? "ac-inlineActionButton" : "ac-inlineActionButton-disabled");
            button_1.onclick = function (e) {
                if (_this.inlineAction && _this.inlineAction.isEnabled) {
                    e.preventDefault();
                    e.cancelBubble = true;
                    _this.inlineAction.execute();
                }
            };
            if (this.inlineAction.iconUrl) {
                button_1.classList.add("iconOnly");
                var icon_1 = document.createElement("img");
                icon_1.style.height = "100%";
                icon_1.setAttribute("role", "presentation");
                // The below trick is necessary as a workaround in Chrome where the icon is initially displayed
                // at its native size then resized to 100% of the button's height. This cfreates an unpleasant
                // flicker. On top of that, Chrome's flex implementation fails to prperly re-layout the button
                // after the image has loaded and been gicven its final size. The below trick also fixes that.
                icon_1.style.display = "none";
                icon_1.onload = function () {
                    icon_1.style.removeProperty("display");
                };
                icon_1.onerror = function () {
                    button_1.removeChild(icon_1);
                    button_1.classList.remove("iconOnly");
                    button_1.classList.add("textOnly");
                    button_1.textContent = _this.inlineAction && _this.inlineAction.title ? _this.inlineAction.title : strings_1.Strings.defaults.inlineActionTitle();
                };
                icon_1.src = this.inlineAction.iconUrl;
                button_1.appendChild(icon_1);
                button_1.title = this.inlineAction.title ? this.inlineAction.title : strings_1.Strings.defaults.inlineActionTitle();
            }
            else {
                button_1.classList.add("textOnly");
                button_1.textContent = this.inlineAction.title ? this.inlineAction.title : strings_1.Strings.defaults.inlineActionTitle();
            }
            this.inlineAction.setupElementForAccessibility(button_1, true);
            button_1.style.marginLeft = "8px";
            this.inputControlContainerElement.appendChild(button_1);
        }
        return renderedInputControl;
    };
    TextInput.prototype.getJsonTypeName = function () {
        return "Input.Text";
    };
    TextInput.prototype.getActionById = function (id) {
        var result = _super.prototype.getActionById.call(this, id);
        if (!result && this.inlineAction) {
            result = this.inlineAction.getActionById(id);
        }
        return result;
    };
    TextInput.prototype.isSet = function () {
        return this.value ? true : false;
    };
    TextInput.prototype.isValid = function () {
        if (!this.value) {
            return true;
        }
        if (this.regex) {
            return new RegExp(this.regex, "g").test(this.value);
        }
        return true;
    };
    Object.defineProperty(TextInput.prototype, "value", {
        get: function () {
            if (this.renderedInputControlElement) {
                if (this.isMultiline) {
                    return this.renderedInputControlElement.value;
                }
                else {
                    return this.renderedInputControlElement.value;
                }
            }
            else {
                return undefined;
            }
        },
        enumerable: false,
        configurable: true
    });
    TextInput.valueProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "value");
    TextInput.maxLengthProperty = new serialization_1.NumProperty(serialization_1.Versions.v1_0, "maxLength");
    TextInput.isMultilineProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_0, "isMultiline", false);
    TextInput.placeholderProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "placeholder");
    TextInput.styleProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_0, "style", Enums.InputTextStyle, Enums.InputTextStyle.Text, [
        { value: Enums.InputTextStyle.Text },
        { value: Enums.InputTextStyle.Tel },
        { value: Enums.InputTextStyle.Url },
        { value: Enums.InputTextStyle.Email },
        { value: Enums.InputTextStyle.Password, targetVersion: serialization_1.Versions.v1_5 }
    ]);
    TextInput.inlineActionProperty = new ActionProperty(serialization_1.Versions.v1_0, "inlineAction", ["Action.ShowCard"]);
    TextInput.regexProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_3, "regex", true);
    __decorate([
        (0, serialization_1.property)(TextInput.valueProperty)
    ], TextInput.prototype, "defaultValue", void 0);
    __decorate([
        (0, serialization_1.property)(TextInput.maxLengthProperty)
    ], TextInput.prototype, "maxLength", void 0);
    __decorate([
        (0, serialization_1.property)(TextInput.isMultilineProperty)
    ], TextInput.prototype, "isMultiline", void 0);
    __decorate([
        (0, serialization_1.property)(TextInput.placeholderProperty)
    ], TextInput.prototype, "placeholder", void 0);
    __decorate([
        (0, serialization_1.property)(TextInput.styleProperty)
    ], TextInput.prototype, "style", void 0);
    __decorate([
        (0, serialization_1.property)(TextInput.inlineActionProperty)
    ], TextInput.prototype, "inlineAction", void 0);
    __decorate([
        (0, serialization_1.property)(TextInput.regexProperty)
    ], TextInput.prototype, "regex", void 0);
    return TextInput;
}(Input));
exports.TextInput = TextInput;
var ToggleInput = /** @class */ (function (_super) {
    __extends(ToggleInput, _super);
    function ToggleInput() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.valueOn = "true";
        _this.valueOff = "false";
        _this.wrap = false;
        return _this;
    }
    ToggleInput.prototype.updateInputControlAriaLabelledBy = function () {
        if (this._checkboxInputElement) {
            var joinedLabelIds = this.getAllLabelIds().join(" ");
            if (this._checkboxInputLabelElement && this._checkboxInputLabelElement.id) {
                joinedLabelIds += " " + this._checkboxInputLabelElement.id;
            }
            if (joinedLabelIds) {
                this._checkboxInputElement.setAttribute("aria-labelledby", joinedLabelIds);
            }
            else {
                this._checkboxInputElement.removeAttribute("aria-labelledby");
            }
        }
    };
    ToggleInput.prototype.internalRender = function () {
        var _this = this;
        var element = document.createElement("div");
        element.className = this.hostConfig.makeCssClassName("ac-input", "ac-toggleInput");
        element.style.width = "100%";
        element.style.display = "flex";
        element.style.alignItems = "center";
        this._checkboxInputElement = document.createElement("input");
        this._checkboxInputElement.id = Utils.generateUniqueId();
        this._checkboxInputElement.type = "checkbox";
        this._checkboxInputElement.style.display = "inline-block";
        this._checkboxInputElement.style.verticalAlign = "middle";
        this._checkboxInputElement.style.margin = "0";
        this._checkboxInputElement.style.flex = "0 0 auto";
        if (this.title) {
            this._checkboxInputElement.setAttribute("aria-label", this.title);
        }
        if (this.isRequired) {
            this._checkboxInputElement.setAttribute("aria-required", "true");
        }
        this._checkboxInputElement.tabIndex = 0;
        if (this.defaultValue == this.valueOn) {
            this._checkboxInputElement.checked = true;
        }
        this._checkboxInputElement.onchange = function () { _this.valueChanged(); };
        Utils.appendChild(element, this._checkboxInputElement);
        if (this.title || this.isDesignMode()) {
            var label = new TextBlock();
            label.setParent(this);
            label.forElementId = this._checkboxInputElement.id;
            label.hostConfig = this.hostConfig;
            label.text = !this.title ? this.getJsonTypeName() : this.title;
            label.useMarkdown = shared_1.GlobalSettings.useMarkdownInRadioButtonAndCheckbox;
            label.wrap = this.wrap;
            this._checkboxInputLabelElement = label.render();
            if (this._checkboxInputLabelElement) {
                this._checkboxInputLabelElement.id = Utils.generateUniqueId();
                this._checkboxInputLabelElement.style.display = "inline-block";
                this._checkboxInputLabelElement.style.flex = "1 1 auto";
                this._checkboxInputLabelElement.style.marginLeft = "6px";
                this._checkboxInputLabelElement.style.verticalAlign = "middle";
                var spacerElement = document.createElement("div");
                spacerElement.style.width = "6px";
                Utils.appendChild(element, spacerElement);
                Utils.appendChild(element, this._checkboxInputLabelElement);
            }
        }
        return element;
    };
    Object.defineProperty(ToggleInput.prototype, "isNullable", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    ToggleInput.prototype.getJsonTypeName = function () {
        return "Input.Toggle";
    };
    ToggleInput.prototype.focus = function () {
        if (this._checkboxInputElement) {
            this._checkboxInputElement.focus();
        }
    };
    ToggleInput.prototype.isSet = function () {
        if (this.isRequired) {
            return this.value === this.valueOn;
        }
        return this.value ? true : false;
    };
    Object.defineProperty(ToggleInput.prototype, "value", {
        get: function () {
            if (this._checkboxInputElement) {
                return this._checkboxInputElement.checked ? this.valueOn : this.valueOff;
            }
            else {
                return undefined;
            }
        },
        enumerable: false,
        configurable: true
    });
    ToggleInput.valueProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "value");
    ToggleInput.titleProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "title");
    ToggleInput.valueOnProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "valueOn", true, undefined, "true", function (sender) { return "true"; });
    ToggleInput.valueOffProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "valueOff", true, undefined, "false", function (sender) { return "false"; });
    ToggleInput.wrapProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_2, "wrap", false);
    __decorate([
        (0, serialization_1.property)(ToggleInput.valueProperty)
    ], ToggleInput.prototype, "defaultValue", void 0);
    __decorate([
        (0, serialization_1.property)(ToggleInput.titleProperty)
    ], ToggleInput.prototype, "title", void 0);
    __decorate([
        (0, serialization_1.property)(ToggleInput.valueOnProperty)
    ], ToggleInput.prototype, "valueOn", void 0);
    __decorate([
        (0, serialization_1.property)(ToggleInput.valueOffProperty)
    ], ToggleInput.prototype, "valueOff", void 0);
    __decorate([
        (0, serialization_1.property)(ToggleInput.wrapProperty)
    ], ToggleInput.prototype, "wrap", void 0);
    return ToggleInput;
}(Input));
exports.ToggleInput = ToggleInput;
var Choice = /** @class */ (function (_super) {
    __extends(Choice, _super);
    function Choice(title, value) {
        var _this = _super.call(this) || this;
        _this.title = title;
        _this.value = value;
        return _this;
    }
    //#endregion
    Choice.prototype.getSchemaKey = function () {
        return "Choice";
    };
    //#region Schema
    Choice.titleProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "title");
    Choice.valueProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "value");
    __decorate([
        (0, serialization_1.property)(Choice.titleProperty)
    ], Choice.prototype, "title", void 0);
    __decorate([
        (0, serialization_1.property)(Choice.valueProperty)
    ], Choice.prototype, "value", void 0);
    return Choice;
}(serialization_1.SerializableObject));
exports.Choice = Choice;
var ChoiceSetInput = /** @class */ (function (_super) {
    __extends(ChoiceSetInput, _super);
    function ChoiceSetInput() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isMultiSelect = false;
        _this.wrap = false;
        _this.choices = [];
        return _this;
    }
    Object.defineProperty(ChoiceSetInput.prototype, "isCompact", {
        get: function () {
            return !this.style || this.style === "compact";
        },
        set: function (value) {
            this.style = value ? undefined : "expanded";
        },
        enumerable: false,
        configurable: true
    });
    ChoiceSetInput.getUniqueCategoryName = function () {
        var uniqueCategoryName = "__ac-category" + ChoiceSetInput.uniqueCategoryCounter;
        ChoiceSetInput.uniqueCategoryCounter++;
        return uniqueCategoryName;
    };
    // Make sure `aria-current` is applied to the currently-selected item
    ChoiceSetInput.prototype.internalApplyAriaCurrent = function () {
        if (this._selectElement) {
            var options = this._selectElement.options;
            if (options) {
                for (var i = 0; i < options.length; i++) {
                    if (options[i].selected) {
                        options[i].setAttribute("aria-current", "true");
                    }
                    else {
                        options[i].removeAttribute("aria-current");
                    }
                }
            }
        }
    };
    ChoiceSetInput.prototype.renderCompoundInput = function (cssClassName, type, defaultValues) {
        var _this = this;
        var element = document.createElement("div");
        element.className = this.hostConfig.makeCssClassName("ac-input", cssClassName);
        element.style.width = "100%";
        this._toggleInputs = [];
        this._labels = [];
        for (var _i = 0, _a = this.choices; _i < _a.length; _i++) {
            var choice = _a[_i];
            var input = document.createElement("input");
            input.id = Utils.generateUniqueId();
            input.type = type;
            input.style.margin = "0";
            input.style.display = "inline-block";
            input.style.verticalAlign = "middle";
            input.style.flex = "0 0 auto";
            input.name = this.id ? this.id : this._uniqueCategoryName;
            if (this.isRequired) {
                input.setAttribute("aria-required", "true");
            }
            if (choice.value) {
                input.value = choice.value;
            }
            if (choice.title) {
                input.setAttribute("aria-label", choice.title);
            }
            if (defaultValues && choice.value) {
                if (defaultValues.indexOf(choice.value) >= 0) {
                    input.checked = true;
                }
            }
            input.onchange = function () { _this.valueChanged(); };
            this._toggleInputs.push(input);
            var compoundInput = document.createElement("div");
            compoundInput.style.display = "flex";
            compoundInput.style.alignItems = "center";
            Utils.appendChild(compoundInput, input);
            var label = new TextBlock();
            label.setParent(this);
            label.forElementId = input.id;
            label.hostConfig = this.hostConfig;
            label.text = choice.title ? choice.title : "Choice " + this._toggleInputs.length;
            label.useMarkdown = shared_1.GlobalSettings.useMarkdownInRadioButtonAndCheckbox;
            label.wrap = this.wrap;
            var labelElement = label.render();
            this._labels.push(labelElement);
            if (labelElement) {
                labelElement.id = Utils.generateUniqueId();
                labelElement.style.display = "inline-block";
                labelElement.style.flex = "1 1 auto";
                labelElement.style.marginLeft = "6px";
                labelElement.style.verticalAlign = "middle";
                var spacerElement = document.createElement("div");
                spacerElement.style.width = "6px";
                Utils.appendChild(compoundInput, spacerElement);
                Utils.appendChild(compoundInput, labelElement);
            }
            Utils.appendChild(element, compoundInput);
        }
        return element;
    };
    ChoiceSetInput.prototype.updateInputControlAriaLabelledBy = function () {
        if ((this.isMultiSelect || this.style === "expanded") && this._toggleInputs && this._labels) {
            var labelIds = this.getAllLabelIds();
            for (var i = 0; i < this._toggleInputs.length; i++) {
                var joinedLabelIds = labelIds.join(" ");
                var label = this._labels[i];
                if (label && label.id) {
                    joinedLabelIds += " " + label.id;
                }
                if (joinedLabelIds) {
                    this._toggleInputs[i].setAttribute("aria-labelledby", joinedLabelIds);
                }
                else {
                    this._toggleInputs[i].removeAttribute("aria-labelledby");
                }
            }
        }
        else {
            _super.prototype.updateInputControlAriaLabelledBy.call(this);
        }
    };
    ChoiceSetInput.prototype.internalRender = function () {
        var _this = this;
        this._uniqueCategoryName = ChoiceSetInput.getUniqueCategoryName();
        if (this.isMultiSelect) {
            // Render as a list of toggle inputs
            return this.renderCompoundInput("ac-choiceSetInput-multiSelect", "checkbox", this.defaultValue ? this.defaultValue.split(this.hostConfig.choiceSetInputValueSeparator) : undefined);
        }
        else {
            if (this.style === "expanded") {
                // Render as a series of radio buttons
                return this.renderCompoundInput("ac-choiceSetInput-expanded", "radio", this.defaultValue ? [this.defaultValue] : undefined);
            }
            else if (this.style === "filtered") {
                // Render as a text input coupled with a datalist
                var inputContainer = document.createElement("div");
                inputContainer.style.width = "100%";
                this._textInput = document.createElement("input");
                this._textInput.className = this.hostConfig.makeCssClassName("ac-input", "ac-multichoiceInput", "ac-choiceSetInput-filtered");
                this._textInput.type = "text";
                this._textInput.style.width = "100%";
                this._textInput.oninput = function () {
                    _this.valueChanged();
                    if (_this._textInput) {
                        // Remove aria-label when value is not empty so narration software doesn't
                        // read the placeholder
                        if (_this.value) {
                            _this._textInput.removeAttribute("placeholder");
                            _this._textInput.removeAttribute("aria-label");
                        }
                        else if (_this.placeholder) {
                            _this._textInput.placeholder = _this.placeholder;
                            _this._textInput.setAttribute("aria-label", _this.placeholder);
                        }
                    }
                };
                if (this.defaultValue) {
                    this._textInput.value = this.defaultValue;
                }
                if (this.placeholder && !this._textInput.value) {
                    this._textInput.placeholder = this.placeholder;
                    this._textInput.setAttribute("aria-label", this.placeholder);
                }
                var dataList = document.createElement("datalist");
                dataList.id = Utils.generateUniqueId();
                for (var _i = 0, _a = this.choices; _i < _a.length; _i++) {
                    var choice = _a[_i];
                    var option = document.createElement("option");
                    // To fix https://stackoverflow.com/questions/29882361/show-datalist-labels-but-submit-the-actual-value
                    // value is mapped to choice.title other than choice.value
                    option.value = choice.title;
                    option.setAttribute("aria-label", choice.title);
                    dataList.appendChild(option);
                }
                this._textInput.setAttribute("list", dataList.id);
                inputContainer.append(this._textInput, dataList);
                return inputContainer;
            }
            else {
                // Render as a combo box
                this._selectElement = document.createElement("select");
                this._selectElement.className = this.hostConfig.makeCssClassName("ac-input", "ac-multichoiceInput", "ac-choiceSetInput-compact");
                this._selectElement.style.width = "100%";
                var option = document.createElement("option");
                option.selected = true;
                option.disabled = true;
                option.hidden = true;
                option.value = "";
                if (this.placeholder) {
                    option.text = this.placeholder;
                }
                Utils.appendChild(this._selectElement, option);
                for (var _b = 0, _c = this.choices; _b < _c.length; _b++) {
                    var choice = _c[_b];
                    var option_1 = document.createElement("option");
                    option_1.value = choice.value;
                    option_1.text = choice.title;
                    option_1.setAttribute("aria-label", choice.title);
                    if (choice.value == this.defaultValue) {
                        option_1.selected = true;
                    }
                    Utils.appendChild(this._selectElement, option_1);
                }
                this._selectElement.onchange = function () {
                    _this.internalApplyAriaCurrent();
                    _this.valueChanged();
                };
                this.internalApplyAriaCurrent();
                return this._selectElement;
            }
        }
    };
    ChoiceSetInput.prototype.getJsonTypeName = function () {
        return "Input.ChoiceSet";
    };
    ChoiceSetInput.prototype.focus = function () {
        if (this._toggleInputs && (this.isMultiSelect || this.style === "expanded")) {
            if (this._toggleInputs.length > 0) {
                this._toggleInputs[0].focus();
            }
        }
        else if (this._textInput) {
            this._textInput.focus();
        }
        else {
            _super.prototype.focus.call(this);
        }
    };
    ChoiceSetInput.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (this.choices.length == 0) {
            context.addFailure(this, Enums.ValidationEvent.CollectionCantBeEmpty, strings_1.Strings.errors.choiceSetMustHaveAtLeastOneChoice());
        }
        for (var _i = 0, _a = this.choices; _i < _a.length; _i++) {
            var choice = _a[_i];
            if (!choice.title || !choice.value) {
                context.addFailure(this, Enums.ValidationEvent.PropertyCantBeNull, strings_1.Strings.errors.choiceSetChoicesMustHaveTitleAndValue());
            }
        }
    };
    ChoiceSetInput.prototype.isSet = function () {
        return this.value ? true : false;
    };
    ChoiceSetInput.prototype.isValid = function () {
        if (this._textInput) {
            if (this.value === "" || this.value === this.placeholder) {
                return true;
            }
            for (var _i = 0, _a = this.choices; _i < _a.length; _i++) {
                var choice = _a[_i];
                if (this.value === choice.value) {
                    return true;
                }
            }
            return false;
        }
        return _super.prototype.isValid.call(this);
    };
    Object.defineProperty(ChoiceSetInput.prototype, "value", {
        get: function () {
            if (!this.isMultiSelect) {
                if (this._selectElement) {
                    return this._selectElement.selectedIndex > 0 ? this._selectElement.value : undefined;
                }
                else if (this._textInput) {
                    for (var _i = 0, _a = this.choices; _i < _a.length; _i++) {
                        var choice = _a[_i];
                        if (choice.title && this._textInput.value === choice.title) {
                            return choice.value;
                        }
                    }
                    return this._textInput.value;
                }
                else if (this._toggleInputs && this._toggleInputs.length > 0) {
                    for (var _b = 0, _c = this._toggleInputs; _b < _c.length; _b++) {
                        var toggleInput = _c[_b];
                        if (toggleInput.checked) {
                            return toggleInput.value;
                        }
                    }
                }
                return undefined;
            }
            else {
                if (!this._toggleInputs || this._toggleInputs.length == 0) {
                    return undefined;
                }
                var result = "";
                for (var _d = 0, _e = this._toggleInputs; _d < _e.length; _d++) {
                    var toggleInput = _e[_d];
                    if (toggleInput.checked) {
                        if (result != "") {
                            result += this.hostConfig.choiceSetInputValueSeparator;
                        }
                        result += toggleInput.value;
                    }
                }
                return result ? result : undefined;
            }
        },
        enumerable: false,
        configurable: true
    });
    ChoiceSetInput.valueProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "value");
    ChoiceSetInput.choicesProperty = new serialization_1.SerializableObjectCollectionProperty(serialization_1.Versions.v1_0, "choices", Choice);
    ChoiceSetInput.styleProperty = new serialization_1.ValueSetProperty(serialization_1.Versions.v1_0, "style", [
        { value: "compact" },
        { value: "expanded" },
        { value: "filtered", targetVersion: serialization_1.Versions.v1_5 }
    ], "compact");
    ChoiceSetInput.isMultiSelectProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_0, "isMultiSelect", false);
    ChoiceSetInput.placeholderProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "placeholder");
    ChoiceSetInput.wrapProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_2, "wrap", false);
    //#endregion
    ChoiceSetInput.uniqueCategoryCounter = 0;
    __decorate([
        (0, serialization_1.property)(ChoiceSetInput.valueProperty)
    ], ChoiceSetInput.prototype, "defaultValue", void 0);
    __decorate([
        (0, serialization_1.property)(ChoiceSetInput.styleProperty)
    ], ChoiceSetInput.prototype, "style", void 0);
    __decorate([
        (0, serialization_1.property)(ChoiceSetInput.isMultiSelectProperty)
    ], ChoiceSetInput.prototype, "isMultiSelect", void 0);
    __decorate([
        (0, serialization_1.property)(ChoiceSetInput.placeholderProperty)
    ], ChoiceSetInput.prototype, "placeholder", void 0);
    __decorate([
        (0, serialization_1.property)(ChoiceSetInput.wrapProperty)
    ], ChoiceSetInput.prototype, "wrap", void 0);
    __decorate([
        (0, serialization_1.property)(ChoiceSetInput.choicesProperty)
    ], ChoiceSetInput.prototype, "choices", void 0);
    return ChoiceSetInput;
}(Input));
exports.ChoiceSetInput = ChoiceSetInput;
var NumberInput = /** @class */ (function (_super) {
    __extends(NumberInput, _super);
    function NumberInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberInput.prototype.internalRender = function () {
        var _this = this;
        this._numberInputElement = document.createElement("input");
        this._numberInputElement.setAttribute("type", "number");
        if (this.min !== undefined) {
            this._numberInputElement.setAttribute("min", this.min.toString());
        }
        if (this.max !== undefined) {
            this._numberInputElement.setAttribute("max", this.max.toString());
        }
        this._numberInputElement.className = this.hostConfig.makeCssClassName("ac-input", "ac-numberInput");
        this._numberInputElement.style.width = "100%";
        this._numberInputElement.tabIndex = 0;
        if (this.defaultValue !== undefined) {
            this._numberInputElement.valueAsNumber = this.defaultValue;
        }
        if (this.placeholder) {
            this._numberInputElement.placeholder = this.placeholder;
            this._numberInputElement.setAttribute("aria-label", this.placeholder);
        }
        this._numberInputElement.oninput = function () { _this.valueChanged(); };
        return this._numberInputElement;
    };
    NumberInput.prototype.getJsonTypeName = function () {
        return "Input.Number";
    };
    NumberInput.prototype.isSet = function () {
        return this.value !== undefined && !isNaN(this.value);
    };
    NumberInput.prototype.isValid = function () {
        if (this.value === undefined) {
            return !this.isRequired;
        }
        var result = true;
        if (this.min !== undefined) {
            result = result && (this.value >= this.min);
        }
        if (this.max !== undefined) {
            result = result && (this.value <= this.max);
        }
        return result;
    };
    Object.defineProperty(NumberInput.prototype, "value", {
        get: function () {
            return this._numberInputElement ? this._numberInputElement.valueAsNumber : undefined;
        },
        enumerable: false,
        configurable: true
    });
    //#region Schema
    NumberInput.valueProperty = new serialization_1.NumProperty(serialization_1.Versions.v1_0, "value");
    NumberInput.placeholderProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "placeholder");
    NumberInput.minProperty = new serialization_1.NumProperty(serialization_1.Versions.v1_0, "min");
    NumberInput.maxProperty = new serialization_1.NumProperty(serialization_1.Versions.v1_0, "max");
    __decorate([
        (0, serialization_1.property)(NumberInput.valueProperty)
    ], NumberInput.prototype, "defaultValue", void 0);
    __decorate([
        (0, serialization_1.property)(NumberInput.minProperty)
    ], NumberInput.prototype, "min", void 0);
    __decorate([
        (0, serialization_1.property)(NumberInput.maxProperty)
    ], NumberInput.prototype, "max", void 0);
    __decorate([
        (0, serialization_1.property)(NumberInput.placeholderProperty)
    ], NumberInput.prototype, "placeholder", void 0);
    return NumberInput;
}(Input));
exports.NumberInput = NumberInput;
var DateInput = /** @class */ (function (_super) {
    __extends(DateInput, _super);
    function DateInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DateInput.prototype.internalRender = function () {
        var _this = this;
        this._dateInputElement = document.createElement("input");
        this._dateInputElement.setAttribute("type", "date");
        if (this.min) {
            this._dateInputElement.setAttribute("min", this.min);
        }
        if (this.max) {
            this._dateInputElement.setAttribute("max", this.max);
        }
        if (this.placeholder) {
            this._dateInputElement.placeholder = this.placeholder;
            this._dateInputElement.setAttribute("aria-label", this.placeholder);
        }
        this._dateInputElement.className = this.hostConfig.makeCssClassName("ac-input", "ac-dateInput");
        this._dateInputElement.style.width = "100%";
        this._dateInputElement.oninput = function () { _this.valueChanged(); };
        if (this.defaultValue) {
            this._dateInputElement.value = this.defaultValue;
        }
        return this._dateInputElement;
    };
    DateInput.prototype.getJsonTypeName = function () {
        return "Input.Date";
    };
    DateInput.prototype.isSet = function () {
        return this.value ? true : false;
    };
    DateInput.prototype.isValid = function () {
        if (!this.value) {
            return !this.isRequired;
        }
        var valueAsDate = new Date(this.value);
        var result = true;
        if (this.min) {
            var minDate = new Date(this.min);
            result = result && (valueAsDate >= minDate);
        }
        if (this.max) {
            var maxDate = new Date(this.max);
            result = result && (valueAsDate <= maxDate);
        }
        return result;
    };
    Object.defineProperty(DateInput.prototype, "value", {
        get: function () {
            return this._dateInputElement ? this._dateInputElement.value : undefined;
        },
        enumerable: false,
        configurable: true
    });
    //#region Schema
    DateInput.valueProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "value");
    DateInput.placeholderProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "placeholder");
    DateInput.minProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "min");
    DateInput.maxProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "max");
    __decorate([
        (0, serialization_1.property)(DateInput.valueProperty)
    ], DateInput.prototype, "defaultValue", void 0);
    __decorate([
        (0, serialization_1.property)(DateInput.minProperty)
    ], DateInput.prototype, "min", void 0);
    __decorate([
        (0, serialization_1.property)(DateInput.maxProperty)
    ], DateInput.prototype, "max", void 0);
    __decorate([
        (0, serialization_1.property)(DateInput.placeholderProperty)
    ], DateInput.prototype, "placeholder", void 0);
    return DateInput;
}(Input));
exports.DateInput = DateInput;
var TimeProperty = /** @class */ (function (_super) {
    __extends(TimeProperty, _super);
    function TimeProperty(targetVersion, name) {
        var _this = _super.call(this, targetVersion, name, function (sender, property, source, context) {
            var value = source[property.name];
            if (typeof value === "string" && value && /^[0-9]{2}:[0-9]{2}$/.test(value)) {
                return value;
            }
            return undefined;
        }, function (sender, property, target, value, context) {
            context.serializeValue(target, property.name, value);
        }) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        return _this;
    }
    return TimeProperty;
}(serialization_1.CustomProperty));
exports.TimeProperty = TimeProperty;
var TimeInput = /** @class */ (function (_super) {
    __extends(TimeInput, _super);
    function TimeInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TimeInput.convertTimeStringToDate = function (timeString) {
        return new Date("1973-09-04T" + timeString + ":00Z");
    };
    TimeInput.prototype.internalRender = function () {
        var _this = this;
        this._timeInputElement = document.createElement("input");
        this._timeInputElement.setAttribute("type", "time");
        this._timeInputElement.setAttribute("min", this.min);
        this._timeInputElement.setAttribute("max", this.max);
        this._timeInputElement.className = this.hostConfig.makeCssClassName("ac-input", "ac-timeInput");
        this._timeInputElement.style.width = "100%";
        this._timeInputElement.oninput = function () { _this.valueChanged(); };
        if (this.placeholder) {
            this._timeInputElement.placeholder = this.placeholder;
            this._timeInputElement.setAttribute("aria-label", this.placeholder);
        }
        if (this.defaultValue) {
            this._timeInputElement.value = this.defaultValue;
        }
        return this._timeInputElement;
    };
    TimeInput.prototype.getJsonTypeName = function () {
        return "Input.Time";
    };
    TimeInput.prototype.isSet = function () {
        return this.value ? true : false;
    };
    TimeInput.prototype.isValid = function () {
        if (!this.value) {
            return !this.isRequired;
        }
        var valueAsDate = TimeInput.convertTimeStringToDate(this.value);
        var result = true;
        if (this.min) {
            var minDate = TimeInput.convertTimeStringToDate(this.min);
            result = result && (valueAsDate >= minDate);
        }
        if (this.max) {
            var maxDate = TimeInput.convertTimeStringToDate(this.max);
            result = result && (valueAsDate <= maxDate);
        }
        return result;
    };
    Object.defineProperty(TimeInput.prototype, "value", {
        get: function () {
            return this._timeInputElement ? this._timeInputElement.value : undefined;
        },
        enumerable: false,
        configurable: true
    });
    //#region Schema
    TimeInput.valueProperty = new TimeProperty(serialization_1.Versions.v1_0, "value");
    TimeInput.placeholderProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "placeholder");
    TimeInput.minProperty = new TimeProperty(serialization_1.Versions.v1_0, "min");
    TimeInput.maxProperty = new TimeProperty(serialization_1.Versions.v1_0, "max");
    __decorate([
        (0, serialization_1.property)(TimeInput.valueProperty)
    ], TimeInput.prototype, "defaultValue", void 0);
    __decorate([
        (0, serialization_1.property)(TimeInput.minProperty)
    ], TimeInput.prototype, "min", void 0);
    __decorate([
        (0, serialization_1.property)(TimeInput.maxProperty)
    ], TimeInput.prototype, "max", void 0);
    __decorate([
        (0, serialization_1.property)(TimeInput.placeholderProperty)
    ], TimeInput.prototype, "placeholder", void 0);
    return TimeInput;
}(Input));
exports.TimeInput = TimeInput;
var Action = /** @class */ (function (_super) {
    __extends(Action, _super);
    function Action() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.style = Enums.ActionStyle.Default;
        _this.mode = Enums.ActionMode.Primary;
        _this._state = 0 /* Normal */;
        _this._isFocusable = true;
        return _this;
    }
    //#endregion
    Action.prototype.renderButtonContent = function () {
        if (this.renderedElement) {
            // Cache hostConfig for perf
            var hostConfig = this.hostConfig;
            var titleElement = document.createElement("div");
            titleElement.style.overflow = "hidden";
            titleElement.style.textOverflow = "ellipsis";
            if (!(hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle || hostConfig.actions.allowTitleToWrap)) {
                titleElement.style.whiteSpace = "nowrap";
            }
            if (this.title) {
                titleElement.innerText = this.title;
            }
            if (!this.iconUrl) {
                this.renderedElement.classList.add("noIcon");
                this.renderedElement.appendChild(titleElement);
            }
            else {
                var iconElement = document.createElement("img");
                iconElement.src = this.iconUrl;
                iconElement.style.width = hostConfig.actions.iconSize + "px";
                iconElement.style.height = hostConfig.actions.iconSize + "px";
                iconElement.style.flex = "0 0 auto";
                if (hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle) {
                    this.renderedElement.classList.add("iconAbove");
                    this.renderedElement.style.flexDirection = "column";
                    if (this.title) {
                        iconElement.style.marginBottom = "6px";
                    }
                }
                else {
                    this.renderedElement.classList.add("iconLeft");
                    iconElement.style.maxHeight = "100%";
                    if (this.title) {
                        iconElement.style.marginRight = "6px";
                    }
                }
                this.renderedElement.appendChild(iconElement);
                this.renderedElement.appendChild(titleElement);
            }
        }
    };
    Action.prototype.getParentContainer = function () {
        if (this.parent instanceof Container) {
            return this.parent;
        }
        return this.parent ? this.parent.getParentContainer() : undefined;
    };
    Action.prototype.updateCssClasses = function () {
        var _a, _b;
        if (this.parent && this.renderedElement) {
            var hostConfig = this.parent.hostConfig;
            this.renderedElement.className = hostConfig.makeCssClassName(this.isEnabled ? "ac-pushButton" : "ac-pushButton-disabled");
            var parentContainer = this.getParentContainer();
            if (parentContainer) {
                var parentContainerStyle = parentContainer.getEffectiveStyle();
                if (parentContainerStyle) {
                    this.renderedElement.classList.add("style-" + parentContainerStyle);
                }
            }
            this.renderedElement.tabIndex = this.isFocusable ? 0 : -1;
            switch (this._state) {
                case 1 /* Expanded */:
                    this.renderedElement.classList.add(hostConfig.makeCssClassName("expanded"));
                    break;
                case 2 /* Subdued */:
                    this.renderedElement.classList.add(hostConfig.makeCssClassName("subdued"));
                    break;
            }
            if (this.style && this.isEnabled) {
                if (this.style === Enums.ActionStyle.Positive) {
                    (_a = this.renderedElement.classList).add.apply(_a, hostConfig.makeCssClassNames("primary", "style-positive"));
                }
                else {
                    (_b = this.renderedElement.classList).add.apply(_b, hostConfig.makeCssClassNames("style-" + this.style.toLowerCase()));
                }
            }
        }
    };
    Action.prototype.getDefaultSerializationContext = function () {
        return new SerializationContext();
    };
    Action.prototype.internalGetReferencedInputs = function () {
        return {};
    };
    Action.prototype.internalPrepareForExecution = function (inputs) {
        // Do nothing in base implementation
    };
    Action.prototype.internalValidateInputs = function (referencedInputs) {
        var result = [];
        if (referencedInputs) {
            for (var _i = 0, _a = Object.keys(referencedInputs); _i < _a.length; _i++) {
                var key = _a[_i];
                var input = referencedInputs[key];
                if (!input.validateValue()) {
                    result.push(input);
                }
            }
        }
        return result;
    };
    Action.prototype.shouldSerialize = function (context) {
        return context.actionRegistry.findByName(this.getJsonTypeName()) !== undefined;
    };
    Action.prototype.raiseExecuteActionEvent = function () {
        if (this.onExecute) {
            this.onExecute(this);
        }
        raiseExecuteActionEvent(this);
    };
    Action.prototype.getHref = function () {
        return "";
    };
    Action.prototype.getAriaRole = function () {
        return "button";
    };
    Action.prototype.setupElementForAccessibility = function (element, promoteTooltipToLabel) {
        if (promoteTooltipToLabel === void 0) { promoteTooltipToLabel = false; }
        element.tabIndex = this.isEnabled ? 0 : -1;
        element.setAttribute("role", this.getAriaRole());
        if (element instanceof HTMLButtonElement) {
            element.disabled = !this.isEnabled;
        }
        if (!this.isEnabled) {
            element.setAttribute("aria-disabled", "true");
        }
        else {
            element.classList.add(this.hostConfig.makeCssClassName("ac-selectable"));
        }
        if (this.title) {
            element.setAttribute("aria-label", this.title);
            element.title = this.title;
        }
        if (this.tooltip) {
            var targetAriaAttribute = promoteTooltipToLabel ? (this.title ? "aria-description" : "aria-label") : "aria-description";
            element.setAttribute(targetAriaAttribute, this.tooltip);
            element.title = this.tooltip;
        }
    };
    Action.prototype.parse = function (source, context) {
        return _super.prototype.parse.call(this, source, context ? context : new SerializationContext());
    };
    Action.prototype.render = function () {
        var _this = this;
        var buttonElement = document.createElement("button");
        buttonElement.type = "button";
        buttonElement.style.display = "flex";
        buttonElement.style.alignItems = "center";
        buttonElement.style.justifyContent = "center";
        buttonElement.onclick = function (e) {
            if (_this.isEnabled) {
                e.preventDefault();
                e.cancelBubble = true;
                _this.execute();
            }
        };
        this._renderedElement = buttonElement;
        this.renderButtonContent();
        this.updateCssClasses();
        this.setupElementForAccessibility(buttonElement);
    };
    Action.prototype.execute = function () {
        if (this._actionCollection) {
            this._actionCollection.actionExecuted(this);
        }
        this.raiseExecuteActionEvent();
    };
    Action.prototype.prepareForExecution = function () {
        var referencedInputs = this.getReferencedInputs();
        var invalidInputs = this.internalValidateInputs(referencedInputs);
        if (invalidInputs.length > 0) {
            invalidInputs[0].focus();
            return false;
        }
        this.internalPrepareForExecution(referencedInputs);
        return true;
    };
    ;
    Action.prototype.remove = function () {
        if (this._actionCollection) {
            return this._actionCollection.removeAction(this);
        }
        return false;
    };
    Action.prototype.getAllInputs = function (processActions) {
        if (processActions === void 0) { processActions = true; }
        return [];
    };
    Action.prototype.getResourceInformation = function () {
        return this.iconUrl ? [{ url: this.iconUrl, mimeType: "image" }] : [];
    };
    Action.prototype.getActionById = function (id) {
        return this.id === id ? this : undefined;
    };
    Action.prototype.getReferencedInputs = function () {
        return this.internalGetReferencedInputs();
    };
    /**
     * Validates the inputs associated with this action.
     *
     * @returns A list of inputs that failed validation, or an empty array if no input failed validation.
     */
    Action.prototype.validateInputs = function () {
        return this.internalValidateInputs(this.getReferencedInputs());
    };
    Object.defineProperty(Action.prototype, "isPrimary", {
        get: function () {
            return this.style == Enums.ActionStyle.Positive;
        },
        set: function (value) {
            if (value) {
                this.style = Enums.ActionStyle.Positive;
            }
            else {
                if (this.style == Enums.ActionStyle.Positive) {
                    this.style = Enums.ActionStyle.Default;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "hostConfig", {
        get: function () {
            return this.parent ? this.parent.hostConfig : host_config_1.defaultHostConfig;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "state", {
        get: function () {
            return this._state;
        },
        set: function (value) {
            if (this._state !== value) {
                this._state = value;
                this.updateCssClasses();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "isFocusable", {
        get: function () {
            return this._isFocusable;
        },
        set: function (value) {
            if (this._isFocusable !== value) {
                this._isFocusable = value;
                this.updateCssClasses();
            }
        },
        enumerable: false,
        configurable: true
    });
    Action.titleProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "title");
    Action.iconUrlProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_1, "iconUrl");
    Action.styleProperty = new serialization_1.ValueSetProperty(serialization_1.Versions.v1_2, "style", [
        { value: Enums.ActionStyle.Default },
        { value: Enums.ActionStyle.Positive },
        { value: Enums.ActionStyle.Destructive }
    ], Enums.ActionStyle.Default);
    Action.modeProperty = new serialization_1.ValueSetProperty(serialization_1.Versions.v1_5, "mode", [
        { value: Enums.ActionMode.Primary },
        { value: Enums.ActionMode.Secondary }
    ], Enums.ActionMode.Primary);
    Action.tooltipProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_5, "tooltip");
    Action.isEnabledProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_5, "isEnabled", true);
    __decorate([
        (0, serialization_1.property)(Action.titleProperty)
    ], Action.prototype, "title", void 0);
    __decorate([
        (0, serialization_1.property)(Action.iconUrlProperty)
    ], Action.prototype, "iconUrl", void 0);
    __decorate([
        (0, serialization_1.property)(Action.styleProperty)
    ], Action.prototype, "style", void 0);
    __decorate([
        (0, serialization_1.property)(Action.modeProperty)
    ], Action.prototype, "mode", void 0);
    __decorate([
        (0, serialization_1.property)(Action.tooltipProperty)
    ], Action.prototype, "tooltip", void 0);
    __decorate([
        (0, serialization_1.property)(Action.isEnabledProperty)
    ], Action.prototype, "isEnabled", void 0);
    return Action;
}(card_object_1.CardObject));
exports.Action = Action;
var SubmitActionBase = /** @class */ (function (_super) {
    __extends(SubmitActionBase, _super);
    function SubmitActionBase() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        //#endregion
        _this._isPrepared = false;
        return _this;
    }
    SubmitActionBase.prototype.internalGetReferencedInputs = function () {
        var result = {};
        if (this.associatedInputs !== "none") {
            var current = this.parent;
            var inputs = [];
            while (current) {
                inputs = inputs.concat(current.getAllInputs(false));
                current = current.parent;
            }
            for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
                var input = inputs_1[_i];
                if (input.id) {
                    result[input.id] = input;
                }
            }
        }
        return result;
    };
    SubmitActionBase.prototype.internalPrepareForExecution = function (inputs) {
        if (this._originalData) {
            this._processedData = JSON.parse(JSON.stringify(this._originalData));
        }
        else {
            this._processedData = {};
        }
        if (this._processedData && inputs) {
            for (var _i = 0, _a = Object.keys(inputs); _i < _a.length; _i++) {
                var key = _a[_i];
                var input = inputs[key];
                if (input.id && input.isSet()) {
                    this._processedData[input.id] = typeof input.value === "string" ? input.value : input.value.toString();
                }
            }
        }
        this._isPrepared = true;
    };
    Object.defineProperty(SubmitActionBase.prototype, "data", {
        get: function () {
            return this._isPrepared ? this._processedData : this._originalData;
        },
        set: function (value) {
            this._originalData = value;
            this._isPrepared = false;
        },
        enumerable: false,
        configurable: true
    });
    SubmitActionBase.dataProperty = new serialization_1.PropertyDefinition(serialization_1.Versions.v1_0, "data");
    SubmitActionBase.associatedInputsProperty = new serialization_1.CustomProperty(serialization_1.Versions.v1_3, "associatedInputs", function (sender, property, source, context) {
        var value = source[property.name];
        if (value !== undefined && typeof value === "string") {
            return value.toLowerCase() === "none" ? "none" : "auto";
        }
        return undefined;
    }, function (sender, property, target, value, context) {
        context.serializeValue(target, property.name, value);
    });
    __decorate([
        (0, serialization_1.property)(SubmitActionBase.dataProperty)
    ], SubmitActionBase.prototype, "_originalData", void 0);
    __decorate([
        (0, serialization_1.property)(SubmitActionBase.associatedInputsProperty)
    ], SubmitActionBase.prototype, "associatedInputs", void 0);
    return SubmitActionBase;
}(Action));
exports.SubmitActionBase = SubmitActionBase;
var SubmitAction = /** @class */ (function (_super) {
    __extends(SubmitAction, _super);
    function SubmitAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SubmitAction.prototype.getJsonTypeName = function () {
        return SubmitAction.JsonTypeName;
    };
    // Note the "weird" way this field is declared is to work around a breaking
    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    SubmitAction.JsonTypeName = "Action.Submit";
    return SubmitAction;
}(SubmitActionBase));
exports.SubmitAction = SubmitAction;
var ExecuteAction = /** @class */ (function (_super) {
    __extends(ExecuteAction, _super);
    function ExecuteAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    //#endregion
    ExecuteAction.prototype.getJsonTypeName = function () {
        return ExecuteAction.JsonTypeName;
    };
    // Note the "weird" way this field is declared is to work around a breaking
    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    ExecuteAction.JsonTypeName = "Action.Execute";
    //#region Schema
    ExecuteAction.verbProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_4, "verb");
    __decorate([
        (0, serialization_1.property)(ExecuteAction.verbProperty)
    ], ExecuteAction.prototype, "verb", void 0);
    return ExecuteAction;
}(SubmitActionBase));
exports.ExecuteAction = ExecuteAction;
var OpenUrlAction = /** @class */ (function (_super) {
    __extends(OpenUrlAction, _super);
    function OpenUrlAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OpenUrlAction.prototype.getJsonTypeName = function () {
        return OpenUrlAction.JsonTypeName;
    };
    OpenUrlAction.prototype.getAriaRole = function () {
        return "link";
    };
    OpenUrlAction.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (!this.url) {
            context.addFailure(this, Enums.ValidationEvent.PropertyCantBeNull, strings_1.Strings.errors.propertyMustBeSet("url"));
        }
    };
    OpenUrlAction.prototype.getHref = function () {
        return this.url;
    };
    //#region Schema
    OpenUrlAction.urlProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "url");
    //#endregion
    // Note the "weird" way this field is declared is to work around a breaking
    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    OpenUrlAction.JsonTypeName = "Action.OpenUrl";
    __decorate([
        (0, serialization_1.property)(OpenUrlAction.urlProperty)
    ], OpenUrlAction.prototype, "url", void 0);
    return OpenUrlAction;
}(Action));
exports.OpenUrlAction = OpenUrlAction;
var ToggleVisibilityAction = /** @class */ (function (_super) {
    __extends(ToggleVisibilityAction, _super);
    function ToggleVisibilityAction() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.targetElements = {};
        return _this;
    }
    ToggleVisibilityAction.prototype.updateAriaControlsAttribute = function () {
        // apply aria labels to make it clear which elements this action will toggle
        if (this.targetElements) {
            var elementIds = Object.keys(this.targetElements);
            if (this._renderedElement) {
                if (elementIds.length > 0) {
                    this._renderedElement.setAttribute("aria-controls", elementIds.join(" "));
                }
                else {
                    this._renderedElement.removeAttribute("aria-controls");
                }
            }
        }
    };
    ToggleVisibilityAction.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (!this.targetElements) {
            context.addFailure(this, Enums.ValidationEvent.PropertyCantBeNull, strings_1.Strings.errors.propertyMustBeSet("targetElements"));
        }
    };
    ToggleVisibilityAction.prototype.getJsonTypeName = function () {
        return ToggleVisibilityAction.JsonTypeName;
    };
    ToggleVisibilityAction.prototype.render = function () {
        _super.prototype.render.call(this);
        this.updateAriaControlsAttribute();
    };
    ToggleVisibilityAction.prototype.execute = function () {
        if (this.parent) {
            for (var _i = 0, _a = Object.keys(this.targetElements); _i < _a.length; _i++) {
                var elementId = _a[_i];
                var targetElement = this.parent.getRootElement().getElementById(elementId);
                if (targetElement) {
                    if (typeof this.targetElements[elementId] === "boolean") {
                        targetElement.isVisible = this.targetElements[elementId];
                    }
                    else {
                        targetElement.isVisible = !targetElement.isVisible;
                    }
                }
            }
        }
    };
    ToggleVisibilityAction.prototype.addTargetElement = function (elementId, isVisible) {
        if (isVisible === void 0) { isVisible = undefined; }
        this.targetElements[elementId] = isVisible;
        this.updateAriaControlsAttribute();
    };
    ToggleVisibilityAction.prototype.removeTargetElement = function (elementId) {
        delete this.targetElements[elementId];
        this.updateAriaControlsAttribute();
    };
    ToggleVisibilityAction.targetElementsProperty = new serialization_1.CustomProperty(serialization_1.Versions.v1_2, "targetElements", function (sender, property, source, context) {
        var result = {};
        if (Array.isArray(source[property.name])) {
            for (var _i = 0, _a = source[property.name]; _i < _a.length; _i++) {
                var item = _a[_i];
                if (typeof item === "string") {
                    result[item] = undefined;
                }
                else if (typeof item === "object") {
                    var elementId = item["elementId"];
                    if (typeof elementId === "string") {
                        result[elementId] = Utils.parseBool(item["isVisible"]);
                    }
                }
            }
        }
        return result;
    }, function (sender, property, target, value, context) {
        var targetElements = [];
        for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {
            var id = _a[_i];
            if (typeof value[id] === "boolean") {
                targetElements.push({
                    elementId: id,
                    isVisible: value[id]
                });
            }
            else {
                targetElements.push(id);
            }
        }
        context.serializeArray(target, property.name, targetElements);
    }, {}, function (sender) { return {}; });
    //#endregion
    // Note the "weird" way this field is declared is to work around a breaking
    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    ToggleVisibilityAction.JsonTypeName = "Action.ToggleVisibility";
    __decorate([
        (0, serialization_1.property)(ToggleVisibilityAction.targetElementsProperty)
    ], ToggleVisibilityAction.prototype, "targetElements", void 0);
    return ToggleVisibilityAction;
}(Action));
exports.ToggleVisibilityAction = ToggleVisibilityAction;
var StringWithSubstitutionProperty = /** @class */ (function (_super) {
    __extends(StringWithSubstitutionProperty, _super);
    function StringWithSubstitutionProperty(targetVersion, name) {
        var _this = _super.call(this, targetVersion, name, undefined, function () { return new shared_1.StringWithSubstitutions(); }) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        return _this;
    }
    StringWithSubstitutionProperty.prototype.parse = function (sender, source, context) {
        var result = new shared_1.StringWithSubstitutions();
        result.set(Utils.parseString(source[this.name]));
        return result;
    };
    StringWithSubstitutionProperty.prototype.toJSON = function (sender, target, value, context) {
        context.serializeValue(target, this.name, value.getOriginal());
    };
    return StringWithSubstitutionProperty;
}(serialization_1.PropertyDefinition));
var HttpHeader = /** @class */ (function (_super) {
    __extends(HttpHeader, _super);
    //#endregion
    function HttpHeader(name, value) {
        if (name === void 0) { name = ""; }
        if (value === void 0) { value = ""; }
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.value = value;
        return _this;
    }
    HttpHeader.prototype.getSchemaKey = function () {
        return "HttpHeader";
    };
    HttpHeader.prototype.getReferencedInputs = function (inputs, referencedInputs) {
        this._value.getReferencedInputs(inputs, referencedInputs);
    };
    HttpHeader.prototype.prepareForExecution = function (inputs) {
        this._value.substituteInputValues(inputs, shared_1.ContentTypes.applicationXWwwFormUrlencoded);
    };
    Object.defineProperty(HttpHeader.prototype, "value", {
        get: function () {
            return this._value.get();
        },
        set: function (newValue) {
            this._value.set(newValue);
        },
        enumerable: false,
        configurable: true
    });
    //#region Schema
    HttpHeader.nameProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "name");
    HttpHeader.valueProperty = new StringWithSubstitutionProperty(serialization_1.Versions.v1_0, "value");
    __decorate([
        (0, serialization_1.property)(HttpHeader.nameProperty)
    ], HttpHeader.prototype, "name", void 0);
    __decorate([
        (0, serialization_1.property)(HttpHeader.valueProperty)
    ], HttpHeader.prototype, "_value", void 0);
    return HttpHeader;
}(serialization_1.SerializableObject));
exports.HttpHeader = HttpHeader;
var HttpAction = /** @class */ (function (_super) {
    __extends(HttpAction, _super);
    function HttpAction() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._ignoreInputValidation = false;
        return _this;
    }
    HttpAction.prototype.internalGetReferencedInputs = function () {
        var allInputs = this.parent ? this.parent.getRootElement().getAllInputs() : [];
        var result = {};
        this._url.getReferencedInputs(allInputs, result);
        for (var _i = 0, _a = this.headers; _i < _a.length; _i++) {
            var header = _a[_i];
            header.getReferencedInputs(allInputs, result);
        }
        this._body.getReferencedInputs(allInputs, result);
        return result;
    };
    HttpAction.prototype.internalPrepareForExecution = function (inputs) {
        if (inputs) {
            this._url.substituteInputValues(inputs, shared_1.ContentTypes.applicationXWwwFormUrlencoded);
            var contentType = shared_1.ContentTypes.applicationJson;
            for (var _i = 0, _a = this.headers; _i < _a.length; _i++) {
                var header = _a[_i];
                header.prepareForExecution(inputs);
                if (header.name && header.name.toLowerCase() == "content-type") {
                    contentType = header.value;
                }
            }
            this._body.substituteInputValues(inputs, contentType);
        }
    };
    ;
    HttpAction.prototype.getJsonTypeName = function () {
        return HttpAction.JsonTypeName;
    };
    HttpAction.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (!this.url) {
            context.addFailure(this, Enums.ValidationEvent.PropertyCantBeNull, strings_1.Strings.errors.propertyMustBeSet("url"));
        }
        if (this.headers.length > 0) {
            for (var _i = 0, _a = this.headers; _i < _a.length; _i++) {
                var header = _a[_i];
                if (!header.name) {
                    context.addFailure(this, Enums.ValidationEvent.PropertyCantBeNull, strings_1.Strings.errors.actionHttpHeadersMustHaveNameAndValue());
                }
            }
        }
    };
    Object.defineProperty(HttpAction.prototype, "ignoreInputValidation", {
        get: function () {
            return this._ignoreInputValidation;
        },
        set: function (value) {
            this._ignoreInputValidation = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HttpAction.prototype, "url", {
        get: function () {
            return this._url.get();
        },
        set: function (value) {
            this._url.set(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HttpAction.prototype, "body", {
        get: function () {
            return this._body.get();
        },
        set: function (value) {
            this._body.set(value);
        },
        enumerable: false,
        configurable: true
    });
    HttpAction.urlProperty = new StringWithSubstitutionProperty(serialization_1.Versions.v1_0, "url");
    HttpAction.bodyProperty = new StringWithSubstitutionProperty(serialization_1.Versions.v1_0, "body");
    HttpAction.methodProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "method");
    HttpAction.headersProperty = new serialization_1.SerializableObjectCollectionProperty(serialization_1.Versions.v1_0, "headers", HttpHeader);
    HttpAction.ignoreInputValidationProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_3, "ignoreInputValidation", false);
    //#endregion
    // Note the "weird" way this field is declared is to work around a breaking
    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    HttpAction.JsonTypeName = "Action.Http";
    __decorate([
        (0, serialization_1.property)(HttpAction.urlProperty)
    ], HttpAction.prototype, "_url", void 0);
    __decorate([
        (0, serialization_1.property)(HttpAction.bodyProperty)
    ], HttpAction.prototype, "_body", void 0);
    __decorate([
        (0, serialization_1.property)(HttpAction.methodProperty)
    ], HttpAction.prototype, "method", void 0);
    __decorate([
        (0, serialization_1.property)(HttpAction.headersProperty)
    ], HttpAction.prototype, "headers", void 0);
    __decorate([
        (0, serialization_1.property)(HttpAction.ignoreInputValidationProperty)
    ], HttpAction.prototype, "_ignoreInputValidation", void 0);
    return HttpAction;
}(Action));
exports.HttpAction = HttpAction;
var ShowCardAction = /** @class */ (function (_super) {
    __extends(ShowCardAction, _super);
    function ShowCardAction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.card = new InlineAdaptiveCard();
        return _this;
    }
    ShowCardAction.prototype.updateCssClasses = function () {
        _super.prototype.updateCssClasses.call(this);
        if (this.renderedElement) {
            var effectiveHostConfig = this.parent ? this.parent.hostConfig : host_config_1.defaultHostConfig;
            this.renderedElement.classList.add(effectiveHostConfig.makeCssClassName("expandable"));
            this.renderedElement.setAttribute("aria-expanded", (this.state === 1 /* Expanded */).toString());
        }
    };
    ShowCardAction.prototype.internalParse = function (source, context) {
        _super.prototype.internalParse.call(this, source, context);
        var jsonCard = source["card"];
        if (jsonCard) {
            this.card.parse(jsonCard, context);
        }
        else {
            context.logParseEvent(this, Enums.ValidationEvent.PropertyCantBeNull, strings_1.Strings.errors.showCardMustHaveCard());
        }
    };
    ShowCardAction.prototype.internalToJSON = function (target, context) {
        _super.prototype.internalToJSON.call(this, target, context);
        if (this.card) {
            context.serializeValue(target, "card", this.card.toJSON(context));
        }
    };
    ShowCardAction.prototype.raiseExecuteActionEvent = function () {
        if (this.hostConfig.actions.showCard.actionMode === Enums.ShowCardActionMode.Popup) {
            // Only raise the event in Popup mode.
            _super.prototype.raiseExecuteActionEvent.call(this);
        }
    };
    ShowCardAction.prototype.getJsonTypeName = function () {
        return ShowCardAction.JsonTypeName;
    };
    ShowCardAction.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        this.card.internalValidateProperties(context);
    };
    ShowCardAction.prototype.setParent = function (value) {
        _super.prototype.setParent.call(this, value);
        this.card.setParent(value);
    };
    ShowCardAction.prototype.getAllInputs = function (processActions) {
        if (processActions === void 0) { processActions = true; }
        return this.card.getAllInputs(processActions);
    };
    ShowCardAction.prototype.getResourceInformation = function () {
        return _super.prototype.getResourceInformation.call(this).concat(this.card.getResourceInformation());
    };
    ShowCardAction.prototype.getActionById = function (id) {
        var result = _super.prototype.getActionById.call(this, id);
        if (!result) {
            result = this.card.getActionById(id);
        }
        return result;
    };
    // Note the "weird" way this field is declared is to work around a breaking
    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    ShowCardAction.JsonTypeName = "Action.ShowCard";
    return ShowCardAction;
}(Action));
exports.ShowCardAction = ShowCardAction;
var OverflowAction = /** @class */ (function (_super) {
    __extends(OverflowAction, _super);
    function OverflowAction(actions) {
        var _this = _super.call(this) || this;
        _this.actions = actions;
        _this.title = strings_1.Strings.defaults.overflowButtonText();
        return _this;
    }
    OverflowAction.prototype.getActions = function () {
        return this.actions;
    };
    OverflowAction.prototype.getJsonTypeName = function () {
        return ShowCardAction.JsonTypeName;
    };
    OverflowAction.prototype.execute = function () {
        var _this = this;
        var _a;
        var shouldDisplayPopupMenu = !raiseDisplayOverflowActionMenuEvent(this, this.renderedElement);
        if (shouldDisplayPopupMenu && this.renderedElement) {
            var contextMenu_1 = new controls_1.PopupMenu();
            contextMenu_1.hostConfig = this.hostConfig;
            var _loop_1 = function (i) {
                var menuItem = new controls_1.MenuItem(i.toString(), (_a = this_1.actions[i].title) !== null && _a !== void 0 ? _a : "");
                menuItem.isEnabled = this_1.actions[i].isEnabled;
                menuItem.onClick = function () {
                    var actionToExecute = _this.actions[i];
                    contextMenu_1.closePopup(false);
                    if (actionToExecute.isEnabled) {
                        actionToExecute.execute();
                    }
                };
                contextMenu_1.items.add(menuItem);
            };
            var this_1 = this;
            for (var i = 0; i < this.actions.length; i++) {
                _loop_1(i);
            }
            ;
            contextMenu_1.popup(this.renderedElement);
        }
    };
    OverflowAction.JsonTypeName = "Action.Overflow";
    return OverflowAction;
}(Action));
var ActionCollection = /** @class */ (function () {
    function ActionCollection(owner) {
        this._items = [];
        this._renderedActions = [];
        this._owner = owner;
    }
    ActionCollection.prototype.isActionAllowed = function (action) {
        var forbiddenTypes = this._owner.getForbiddenActionTypes();
        if (forbiddenTypes) {
            for (var _i = 0, forbiddenTypes_1 = forbiddenTypes; _i < forbiddenTypes_1.length; _i++) {
                var forbiddenType = forbiddenTypes_1[_i];
                if (action.constructor === forbiddenType) {
                    return false;
                }
            }
        }
        return true;
    };
    ActionCollection.prototype.refreshContainer = function () {
        this._actionCardContainer.innerHTML = "";
        if (!this._actionCard) {
            this._actionCardContainer.style.marginTop = "0px";
            return;
        }
        this._actionCardContainer.style.marginTop = this.renderedActionCount > 0 ? this._owner.hostConfig.actions.showCard.inlineTopMargin + "px" : "0px";
        var padding = this._owner.getEffectivePadding();
        this._owner.getImmediateSurroundingPadding(padding);
        var physicalPadding = this._owner.hostConfig.paddingDefinitionToSpacingDefinition(padding);
        if (this._actionCard) {
            this._actionCard.style.paddingLeft = physicalPadding.left + "px";
            this._actionCard.style.paddingRight = physicalPadding.right + "px";
            this._actionCard.style.marginLeft = "-" + physicalPadding.left + "px";
            this._actionCard.style.marginRight = "-" + physicalPadding.right + "px";
            if (physicalPadding.bottom != 0 && !this._owner.isDesignMode()) {
                this._actionCard.style.paddingBottom = physicalPadding.bottom + "px";
                this._actionCard.style.marginBottom = "-" + physicalPadding.bottom + "px";
            }
            Utils.appendChild(this._actionCardContainer, this._actionCard);
        }
    };
    ActionCollection.prototype.layoutChanged = function () {
        this._owner.getRootElement().updateLayout();
    };
    ActionCollection.prototype.showActionCard = function (action, suppressStyle, raiseEvent) {
        if (suppressStyle === void 0) { suppressStyle = false; }
        if (raiseEvent === void 0) { raiseEvent = true; }
        action.card.suppressStyle = suppressStyle;
        // Always re-render a ShowCard action in design mode; reuse already rendered ShowCard (if available) otherwise
        var renderedCard = action.card.renderedElement && !this._owner.isDesignMode() ? action.card.renderedElement : action.card.render();
        this._actionCard = renderedCard;
        this._expandedAction = action;
        this.refreshContainer();
        if (raiseEvent) {
            this.layoutChanged();
            raiseInlineCardExpandedEvent(action, true);
        }
    };
    ActionCollection.prototype.collapseExpandedAction = function () {
        for (var _i = 0, _a = this._renderedActions; _i < _a.length; _i++) {
            var action = _a[_i];
            action.state = 0 /* Normal */;
        }
        var previouslyExpandedAction = this._expandedAction;
        this._expandedAction = undefined;
        this._actionCard = undefined;
        this.refreshContainer();
        if (previouslyExpandedAction) {
            this.layoutChanged();
            raiseInlineCardExpandedEvent(previouslyExpandedAction, false);
        }
    };
    ActionCollection.prototype.expandShowCardAction = function (action, raiseEvent) {
        var _this = this;
        var afterSelectedAction = false;
        for (var _i = 0, _a = this._renderedActions; _i < _a.length; _i++) {
            var renderedAction = _a[_i];
            // Remove actions after selected action from tabOrder, to skip focus directly to expanded card
            if (afterSelectedAction) {
                renderedAction.isFocusable = false;
            }
            if (renderedAction !== action) {
                renderedAction.state = 2 /* Subdued */;
            }
            else {
                renderedAction.state = 1 /* Expanded */;
                afterSelectedAction = true;
                if (renderedAction.renderedElement) {
                    renderedAction.renderedElement.onblur = function (e) {
                        for (var _i = 0, _a = _this._renderedActions; _i < _a.length; _i++) {
                            var ra = _a[_i];
                            ra.isFocusable = true;
                        }
                    };
                }
            }
        }
        this.showActionCard(action, !(this._owner.isAtTheVeryLeft() && this._owner.isAtTheVeryRight()), raiseEvent);
    };
    ActionCollection.prototype.actionExecuted = function (action) {
        if (!(action instanceof ShowCardAction)) {
            this.collapseExpandedAction();
        }
        else {
            if (action === this._expandedAction) {
                this.collapseExpandedAction();
            }
            else if (this._owner.hostConfig.actions.showCard.actionMode === Enums.ShowCardActionMode.Inline) {
                this.expandShowCardAction(action, true);
            }
        }
    };
    ActionCollection.prototype.parse = function (source, context) {
        this.clear();
        if (Array.isArray(source)) {
            for (var _i = 0, source_1 = source; _i < source_1.length; _i++) {
                var jsonAction = source_1[_i];
                var action = context.parseAction(this._owner, jsonAction, [], !this._owner.isDesignMode());
                if (action) {
                    this.addAction(action);
                }
            }
        }
    };
    ActionCollection.prototype.toJSON = function (target, propertyName, context) {
        context.serializeArray(target, propertyName, this._items);
    };
    ActionCollection.prototype.getActionAt = function (id) {
        return this._items[id];
    };
    ActionCollection.prototype.getActionCount = function () {
        return this._items.length;
    };
    ActionCollection.prototype.getActionById = function (id) {
        var result = undefined;
        for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
            var item = _a[_i];
            result = item.getActionById(id);
            if (result) {
                break;
            }
        }
        return result;
    };
    ActionCollection.prototype.validateProperties = function (context) {
        if (this._owner.hostConfig.actions.maxActions && this._items.length > this._owner.hostConfig.actions.maxActions) {
            context.addFailure(this._owner, Enums.ValidationEvent.TooManyActions, strings_1.Strings.errors.tooManyActions(this._owner.hostConfig.actions.maxActions));
        }
        if (this._items.length > 0 && !this._owner.hostConfig.supportsInteractivity) {
            context.addFailure(this._owner, Enums.ValidationEvent.InteractivityNotAllowed, strings_1.Strings.errors.interactivityNotAllowed());
        }
        for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
            var item = _a[_i];
            if (!this.isActionAllowed(item)) {
                context.addFailure(this._owner, Enums.ValidationEvent.ActionTypeNotAllowed, strings_1.Strings.errors.actionTypeNotAllowed(item.getJsonTypeName()));
            }
            item.internalValidateProperties(context);
        }
    };
    ActionCollection.prototype.render = function (orientation, isDesignMode) {
        // Cache hostConfig for better perf
        var hostConfig = this._owner.hostConfig;
        if (!hostConfig.supportsInteractivity) {
            return undefined;
        }
        var element = document.createElement("div");
        var maxActions = hostConfig.actions.maxActions ? Math.min(hostConfig.actions.maxActions, this._items.length) : this._items.length;
        this._actionCardContainer = document.createElement("div");
        this._renderedActions = [];
        if (hostConfig.actions.preExpandSingleShowCardAction && maxActions == 1 && this._items[0] instanceof ShowCardAction && this.isActionAllowed(this._items[0])) {
            this.showActionCard(this._items[0], true);
            this._renderedActions.push(this._items[0]);
        }
        else {
            var buttonStrip = document.createElement("div");
            buttonStrip.className = hostConfig.makeCssClassName("ac-actionSet");
            buttonStrip.style.display = "flex";
            buttonStrip.setAttribute("role", "menubar");
            if (orientation == Enums.Orientation.Horizontal) {
                buttonStrip.style.flexDirection = "row";
                if (this._owner.horizontalAlignment && hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {
                    switch (this._owner.horizontalAlignment) {
                        case Enums.HorizontalAlignment.Center:
                            buttonStrip.style.justifyContent = "center";
                            break;
                        case Enums.HorizontalAlignment.Right:
                            buttonStrip.style.justifyContent = "flex-end";
                            break;
                        default:
                            buttonStrip.style.justifyContent = "flex-start";
                            break;
                    }
                }
                else {
                    switch (hostConfig.actions.actionAlignment) {
                        case Enums.ActionAlignment.Center:
                            buttonStrip.style.justifyContent = "center";
                            break;
                        case Enums.ActionAlignment.Right:
                            buttonStrip.style.justifyContent = "flex-end";
                            break;
                        default:
                            buttonStrip.style.justifyContent = "flex-start";
                            break;
                    }
                }
            }
            else {
                buttonStrip.style.flexDirection = "column";
                if (this._owner.horizontalAlignment && hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {
                    switch (this._owner.horizontalAlignment) {
                        case Enums.HorizontalAlignment.Center:
                            buttonStrip.style.alignItems = "center";
                            break;
                        case Enums.HorizontalAlignment.Right:
                            buttonStrip.style.alignItems = "flex-end";
                            break;
                        default:
                            buttonStrip.style.alignItems = "flex-start";
                            break;
                    }
                }
                else {
                    switch (hostConfig.actions.actionAlignment) {
                        case Enums.ActionAlignment.Center:
                            buttonStrip.style.alignItems = "center";
                            break;
                        case Enums.ActionAlignment.Right:
                            buttonStrip.style.alignItems = "flex-end";
                            break;
                        case Enums.ActionAlignment.Stretch:
                            buttonStrip.style.alignItems = "stretch";
                            break;
                        default:
                            buttonStrip.style.alignItems = "flex-start";
                            break;
                    }
                }
            }
            var allowedActions = this._items.filter(this.isActionAllowed.bind(this));
            var primaryActions_1 = [];
            var secondaryActions_1 = [];
            if (!this._owner.isDesignMode()) {
                allowedActions.forEach(function (action) { return action.mode === Enums.ActionMode.Secondary ? secondaryActions_1.push(action) : primaryActions_1.push(action); });
                // If primaryActions.length > maxActions, extra actions are moved to overflow
                var overflowPrimaryActions = primaryActions_1.splice(hostConfig.actions.maxActions);
                if (shared_1.GlobalSettings.allowMoreThanMaxActionsInOverflowMenu) {
                    secondaryActions_1.push.apply(secondaryActions_1, overflowPrimaryActions);
                }
                var shouldRenderOverflowActionButton = true;
                if (secondaryActions_1.length > 0) {
                    if (!this._overflowAction) {
                        this._overflowAction = new OverflowAction(secondaryActions_1);
                        this._overflowAction.setParent(this._owner);
                        this._overflowAction["_actionCollection"] = this;
                    }
                    var isRootAction = this._owner instanceof AdaptiveCard && !this._owner.parent;
                    shouldRenderOverflowActionButton = !raiseRenderOverflowActionsEvent(this._overflowAction, isRootAction);
                }
                if (this._overflowAction && shouldRenderOverflowActionButton) {
                    primaryActions_1.push(this._overflowAction);
                }
            }
            else {
                primaryActions_1 = allowedActions;
            }
            for (var i = 0; i < primaryActions_1.length; i++) {
                var action = primaryActions_1[i];
                action.render();
                if (action.renderedElement) {
                    if (primaryActions_1.length > 1) {
                        action.renderedElement.setAttribute("aria-posinset", (i + 1).toString());
                        action.renderedElement.setAttribute("aria-setsize", primaryActions_1.length.toString());
                        action.renderedElement.setAttribute("role", "menuitem");
                    }
                    if (hostConfig.actions.actionsOrientation == Enums.Orientation.Horizontal && hostConfig.actions.actionAlignment == Enums.ActionAlignment.Stretch) {
                        action.renderedElement.style.flex = "0 1 100%";
                    }
                    else {
                        action.renderedElement.style.flex = "0 1 auto";
                    }
                    buttonStrip.appendChild(action.renderedElement);
                    this._renderedActions.push(action);
                    if (i < primaryActions_1.length - 1 && hostConfig.actions.buttonSpacing > 0) {
                        var spacer = document.createElement("div");
                        if (orientation === Enums.Orientation.Horizontal) {
                            spacer.style.flex = "0 0 auto";
                            spacer.style.width = hostConfig.actions.buttonSpacing + "px";
                        }
                        else {
                            spacer.style.height = hostConfig.actions.buttonSpacing + "px";
                        }
                        Utils.appendChild(buttonStrip, spacer);
                    }
                }
            }
            var buttonStripContainer = document.createElement("div");
            buttonStripContainer.style.overflow = "hidden";
            buttonStripContainer.appendChild(buttonStrip);
            Utils.appendChild(element, buttonStripContainer);
        }
        Utils.appendChild(element, this._actionCardContainer);
        for (var _i = 0, _a = this._renderedActions; _i < _a.length; _i++) {
            var renderedAction = _a[_i];
            if (renderedAction.state == 1 /* Expanded */) {
                this.expandShowCardAction(renderedAction, false);
                break;
            }
        }
        return this._renderedActions.length > 0 ? element : undefined;
    };
    ActionCollection.prototype.addAction = function (action) {
        if (!action) {
            throw new Error("The action parameter cannot be null.");
        }
        if ((!action.parent || action.parent === this._owner) && this._items.indexOf(action) < 0) {
            this._items.push(action);
            if (!action.parent) {
                action.setParent(this._owner);
            }
            action["_actionCollection"] = this;
        }
        else {
            throw new Error(strings_1.Strings.errors.actionAlreadyParented());
        }
    };
    ActionCollection.prototype.removeAction = function (action) {
        if (this.expandedAction && this._expandedAction == action) {
            this.collapseExpandedAction();
        }
        var actionIndex = this._items.indexOf(action);
        if (actionIndex >= 0) {
            this._items.splice(actionIndex, 1);
            action.setParent(undefined);
            action["_actionCollection"] = undefined;
            for (var i = 0; i < this._renderedActions.length; i++) {
                if (this._renderedActions[i] == action) {
                    this._renderedActions.splice(i, 1);
                    break;
                }
            }
            return true;
        }
        return false;
    };
    ActionCollection.prototype.clear = function () {
        this._items = [];
        this._renderedActions = [];
        this._expandedAction = undefined;
    };
    ActionCollection.prototype.getAllInputs = function (processActions) {
        if (processActions === void 0) { processActions = true; }
        var result = [];
        if (processActions) {
            for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
                var action = _a[_i];
                result = result.concat(action.getAllInputs());
            }
        }
        return result;
    };
    ActionCollection.prototype.getResourceInformation = function () {
        var result = [];
        for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
            var action = _a[_i];
            result = result.concat(action.getResourceInformation());
        }
        return result;
    };
    Object.defineProperty(ActionCollection.prototype, "renderedActionCount", {
        get: function () {
            return this._renderedActions.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ActionCollection.prototype, "expandedAction", {
        get: function () {
            return this._expandedAction;
        },
        enumerable: false,
        configurable: true
    });
    return ActionCollection;
}());
var ActionSet = /** @class */ (function (_super) {
    __extends(ActionSet, _super);
    function ActionSet() {
        var _this = _super.call(this) || this;
        _this._actionCollection = new ActionCollection(_this);
        return _this;
    }
    ActionSet.prototype.internalParse = function (source, context) {
        _super.prototype.internalParse.call(this, source, context);
        this._actionCollection.parse(source["actions"], context);
    };
    ActionSet.prototype.internalToJSON = function (target, context) {
        _super.prototype.internalToJSON.call(this, target, context);
        this._actionCollection.toJSON(target, "actions", context);
    };
    ActionSet.prototype.internalRender = function () {
        return this._actionCollection.render(this.orientation !== undefined ? this.orientation : this.hostConfig.actions.actionsOrientation, this.isDesignMode());
    };
    ActionSet.prototype.isBleedingAtBottom = function () {
        if (this._actionCollection.renderedActionCount == 0) {
            return _super.prototype.isBleedingAtBottom.call(this);
        }
        else {
            if (this._actionCollection.getActionCount() == 1) {
                return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;
            }
            else {
                return this._actionCollection.expandedAction !== undefined;
            }
        }
    };
    ActionSet.prototype.getJsonTypeName = function () {
        return "ActionSet";
    };
    ActionSet.prototype.getActionCount = function () {
        return this._actionCollection.getActionCount();
    };
    ActionSet.prototype.getActionAt = function (index) {
        if (index >= 0 && index < this.getActionCount()) {
            return this._actionCollection.getActionAt(index);
        }
        else {
            return _super.prototype.getActionAt.call(this, index);
        }
    };
    ActionSet.prototype.getActionById = function (id) {
        var result = this._actionCollection.getActionById(id);
        return result ? result : _super.prototype.getActionById.call(this, id);
    };
    ActionSet.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        this._actionCollection.validateProperties(context);
    };
    ActionSet.prototype.addAction = function (action) {
        this._actionCollection.addAction(action);
    };
    ActionSet.prototype.getAllInputs = function (processActions) {
        if (processActions === void 0) { processActions = true; }
        return processActions ? this._actionCollection.getAllInputs() : [];
    };
    ActionSet.prototype.getResourceInformation = function () {
        return this._actionCollection.getResourceInformation();
    };
    /**
     * @inheritdoc
     */
    ActionSet.prototype.findDOMNodeOwner = function (node) {
        var target = undefined;
        for (var i = 0; i < this.getActionCount(); i++) {
            var action = this.getActionAt(i);
            if (action) {
                // recur through each Action
                target = action.findDOMNodeOwner(node);
                if (target) {
                    return target;
                }
            }
        }
        // if not found in any Action, defer to parent implementation
        return _super.prototype.findDOMNodeOwner.call(this, node);
    };
    Object.defineProperty(ActionSet.prototype, "isInteractive", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    //#region Schema
    ActionSet.orientationProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_1, "orientation", Enums.Orientation);
    __decorate([
        (0, serialization_1.property)(ActionSet.orientationProperty)
    ], ActionSet.prototype, "orientation", void 0);
    return ActionSet;
}(CardElement));
exports.ActionSet = ActionSet;
var ContainerStyleProperty = /** @class */ (function (_super) {
    __extends(ContainerStyleProperty, _super);
    function ContainerStyleProperty(targetVersion, name, defaultValue, onGetInitialValue) {
        var _this = _super.call(this, targetVersion, name, [
            { value: Enums.ContainerStyle.Default },
            { value: Enums.ContainerStyle.Emphasis },
            { targetVersion: serialization_1.Versions.v1_2, value: Enums.ContainerStyle.Accent },
            { targetVersion: serialization_1.Versions.v1_2, value: Enums.ContainerStyle.Good },
            { targetVersion: serialization_1.Versions.v1_2, value: Enums.ContainerStyle.Attention },
            { targetVersion: serialization_1.Versions.v1_2, value: Enums.ContainerStyle.Warning }
        ], defaultValue, onGetInitialValue) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.defaultValue = defaultValue;
        _this.onGetInitialValue = onGetInitialValue;
        return _this;
    }
    return ContainerStyleProperty;
}(serialization_1.ValueSetProperty));
exports.ContainerStyleProperty = ContainerStyleProperty;
var StylableCardElementContainer = /** @class */ (function (_super) {
    __extends(StylableCardElementContainer, _super);
    function StylableCardElementContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(StylableCardElementContainer.prototype, "style", {
        get: function () {
            if (this.allowCustomStyle) {
                var style = this.getValue(StylableCardElementContainer.styleProperty);
                if (style && this.hostConfig.containerStyles.getStyleByName(style)) {
                    return style;
                }
            }
            return undefined;
        },
        set: function (value) {
            this.setValue(StylableCardElementContainer.styleProperty, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StylableCardElementContainer.prototype, "allowCustomStyle", {
        //#endregion
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StylableCardElementContainer.prototype, "hasExplicitStyle", {
        get: function () {
            return this.getValue(StylableCardElementContainer.styleProperty) !== undefined;
        },
        enumerable: false,
        configurable: true
    });
    StylableCardElementContainer.prototype.applyBorder = function () {
        // No border in base implementation
    };
    StylableCardElementContainer.prototype.applyBackground = function () {
        if (this.renderedElement) {
            var styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.style, this.hostConfig.containerStyles.getStyleByName(this.defaultStyle));
            if (styleDefinition.backgroundColor) {
                var bgColor = Utils.stringToCssColor(styleDefinition.backgroundColor);
                this.renderedElement.style.backgroundColor = bgColor;
            }
        }
    };
    StylableCardElementContainer.prototype.applyPadding = function () {
        _super.prototype.applyPadding.call(this);
        if (!this.renderedElement) {
            return;
        }
        var physicalPadding = new shared_1.SpacingDefinition();
        if (this.getEffectivePadding()) {
            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());
        }
        this.renderedElement.style.paddingTop = physicalPadding.top + "px";
        this.renderedElement.style.paddingRight = physicalPadding.right + "px";
        this.renderedElement.style.paddingBottom = physicalPadding.bottom + "px";
        this.renderedElement.style.paddingLeft = physicalPadding.left + "px";
        if (this.isBleeding()) {
            // Bleed into the first parent that does have padding
            var padding = new shared_1.PaddingDefinition();
            this.getImmediateSurroundingPadding(padding);
            var surroundingPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);
            this.renderedElement.style.marginRight = "-" + surroundingPadding.right + "px";
            this.renderedElement.style.marginLeft = "-" + surroundingPadding.left + "px";
            if (!this.isDesignMode()) {
                this.renderedElement.style.marginTop = "-" + surroundingPadding.top + "px";
                this.renderedElement.style.marginBottom = "-" + surroundingPadding.bottom + "px";
            }
            if (this.separatorElement && this.separatorOrientation == Enums.Orientation.Horizontal) {
                this.separatorElement.style.marginLeft = "-" + surroundingPadding.left + "px";
                this.separatorElement.style.marginRight = "-" + surroundingPadding.right + "px";
            }
        }
        else {
            this.renderedElement.style.marginRight = "0";
            this.renderedElement.style.marginLeft = "0";
            this.renderedElement.style.marginTop = "0";
            this.renderedElement.style.marginBottom = "0";
            if (this.separatorElement && this.separatorOrientation === Enums.Orientation.Horizontal) {
                this.separatorElement.style.marginRight = "0";
                this.separatorElement.style.marginLeft = "0";
            }
        }
    };
    StylableCardElementContainer.prototype.getHasBackground = function () {
        var currentElement = this.parent;
        while (currentElement) {
            var currentElementHasBackgroundImage = currentElement instanceof Container ? currentElement.backgroundImage.isValid() : false;
            if (currentElement instanceof StylableCardElementContainer) {
                if (this.hasExplicitStyle && (currentElement.getEffectiveStyle() != this.getEffectiveStyle() || currentElementHasBackgroundImage)) {
                    return true;
                }
            }
            currentElement = currentElement.parent;
        }
        return false;
    };
    StylableCardElementContainer.prototype.getDefaultPadding = function () {
        return this.getHasBackground() || this.getHasBorder() ?
            new shared_1.PaddingDefinition(Enums.Spacing.Padding, Enums.Spacing.Padding, Enums.Spacing.Padding, Enums.Spacing.Padding) : _super.prototype.getDefaultPadding.call(this);
    };
    StylableCardElementContainer.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        var explicitStyle = this.getValue(StylableCardElementContainer.styleProperty);
        if (explicitStyle !== undefined) {
            var styleDefinition = this.hostConfig.containerStyles.getStyleByName(explicitStyle);
            if (!styleDefinition) {
                context.addFailure(this, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(explicitStyle, "style"));
            }
        }
    };
    StylableCardElementContainer.prototype.render = function () {
        var renderedElement = _super.prototype.render.call(this);
        if (renderedElement && this.getHasBackground()) {
            this.applyBackground();
        }
        this.applyBorder();
        return renderedElement;
    };
    StylableCardElementContainer.prototype.getEffectiveStyle = function () {
        var effectiveStyle = this.style;
        return effectiveStyle ? effectiveStyle : _super.prototype.getEffectiveStyle.call(this);
    };
    //#region Schema
    StylableCardElementContainer.styleProperty = new ContainerStyleProperty(serialization_1.Versions.v1_0, "style");
    __decorate([
        (0, serialization_1.property)(StylableCardElementContainer.styleProperty)
    ], StylableCardElementContainer.prototype, "style", null);
    return StylableCardElementContainer;
}(CardElementContainer));
exports.StylableCardElementContainer = StylableCardElementContainer;
var ContainerBase = /** @class */ (function (_super) {
    __extends(ContainerBase, _super);
    function ContainerBase() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._bleed = false;
        return _this;
    }
    //#endregion
    ContainerBase.prototype.adjustRenderedElementSize = function (renderedElement) {
        _super.prototype.adjustRenderedElementSize.call(this, renderedElement);
        if (this.minPixelHeight) {
            renderedElement.style.minHeight = this.minPixelHeight + "px";
        }
    };
    ContainerBase.prototype.getHasExpandedAction = function () {
        return false;
    };
    ContainerBase.prototype.getBleed = function () {
        return this._bleed;
    };
    ContainerBase.prototype.setBleed = function (value) {
        this._bleed = value;
    };
    Object.defineProperty(ContainerBase.prototype, "renderedActionCount", {
        get: function () {
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    ContainerBase.prototype.isBleeding = function () {
        return (this.getHasBackground() || this.hostConfig.alwaysAllowBleed) && this.getBleed();
    };
    ContainerBase.bleedProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_2, "bleed", false);
    ContainerBase.minHeightProperty = new serialization_1.PixelSizeProperty(serialization_1.Versions.v1_2, "minHeight");
    __decorate([
        (0, serialization_1.property)(ContainerBase.bleedProperty)
    ], ContainerBase.prototype, "_bleed", void 0);
    __decorate([
        (0, serialization_1.property)(ContainerBase.minHeightProperty)
    ], ContainerBase.prototype, "minPixelHeight", void 0);
    return ContainerBase;
}(StylableCardElementContainer));
exports.ContainerBase = ContainerBase;
var BackgroundImage = /** @class */ (function (_super) {
    __extends(BackgroundImage, _super);
    function BackgroundImage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    //#endregion
    BackgroundImage.prototype.getSchemaKey = function () {
        return "BackgroundImage";
    };
    BackgroundImage.prototype.internalParse = function (source, context) {
        if (typeof source === "string") {
            this.resetDefaultValues();
            this.url = source;
        }
        else {
            return _super.prototype.internalParse.call(this, source, context);
        }
    };
    BackgroundImage.prototype.apply = function (element) {
        if (this.url && element.renderedElement) {
            element.renderedElement.style.backgroundImage = "url('" + element.preProcessPropertyValue(BackgroundImage.urlProperty, this.url) + "')";
            switch (this.fillMode) {
                case Enums.FillMode.Repeat:
                    element.renderedElement.style.backgroundRepeat = "repeat";
                    break;
                case Enums.FillMode.RepeatHorizontally:
                    element.renderedElement.style.backgroundRepeat = "repeat-x";
                    break;
                case Enums.FillMode.RepeatVertically:
                    element.renderedElement.style.backgroundRepeat = "repeat-y";
                    break;
                case Enums.FillMode.Cover:
                default:
                    element.renderedElement.style.backgroundRepeat = "no-repeat";
                    element.renderedElement.style.backgroundSize = "cover";
                    break;
            }
            switch (this.horizontalAlignment) {
                case Enums.HorizontalAlignment.Center:
                    element.renderedElement.style.backgroundPositionX = "center";
                    break;
                case Enums.HorizontalAlignment.Right:
                    element.renderedElement.style.backgroundPositionX = "right";
                    break;
            }
            switch (this.verticalAlignment) {
                case Enums.VerticalAlignment.Center:
                    element.renderedElement.style.backgroundPositionY = "center";
                    break;
                case Enums.VerticalAlignment.Bottom:
                    element.renderedElement.style.backgroundPositionY = "bottom";
                    break;
            }
        }
    };
    BackgroundImage.prototype.isValid = function () {
        return this.url ? true : false;
    };
    //#region Schema
    BackgroundImage.urlProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "url");
    BackgroundImage.fillModeProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_2, "fillMode", Enums.FillMode, Enums.FillMode.Cover);
    BackgroundImage.horizontalAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_2, "horizontalAlignment", Enums.HorizontalAlignment, Enums.HorizontalAlignment.Left);
    BackgroundImage.verticalAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_2, "verticalAlignment", Enums.VerticalAlignment, Enums.VerticalAlignment.Top);
    __decorate([
        (0, serialization_1.property)(BackgroundImage.urlProperty)
    ], BackgroundImage.prototype, "url", void 0);
    __decorate([
        (0, serialization_1.property)(BackgroundImage.fillModeProperty)
    ], BackgroundImage.prototype, "fillMode", void 0);
    __decorate([
        (0, serialization_1.property)(BackgroundImage.horizontalAlignmentProperty)
    ], BackgroundImage.prototype, "horizontalAlignment", void 0);
    __decorate([
        (0, serialization_1.property)(BackgroundImage.verticalAlignmentProperty)
    ], BackgroundImage.prototype, "verticalAlignment", void 0);
    return BackgroundImage;
}(serialization_1.SerializableObject));
exports.BackgroundImage = BackgroundImage;
var Container = /** @class */ (function (_super) {
    __extends(Container, _super);
    function Container() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        //#endregion
        _this._items = [];
        _this._renderedItems = [];
        return _this;
    }
    Object.defineProperty(Container.prototype, "backgroundImage", {
        get: function () {
            return this.getValue(Container.backgroundImageProperty);
        },
        enumerable: false,
        configurable: true
    });
    Container.prototype.insertItemAt = function (item, index, forceInsert) {
        if (!item.parent || forceInsert) {
            if (item.isStandalone) {
                if (index < 0 || index >= this._items.length) {
                    this._items.push(item);
                }
                else {
                    this._items.splice(index, 0, item);
                }
                item.setParent(this);
            }
            else {
                throw new Error(strings_1.Strings.errors.elementTypeNotStandalone(item.getJsonTypeName()));
            }
        }
        else {
            throw new Error(strings_1.Strings.errors.elementAlreadyParented());
        }
    };
    Container.prototype.getItemsCollectionPropertyName = function () {
        return "items";
    };
    Container.prototype.applyBackground = function () {
        if (this.backgroundImage.isValid() && this.renderedElement) {
            this.backgroundImage.apply(this);
        }
        _super.prototype.applyBackground.call(this);
    };
    Container.prototype.internalRender = function () {
        this._renderedItems = [];
        // Cache hostConfig to avoid walking the parent hierarchy several times
        var hostConfig = this.hostConfig;
        var element = document.createElement("div");
        if (this.rtl !== undefined) {
            element.dir = this.rtl ? "rtl" : "ltr";
        }
        element.classList.add(hostConfig.makeCssClassName("ac-container"));
        element.style.display = "flex";
        element.style.flexDirection = "column";
        if (shared_1.GlobalSettings.useAdvancedCardBottomTruncation) {
            // Forces the container to be at least as tall as its content.
            //
            // Fixes a quirk in Chrome where, for nested flex elements, the
            // inner element's height would never exceed the outer element's
            // height. This caused overflow truncation to break -- containers
            // would always be measured as not overflowing, since their heights
            // were constrained by their parents as opposed to truly reflecting
            // the height of their content.
            //
            // See the "Browser Rendering Notes" section of this answer:
            // https://stackoverflow.com/questions/36247140/why-doesnt-flex-item-shrink-past-content-size
            element.style.minHeight = '-webkit-min-content';
        }
        switch (this.getEffectiveVerticalContentAlignment()) {
            case Enums.VerticalAlignment.Center:
                element.style.justifyContent = "center";
                break;
            case Enums.VerticalAlignment.Bottom:
                element.style.justifyContent = "flex-end";
                break;
            default:
                element.style.justifyContent = "flex-start";
                break;
        }
        if (this._items.length > 0) {
            for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
                var item = _a[_i];
                var renderedItem = this.isElementAllowed(item) ? item.render() : undefined;
                if (renderedItem) {
                    if (this._renderedItems.length > 0 && item.separatorElement) {
                        item.separatorElement.style.flex = "0 0 auto";
                        Utils.appendChild(element, item.separatorElement);
                    }
                    Utils.appendChild(element, renderedItem);
                    this._renderedItems.push(item);
                }
            }
        }
        else {
            if (this.isDesignMode()) {
                var placeholderElement = this.createPlaceholderElement();
                placeholderElement.style.width = "100%";
                placeholderElement.style.height = "100%";
                element.appendChild(placeholderElement);
            }
        }
        return element;
    };
    Container.prototype.truncateOverflow = function (maxHeight) {
        if (this.renderedElement) {
            // Add 1 to account for rounding differences between browsers
            var boundary_1 = this.renderedElement.offsetTop + maxHeight + 1;
            var handleElement_1 = function (cardElement) {
                var elt = cardElement.renderedElement;
                if (elt) {
                    switch (Utils.getFitStatus(elt, boundary_1)) {
                        case Enums.ContainerFitStatus.FullyInContainer:
                            var sizeChanged = cardElement['resetOverflow']();
                            // If the element's size changed after resetting content,
                            // we have to check if it still fits fully in the card
                            if (sizeChanged) {
                                handleElement_1(cardElement);
                            }
                            break;
                        case Enums.ContainerFitStatus.Overflowing:
                            var maxHeight_1 = boundary_1 - elt.offsetTop;
                            cardElement['handleOverflow'](maxHeight_1);
                            break;
                        case Enums.ContainerFitStatus.FullyOutOfContainer:
                            cardElement['handleOverflow'](0);
                            break;
                    }
                }
            };
            for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
                var item = _a[_i];
                handleElement_1(item);
            }
            return true;
        }
        return false;
    };
    Container.prototype.undoOverflowTruncation = function () {
        for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
            var item = _a[_i];
            item['resetOverflow']();
        }
    };
    Container.prototype.getHasBackground = function () {
        return this.backgroundImage.isValid() || _super.prototype.getHasBackground.call(this);
    };
    Container.prototype.internalParse = function (source, context) {
        _super.prototype.internalParse.call(this, source, context);
        this.clear();
        this.setShouldFallback(false);
        var jsonItems = source[this.getItemsCollectionPropertyName()];
        if (Array.isArray(jsonItems)) {
            for (var _i = 0, jsonItems_1 = jsonItems; _i < jsonItems_1.length; _i++) {
                var item = jsonItems_1[_i];
                var element = context.parseElement(this, item, !this.isDesignMode());
                if (element) {
                    this.insertItemAt(element, -1, true);
                }
            }
        }
    };
    Container.prototype.internalToJSON = function (target, context) {
        _super.prototype.internalToJSON.call(this, target, context);
        context.serializeArray(target, this.getItemsCollectionPropertyName(), this._items);
    };
    Object.defineProperty(Container.prototype, "isSelectable", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Container.prototype.getEffectiveVerticalContentAlignment = function () {
        if (this.verticalContentAlignment !== undefined) {
            return this.verticalContentAlignment;
        }
        var parentContainer = this.getParentContainer();
        return parentContainer ? parentContainer.getEffectiveVerticalContentAlignment() : Enums.VerticalAlignment.Top;
    };
    Container.prototype.getItemCount = function () {
        return this._items.length;
    };
    Container.prototype.getItemAt = function (index) {
        return this._items[index];
    };
    Container.prototype.getFirstVisibleRenderedItem = function () {
        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {
            for (var _i = 0, _a = this._renderedItems; _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.isVisible) {
                    return item;
                }
            }
            ;
        }
        return undefined;
    };
    Container.prototype.getLastVisibleRenderedItem = function () {
        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {
            for (var i = this._renderedItems.length - 1; i >= 0; i--) {
                if (this._renderedItems[i].isVisible) {
                    return this._renderedItems[i];
                }
            }
        }
        return undefined;
    };
    Container.prototype.getJsonTypeName = function () {
        return "Container";
    };
    Container.prototype.isFirstElement = function (element) {
        var designMode = this.isDesignMode();
        for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.isVisible || designMode) {
                return item == element;
            }
        }
        return false;
    };
    Container.prototype.isLastElement = function (element) {
        var designMode = this.isDesignMode();
        for (var i = this._items.length - 1; i >= 0; i--) {
            if (this._items[i].isVisible || designMode) {
                return this._items[i] == element;
            }
        }
        return false;
    };
    Container.prototype.isRtl = function () {
        if (this.rtl !== undefined) {
            return this.rtl;
        }
        else {
            var parentContainer = this.getParentContainer();
            return parentContainer ? parentContainer.isRtl() : false;
        }
    };
    Container.prototype.isBleedingAtTop = function () {
        var firstRenderedItem = this.getFirstVisibleRenderedItem();
        return this.isBleeding() || (firstRenderedItem ? firstRenderedItem.isBleedingAtTop() : false);
    };
    Container.prototype.isBleedingAtBottom = function () {
        var lastRenderedItem = this.getLastVisibleRenderedItem();
        return this.isBleeding() || (lastRenderedItem ? lastRenderedItem.isBleedingAtBottom() && lastRenderedItem.getEffectiveStyle() == this.getEffectiveStyle() : false);
    };
    Container.prototype.indexOf = function (cardElement) {
        return this._items.indexOf(cardElement);
    };
    Container.prototype.addItem = function (item) {
        this.insertItemAt(item, -1, false);
    };
    Container.prototype.insertItemBefore = function (item, insertBefore) {
        this.insertItemAt(item, this._items.indexOf(insertBefore), false);
    };
    Container.prototype.insertItemAfter = function (item, insertAfter) {
        this.insertItemAt(item, this._items.indexOf(insertAfter) + 1, false);
    };
    Container.prototype.removeItem = function (item) {
        var itemIndex = this._items.indexOf(item);
        if (itemIndex >= 0) {
            this._items.splice(itemIndex, 1);
            item.setParent(undefined);
            this.updateLayout();
            return true;
        }
        return false;
    };
    Container.prototype.clear = function () {
        this._items = [];
        this._renderedItems = [];
    };
    Container.prototype.getResourceInformation = function () {
        var result = _super.prototype.getResourceInformation.call(this);
        if (this.backgroundImage.isValid()) {
            result.push({
                url: this.backgroundImage.url,
                mimeType: "image"
            });
        }
        return result;
    };
    Container.prototype.getActionById = function (id) {
        var result = _super.prototype.getActionById.call(this, id);
        if (!result) {
            if (this.selectAction) {
                result = this.selectAction.getActionById(id);
            }
            if (!result) {
                for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
                    var item = _a[_i];
                    result = item.getActionById(id);
                    if (result) {
                        break;
                    }
                }
            }
        }
        return result;
    };
    Object.defineProperty(Container.prototype, "padding", {
        get: function () {
            return this.getPadding();
        },
        set: function (value) {
            this.setPadding(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "selectAction", {
        get: function () {
            return this._selectAction;
        },
        set: function (value) {
            this._selectAction = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "bleed", {
        get: function () {
            return this.getBleed();
        },
        set: function (value) {
            this.setBleed(value);
        },
        enumerable: false,
        configurable: true
    });
    Container.backgroundImageProperty = new serialization_1.SerializableObjectProperty(serialization_1.Versions.v1_0, "backgroundImage", BackgroundImage);
    Container.verticalContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_1, "verticalContentAlignment", Enums.VerticalAlignment);
    Container.rtlProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_0, "rtl");
    __decorate([
        (0, serialization_1.property)(Container.backgroundImageProperty)
    ], Container.prototype, "backgroundImage", null);
    __decorate([
        (0, serialization_1.property)(Container.verticalContentAlignmentProperty)
    ], Container.prototype, "verticalContentAlignment", void 0);
    __decorate([
        (0, serialization_1.property)(Container.rtlProperty)
    ], Container.prototype, "rtl", void 0);
    return Container;
}(ContainerBase));
exports.Container = Container;
var Column = /** @class */ (function (_super) {
    __extends(Column, _super);
    function Column(width) {
        if (width === void 0) { width = "stretch"; }
        var _this = _super.call(this) || this;
        _this.width = "stretch";
        //#endregion
        _this._computedWeight = 0;
        _this.width = width;
        return _this;
    }
    Column.prototype.adjustRenderedElementSize = function (renderedElement) {
        var minDesignTimeColumnHeight = 20;
        if (this.isDesignMode()) {
            renderedElement.style.minWidth = "20px";
            renderedElement.style.minHeight = (!this.minPixelHeight ? minDesignTimeColumnHeight : Math.max(this.minPixelHeight, minDesignTimeColumnHeight)) + "px";
        }
        else {
            renderedElement.style.minWidth = "0";
            if (this.minPixelHeight) {
                renderedElement.style.minHeight = this.minPixelHeight + "px";
            }
        }
        if (this.width === "auto") {
            renderedElement.style.flex = "0 1 auto";
        }
        else if (this.width === "stretch") {
            renderedElement.style.flex = "1 1 50px";
        }
        else if (this.width instanceof shared_1.SizeAndUnit) {
            if (this.width.unit == Enums.SizeUnit.Pixel) {
                renderedElement.style.flex = "0 0 auto";
                renderedElement.style.width = this.width.physicalSize + "px";
            }
            else {
                renderedElement.style.flex = "1 1 " + (this._computedWeight > 0 ? this._computedWeight : this.width.physicalSize) + "%";
            }
        }
    };
    Column.prototype.shouldSerialize = function (context) {
        return true;
    };
    Object.defineProperty(Column.prototype, "separatorOrientation", {
        get: function () {
            return Enums.Orientation.Vertical;
        },
        enumerable: false,
        configurable: true
    });
    Column.prototype.getJsonTypeName = function () {
        return "Column";
    };
    Object.defineProperty(Column.prototype, "hasVisibleSeparator", {
        get: function () {
            if (this.parent && this.parent instanceof ColumnSet) {
                return this.separatorElement !== undefined && !this.parent.isLeftMostElement(this);
            }
            else {
                return false;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "isStandalone", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    //#region Schema
    Column.widthProperty = new serialization_1.CustomProperty(serialization_1.Versions.v1_0, "width", function (sender, property, source, context) {
        var result = property.defaultValue;
        var value = source[property.name];
        var invalidWidth = false;
        if (typeof value === "number" && !isNaN(value)) {
            result = new shared_1.SizeAndUnit(value, Enums.SizeUnit.Weight);
        }
        else if (value === "auto" || value === "stretch") {
            result = value;
        }
        else if (typeof value === "string") {
            try {
                result = shared_1.SizeAndUnit.parse(value);
                if (result.unit === Enums.SizeUnit.Pixel && property.targetVersion.compareTo(context.targetVersion) > 0) {
                    invalidWidth = true;
                }
            }
            catch (e) {
                invalidWidth = true;
            }
        }
        else {
            invalidWidth = true;
        }
        if (invalidWidth) {
            context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidColumnWidth(value));
            result = "auto";
        }
        return result;
    }, function (sender, property, target, value, context) {
        if (value instanceof shared_1.SizeAndUnit) {
            if (value.unit === Enums.SizeUnit.Pixel) {
                context.serializeValue(target, "width", value.physicalSize + "px");
            }
            else {
                context.serializeNumber(target, "width", value.physicalSize);
            }
        }
        else {
            context.serializeValue(target, "width", value);
        }
    }, "stretch");
    __decorate([
        (0, serialization_1.property)(Column.widthProperty)
    ], Column.prototype, "width", void 0);
    return Column;
}(Container));
exports.Column = Column;
var ColumnSet = /** @class */ (function (_super) {
    __extends(ColumnSet, _super);
    function ColumnSet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._columns = [];
        return _this;
    }
    ColumnSet.prototype.createColumnInstance = function (source, context) {
        return context.parseCardObject(this, source, [], // Forbidden types not supported for elements for now
        !this.isDesignMode(), function (typeName) {
            return !typeName || typeName === "Column" ? new Column() : undefined;
        }, function (typeName, errorType) {
            context.logParseEvent(undefined, Enums.ValidationEvent.ElementTypeNotAllowed, strings_1.Strings.errors.elementTypeNotAllowed(typeName));
        });
    };
    ColumnSet.prototype.internalRender = function () {
        this._renderedColumns = [];
        if (this._columns.length > 0) {
            // Cache hostConfig to avoid walking the parent hierarchy several times
            var hostConfig = this.hostConfig;
            var element = document.createElement("div");
            element.className = hostConfig.makeCssClassName("ac-columnSet");
            element.style.display = "flex";
            if (shared_1.GlobalSettings.useAdvancedCardBottomTruncation) {
                // See comment in Container.internalRender()
                element.style.minHeight = '-webkit-min-content';
            }
            switch (this.getEffectiveHorizontalAlignment()) {
                case Enums.HorizontalAlignment.Center:
                    element.style.justifyContent = "center";
                    break;
                case Enums.HorizontalAlignment.Right:
                    element.style.justifyContent = "flex-end";
                    break;
                default:
                    element.style.justifyContent = "flex-start";
                    break;
            }
            var totalWeight = 0;
            for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
                var column = _a[_i];
                if (column.width instanceof shared_1.SizeAndUnit && (column.width.unit == Enums.SizeUnit.Weight)) {
                    totalWeight += column.width.physicalSize;
                }
            }
            for (var _b = 0, _c = this._columns; _b < _c.length; _b++) {
                var column = _c[_b];
                if (column.width instanceof shared_1.SizeAndUnit && column.width.unit == Enums.SizeUnit.Weight && totalWeight > 0) {
                    var computedWeight = 100 / totalWeight * column.width.physicalSize;
                    // Best way to emulate "internal" access I know of
                    column["_computedWeight"] = computedWeight;
                }
                var renderedColumn = column.render();
                if (renderedColumn) {
                    if (this._renderedColumns.length > 0 && column.separatorElement) {
                        column.separatorElement.style.flex = "0 0 auto";
                        Utils.appendChild(element, column.separatorElement);
                    }
                    Utils.appendChild(element, renderedColumn);
                    this._renderedColumns.push(column);
                }
            }
            return this._renderedColumns.length > 0 ? element : undefined;
        }
        else {
            return undefined;
        }
    };
    ColumnSet.prototype.truncateOverflow = function (maxHeight) {
        for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
            var column = _a[_i];
            column['handleOverflow'](maxHeight);
        }
        return true;
    };
    ColumnSet.prototype.undoOverflowTruncation = function () {
        for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
            var column = _a[_i];
            column['resetOverflow']();
        }
    };
    Object.defineProperty(ColumnSet.prototype, "isSelectable", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    ColumnSet.prototype.internalParse = function (source, context) {
        _super.prototype.internalParse.call(this, source, context);
        this._columns = [];
        this._renderedColumns = [];
        var jsonColumns = source["columns"];
        if (Array.isArray(jsonColumns)) {
            for (var _i = 0, jsonColumns_1 = jsonColumns; _i < jsonColumns_1.length; _i++) {
                var item = jsonColumns_1[_i];
                var column = this.createColumnInstance(item, context);
                if (column) {
                    this._columns.push(column);
                }
            }
        }
    };
    ColumnSet.prototype.internalToJSON = function (target, context) {
        _super.prototype.internalToJSON.call(this, target, context);
        context.serializeArray(target, "columns", this._columns);
    };
    ColumnSet.prototype.isFirstElement = function (element) {
        for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
            var column = _a[_i];
            if (column.isVisible) {
                return column == element;
            }
        }
        return false;
    };
    ColumnSet.prototype.isBleedingAtTop = function () {
        if (this.isBleeding()) {
            return true;
        }
        if (this._renderedColumns && this._renderedColumns.length > 0) {
            for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
                var column = _a[_i];
                if (column.isBleedingAtTop()) {
                    return true;
                }
            }
        }
        return false;
    };
    ColumnSet.prototype.isBleedingAtBottom = function () {
        if (this.isBleeding()) {
            return true;
        }
        if (this._renderedColumns && this._renderedColumns.length > 0) {
            for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
                var column = _a[_i];
                if (column.isBleedingAtBottom()) {
                    return true;
                }
            }
        }
        return false;
    };
    ColumnSet.prototype.getItemCount = function () {
        return this._columns.length;
    };
    ColumnSet.prototype.getFirstVisibleRenderedItem = function () {
        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {
            return this._renderedColumns[0];
        }
        else {
            return undefined;
        }
    };
    ColumnSet.prototype.getLastVisibleRenderedItem = function () {
        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {
            return this._renderedColumns[this._renderedColumns.length - 1];
        }
        else {
            return undefined;
        }
    };
    ColumnSet.prototype.getColumnAt = function (index) {
        return this._columns[index];
    };
    ColumnSet.prototype.getItemAt = function (index) {
        return this.getColumnAt(index);
    };
    ColumnSet.prototype.getJsonTypeName = function () {
        return "ColumnSet";
    };
    ColumnSet.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        var weightedColumns = 0;
        var stretchedColumns = 0;
        for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
            var column = _a[_i];
            if (typeof column.width === "number") {
                weightedColumns++;
            }
            else if (column.width === "stretch") {
                stretchedColumns++;
            }
        }
        if (weightedColumns > 0 && stretchedColumns > 0) {
            context.addFailure(this, Enums.ValidationEvent.Hint, strings_1.Strings.hints.dontUseWeightedAndStrecthedColumnsInSameSet());
        }
    };
    ColumnSet.prototype.addColumn = function (column) {
        if (!column.parent) {
            this._columns.push(column);
            column.setParent(this);
        }
        else {
            throw new Error(strings_1.Strings.errors.columnAlreadyBelongsToAnotherSet());
        }
    };
    ColumnSet.prototype.removeItem = function (item) {
        if (item instanceof Column) {
            var itemIndex = this._columns.indexOf(item);
            if (itemIndex >= 0) {
                this._columns.splice(itemIndex, 1);
                item.setParent(undefined);
                this.updateLayout();
                return true;
            }
        }
        return false;
    };
    ColumnSet.prototype.indexOf = function (cardElement) {
        return cardElement instanceof Column ? this._columns.indexOf(cardElement) : -1;
    };
    ColumnSet.prototype.isLeftMostElement = function (element) {
        return this._columns.indexOf(element) == 0;
    };
    ColumnSet.prototype.isRightMostElement = function (element) {
        return this._columns.indexOf(element) == this._columns.length - 1;
    };
    ColumnSet.prototype.isTopElement = function (element) {
        return this._columns.indexOf(element) >= 0;
    };
    ColumnSet.prototype.isBottomElement = function (element) {
        return this._columns.indexOf(element) >= 0;
    };
    ColumnSet.prototype.getActionById = function (id) {
        var result = undefined;
        for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
            var column = _a[_i];
            result = column.getActionById(id);
            if (result) {
                break;
            }
        }
        return result;
    };
    Object.defineProperty(ColumnSet.prototype, "bleed", {
        get: function () {
            return this.getBleed();
        },
        set: function (value) {
            this.setBleed(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColumnSet.prototype, "padding", {
        get: function () {
            return this.getPadding();
        },
        set: function (value) {
            this.setPadding(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ColumnSet.prototype, "selectAction", {
        get: function () {
            return this._selectAction;
        },
        set: function (value) {
            this._selectAction = value;
        },
        enumerable: false,
        configurable: true
    });
    return ColumnSet;
}(ContainerBase));
exports.ColumnSet = ColumnSet;
function raiseImageLoadedEvent(image) {
    var card = image.getRootElement();
    var onImageLoadedHandler = (card && card.onImageLoaded) ? card.onImageLoaded : AdaptiveCard.onImageLoaded;
    if (onImageLoadedHandler) {
        onImageLoadedHandler(image);
    }
}
function raiseAnchorClickedEvent(element, anchor, ev) {
    var card = element.getRootElement();
    var onAnchorClickedHandler = (card && card.onAnchorClicked) ? card.onAnchorClicked : AdaptiveCard.onAnchorClicked;
    return onAnchorClickedHandler !== undefined ? onAnchorClickedHandler(element, anchor, ev) : false;
}
function raiseExecuteActionEvent(action) {
    var card = action.parent ? action.parent.getRootElement() : undefined;
    var onExecuteActionHandler = (card && card.onExecuteAction) ? card.onExecuteAction : AdaptiveCard.onExecuteAction;
    if (action.prepareForExecution() && onExecuteActionHandler) {
        onExecuteActionHandler(action);
    }
}
function raiseInlineCardExpandedEvent(action, isExpanded) {
    var card = action.parent ? action.parent.getRootElement() : undefined;
    var onInlineCardExpandedHandler = (card && card.onInlineCardExpanded) ? card.onInlineCardExpanded : AdaptiveCard.onInlineCardExpanded;
    if (onInlineCardExpandedHandler) {
        onInlineCardExpandedHandler(action, isExpanded);
    }
}
function raiseInputValueChangedEvent(input) {
    var card = input.getRootElement();
    var onInputValueChangedHandler = (card && card.onInputValueChanged) ? card.onInputValueChanged : AdaptiveCard.onInputValueChanged;
    if (onInputValueChangedHandler) {
        onInputValueChangedHandler(input);
    }
}
function raiseElementVisibilityChangedEvent(element, shouldUpdateLayout) {
    if (shouldUpdateLayout === void 0) { shouldUpdateLayout = true; }
    var rootElement = element.getRootElement();
    if (shouldUpdateLayout) {
        rootElement.updateLayout();
    }
    var card = rootElement;
    var onElementVisibilityChangedHandler = (card && card.onElementVisibilityChanged) ? card.onElementVisibilityChanged : AdaptiveCard.onElementVisibilityChanged;
    if (onElementVisibilityChangedHandler !== undefined) {
        onElementVisibilityChangedHandler(element);
    }
}
/**
 * @returns return false to continue with default context menu; return true to skip SDK default context menu
 */
function raiseDisplayOverflowActionMenuEvent(action, target) {
    var card = action.parent ? action.parent.getRootElement() : undefined;
    var onDisplayOverflowActionMenuHandler = (card && card.onDisplayOverflowActionMenu) ? card.onDisplayOverflowActionMenu : AdaptiveCard.onDisplayOverflowActionMenu;
    return onDisplayOverflowActionMenuHandler !== undefined ? onDisplayOverflowActionMenuHandler(action.getActions(), target) : false;
}
/**
 * @returns return false to continue with default action button; return true to skip SDK default action button
 */
function raiseRenderOverflowActionsEvent(action, isAtRootLevelActions) {
    var card = action.parent ? action.parent.getRootElement() : undefined;
    var onRenderOverflowActionsHandler = (card && card.onRenderOverflowActions) ? card.onRenderOverflowActions : AdaptiveCard.onRenderOverflowActions;
    return onRenderOverflowActionsHandler !== undefined ? onRenderOverflowActionsHandler(action.getActions(), isAtRootLevelActions) : false;
}
var ContainerWithActions = /** @class */ (function (_super) {
    __extends(ContainerWithActions, _super);
    function ContainerWithActions() {
        var _this = _super.call(this) || this;
        _this._actionCollection = new ActionCollection(_this);
        return _this;
    }
    ContainerWithActions.prototype.internalParse = function (source, context) {
        _super.prototype.internalParse.call(this, source, context);
        this._actionCollection.parse(source["actions"], context);
    };
    ContainerWithActions.prototype.internalToJSON = function (target, context) {
        _super.prototype.internalToJSON.call(this, target, context);
        this._actionCollection.toJSON(target, "actions", context);
    };
    ContainerWithActions.prototype.internalRender = function () {
        var element = _super.prototype.internalRender.call(this);
        if (element) {
            var renderedActions = this._actionCollection.render(this.hostConfig.actions.actionsOrientation, false);
            if (renderedActions) {
                Utils.appendChild(element, renderSeparation(this.hostConfig, {
                    spacing: this.hostConfig.getEffectiveSpacing(this.hostConfig.actions.spacing)
                }, Enums.Orientation.Horizontal));
                Utils.appendChild(element, renderedActions);
            }
            if (this.renderIfEmpty) {
                return element;
            }
            else {
                return element.children.length > 0 ? element : undefined;
            }
        }
        else {
            return undefined;
        }
    };
    ContainerWithActions.prototype.getHasExpandedAction = function () {
        if (this.renderedActionCount == 0) {
            return false;
        }
        else if (this.renderedActionCount == 1) {
            return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;
        }
        else {
            return this._actionCollection.expandedAction !== undefined;
        }
    };
    Object.defineProperty(ContainerWithActions.prototype, "renderedActionCount", {
        get: function () {
            return this._actionCollection.renderedActionCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContainerWithActions.prototype, "renderIfEmpty", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    ContainerWithActions.prototype.getActionCount = function () {
        return this._actionCollection.getActionCount();
    };
    ContainerWithActions.prototype.getActionAt = function (index) {
        if (index >= 0 && index < this.getActionCount()) {
            return this._actionCollection.getActionAt(index);
        }
        else {
            return _super.prototype.getActionAt.call(this, index);
        }
    };
    ContainerWithActions.prototype.getActionById = function (id) {
        var result = this._actionCollection.getActionById(id);
        return result ? result : _super.prototype.getActionById.call(this, id);
    };
    ContainerWithActions.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (this._actionCollection) {
            this._actionCollection.validateProperties(context);
        }
    };
    ContainerWithActions.prototype.isLastElement = function (element) {
        return _super.prototype.isLastElement.call(this, element) && this._actionCollection.getActionCount() == 0;
    };
    ContainerWithActions.prototype.addAction = function (action) {
        this._actionCollection.addAction(action);
    };
    ContainerWithActions.prototype.clear = function () {
        _super.prototype.clear.call(this);
        this._actionCollection.clear();
    };
    ContainerWithActions.prototype.getAllInputs = function (processActions) {
        if (processActions === void 0) { processActions = true; }
        var result = _super.prototype.getAllInputs.call(this, processActions);
        if (processActions) {
            result = result.concat(this._actionCollection.getAllInputs(processActions));
        }
        return result;
    };
    ContainerWithActions.prototype.getResourceInformation = function () {
        return _super.prototype.getResourceInformation.call(this).concat(this._actionCollection.getResourceInformation());
    };
    ContainerWithActions.prototype.isBleedingAtBottom = function () {
        if (this._actionCollection.renderedActionCount == 0) {
            return _super.prototype.isBleedingAtBottom.call(this);
        }
        else {
            if (this._actionCollection.getActionCount() == 1) {
                return this._actionCollection.expandedAction !== undefined && !this.hostConfig.actions.preExpandSingleShowCardAction;
            }
            else {
                return this._actionCollection.expandedAction !== undefined;
            }
        }
    };
    Object.defineProperty(ContainerWithActions.prototype, "isStandalone", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    return ContainerWithActions;
}(Container));
exports.ContainerWithActions = ContainerWithActions;
var RefreshActionProperty = /** @class */ (function (_super) {
    __extends(RefreshActionProperty, _super);
    function RefreshActionProperty(targetVersion, name) {
        var _this = _super.call(this, targetVersion, name, undefined) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        return _this;
    }
    RefreshActionProperty.prototype.parse = function (sender, source, context) {
        var action = context.parseAction(sender.parent, source[this.name], [], false);
        if (action !== undefined) {
            if (action instanceof ExecuteAction) {
                return action;
            }
            context.logParseEvent(sender, Enums.ValidationEvent.ActionTypeNotAllowed, strings_1.Strings.errors.actionTypeNotAllowed(action.getJsonTypeName()));
        }
        context.logParseEvent(sender, Enums.ValidationEvent.PropertyCantBeNull, strings_1.Strings.errors.propertyMustBeSet("action"));
        return undefined;
    };
    RefreshActionProperty.prototype.toJSON = function (sender, target, value, context) {
        context.serializeValue(target, this.name, value ? value.toJSON(context) : undefined, undefined, true);
    };
    return RefreshActionProperty;
}(serialization_1.PropertyDefinition));
exports.RefreshActionProperty = RefreshActionProperty;
var RefreshDefinition = /** @class */ (function (_super) {
    __extends(RefreshDefinition, _super);
    function RefreshDefinition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(RefreshDefinition.prototype, "action", {
        get: function () {
            return this.getValue(RefreshDefinition.actionProperty);
        },
        set: function (value) {
            this.setValue(RefreshDefinition.actionProperty, value);
            if (value) {
                value.setParent(this.parent);
            }
        },
        enumerable: false,
        configurable: true
    });
    RefreshDefinition.prototype.getSchemaKey = function () {
        return "RefreshDefinition";
    };
    //#region Schema
    RefreshDefinition.actionProperty = new RefreshActionProperty(serialization_1.Versions.v1_4, "action");
    RefreshDefinition.userIdsProperty = new serialization_1.StringArrayProperty(serialization_1.Versions.v1_4, "userIds");
    __decorate([
        (0, serialization_1.property)(RefreshDefinition.actionProperty)
    ], RefreshDefinition.prototype, "action", null);
    __decorate([
        (0, serialization_1.property)(RefreshDefinition.userIdsProperty)
    ], RefreshDefinition.prototype, "userIds", void 0);
    return RefreshDefinition;
}(serialization_1.SerializableObject));
exports.RefreshDefinition = RefreshDefinition;
var AuthCardButton = /** @class */ (function (_super) {
    __extends(AuthCardButton, _super);
    function AuthCardButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AuthCardButton.prototype.getSchemaKey = function () {
        return "AuthCardButton";
    };
    //#region Schema
    AuthCardButton.typeProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_4, "type");
    AuthCardButton.titleProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_4, "title");
    AuthCardButton.imageProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_4, "image");
    AuthCardButton.valueProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_4, "value");
    __decorate([
        (0, serialization_1.property)(AuthCardButton.typeProperty)
    ], AuthCardButton.prototype, "type", void 0);
    __decorate([
        (0, serialization_1.property)(AuthCardButton.titleProperty)
    ], AuthCardButton.prototype, "title", void 0);
    __decorate([
        (0, serialization_1.property)(AuthCardButton.imageProperty)
    ], AuthCardButton.prototype, "image", void 0);
    __decorate([
        (0, serialization_1.property)(AuthCardButton.valueProperty)
    ], AuthCardButton.prototype, "value", void 0);
    return AuthCardButton;
}(serialization_1.SerializableObject));
exports.AuthCardButton = AuthCardButton;
var TokenExchangeResource = /** @class */ (function (_super) {
    __extends(TokenExchangeResource, _super);
    function TokenExchangeResource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TokenExchangeResource.prototype.getSchemaKey = function () {
        return "TokenExchangeResource";
    };
    //#region Schema
    TokenExchangeResource.idProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_4, "id");
    TokenExchangeResource.uriProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_4, "uri");
    TokenExchangeResource.providerIdProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_4, "providerId");
    __decorate([
        (0, serialization_1.property)(TokenExchangeResource.idProperty)
    ], TokenExchangeResource.prototype, "id", void 0);
    __decorate([
        (0, serialization_1.property)(TokenExchangeResource.uriProperty)
    ], TokenExchangeResource.prototype, "uri", void 0);
    __decorate([
        (0, serialization_1.property)(TokenExchangeResource.providerIdProperty)
    ], TokenExchangeResource.prototype, "providerId", void 0);
    return TokenExchangeResource;
}(serialization_1.SerializableObject));
exports.TokenExchangeResource = TokenExchangeResource;
var Authentication = /** @class */ (function (_super) {
    __extends(Authentication, _super);
    function Authentication() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Authentication.prototype.getSchemaKey = function () {
        return "Authentication";
    };
    //#region Schema
    Authentication.textProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_4, "text");
    Authentication.connectionNameProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_4, "connectionName");
    Authentication.buttonsProperty = new serialization_1.SerializableObjectCollectionProperty(serialization_1.Versions.v1_4, "buttons", AuthCardButton);
    Authentication.tokenExchangeResourceProperty = new serialization_1.SerializableObjectProperty(serialization_1.Versions.v1_4, "tokenExchangeResource", TokenExchangeResource, true);
    __decorate([
        (0, serialization_1.property)(Authentication.textProperty)
    ], Authentication.prototype, "text", void 0);
    __decorate([
        (0, serialization_1.property)(Authentication.connectionNameProperty)
    ], Authentication.prototype, "connectionName", void 0);
    __decorate([
        (0, serialization_1.property)(Authentication.buttonsProperty)
    ], Authentication.prototype, "buttons", void 0);
    __decorate([
        (0, serialization_1.property)(Authentication.tokenExchangeResourceProperty)
    ], Authentication.prototype, "tokenExchangeResource", void 0);
    return Authentication;
}(serialization_1.SerializableObject));
exports.Authentication = Authentication;
// @dynamic
var AdaptiveCard = /** @class */ (function (_super) {
    __extends(AdaptiveCard, _super);
    function AdaptiveCard() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.designMode = false;
        return _this;
    }
    Object.defineProperty(AdaptiveCard.prototype, "refresh", {
        get: function () {
            return this.getValue(AdaptiveCard.refreshProperty);
        },
        set: function (value) {
            this.setValue(AdaptiveCard.refreshProperty, value);
            if (value) {
                value.parent = this;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdaptiveCard, "processMarkdown", {
        get: function () {
            throw new Error(strings_1.Strings.errors.processMarkdownEventRemoved());
        },
        set: function (value) {
            throw new Error(strings_1.Strings.errors.processMarkdownEventRemoved());
        },
        enumerable: false,
        configurable: true
    });
    AdaptiveCard.applyMarkdown = function (text) {
        var result = {
            didProcess: false
        };
        if (AdaptiveCard.onProcessMarkdown) {
            AdaptiveCard.onProcessMarkdown(text, result);
        }
        else if (window.markdownit) {
            // Check for markdownit
            var markdownIt = window.markdownit;
            result.outputHtml = markdownIt().render(text);
            result.didProcess = true;
        }
        else {
            console.warn(strings_1.Strings.errors.markdownProcessingNotEnabled);
        }
        return result;
    };
    AdaptiveCard.prototype.isVersionSupported = function () {
        if (this.bypassVersionCheck) {
            return true;
        }
        else {
            var unsupportedVersion = !this.version ||
                !this.version.isValid ||
                (this.maxVersion.major < this.version.major) ||
                (this.maxVersion.major == this.version.major && this.maxVersion.minor < this.version.minor);
            return !unsupportedVersion;
        }
    };
    AdaptiveCard.prototype.getDefaultSerializationContext = function () {
        return new SerializationContext(this.version);
    };
    AdaptiveCard.prototype.getItemsCollectionPropertyName = function () {
        return "body";
    };
    AdaptiveCard.prototype.internalParse = function (source, context) {
        this._fallbackCard = undefined;
        var fallbackElement = context.parseElement(undefined, source["fallback"], !this.isDesignMode());
        if (fallbackElement) {
            this._fallbackCard = new AdaptiveCard();
            this._fallbackCard.addItem(fallbackElement);
        }
        _super.prototype.internalParse.call(this, source, context);
    };
    AdaptiveCard.prototype.internalToJSON = function (target, context) {
        this.setValue(AdaptiveCard.versionProperty, context.targetVersion);
        _super.prototype.internalToJSON.call(this, target, context);
    };
    AdaptiveCard.prototype.internalRender = function () {
        var renderedElement = _super.prototype.internalRender.call(this);
        if (shared_1.GlobalSettings.useAdvancedCardBottomTruncation && renderedElement) {
            // Unlike containers, the root card element should be allowed to
            // be shorter than its content (otherwise the overflow truncation
            // logic would never get triggered)
            renderedElement.style.removeProperty("minHeight");
        }
        return renderedElement;
    };
    AdaptiveCard.prototype.getHasBackground = function () {
        return true;
    };
    AdaptiveCard.prototype.getDefaultPadding = function () {
        return new shared_1.PaddingDefinition(Enums.Spacing.Padding, Enums.Spacing.Padding, Enums.Spacing.Padding, Enums.Spacing.Padding);
    };
    AdaptiveCard.prototype.shouldSerialize = function (context) {
        return true;
    };
    Object.defineProperty(AdaptiveCard.prototype, "renderIfEmpty", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdaptiveCard.prototype, "bypassVersionCheck", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdaptiveCard.prototype, "allowCustomStyle", {
        get: function () {
            return this.hostConfig.adaptiveCard && this.hostConfig.adaptiveCard.allowCustomStyle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AdaptiveCard.prototype, "hasBackground", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    AdaptiveCard.prototype.getJsonTypeName = function () {
        return "AdaptiveCard";
    };
    AdaptiveCard.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (this.getValue(CardElement.typeNameProperty) !== "AdaptiveCard") {
            context.addFailure(this, Enums.ValidationEvent.MissingCardType, strings_1.Strings.errors.invalidCardType());
        }
        if (!this.bypassVersionCheck && !this.version) {
            context.addFailure(this, Enums.ValidationEvent.PropertyCantBeNull, strings_1.Strings.errors.propertyMustBeSet("version"));
        }
        else if (!this.isVersionSupported()) {
            context.addFailure(this, Enums.ValidationEvent.UnsupportedCardVersion, strings_1.Strings.errors.unsupportedCardVersion(this.version.toString(), this.maxVersion.toString()));
        }
    };
    AdaptiveCard.prototype.render = function (target) {
        var renderedCard;
        if (this.shouldFallback() && this._fallbackCard) {
            this._fallbackCard.hostConfig = this.hostConfig;
            renderedCard = this._fallbackCard.render();
        }
        else {
            renderedCard = _super.prototype.render.call(this);
            if (renderedCard) {
                renderedCard.classList.add(this.hostConfig.makeCssClassName("ac-adaptiveCard"));
                // Having a tabIndex on the root container for a card can mess up accessibility in some scenarios.
                // However, we've shipped this behavior before, and so can't just turn it off in a point release. For
                // now, to unblock accessibility scenarios for our customers, we've got an option to turn it off. In a
                // future release, we should strongly consider flipping the default such that we *don't* emit a tabIndex
                // by default.
                if (shared_1.GlobalSettings.setTabIndexAtCardRoot) {
                    renderedCard.tabIndex = 0;
                }
                if (this.speak) {
                    renderedCard.setAttribute("aria-label", this.speak);
                }
            }
        }
        if (target) {
            Utils.appendChild(target, renderedCard);
            this.updateLayout();
        }
        return renderedCard;
    };
    AdaptiveCard.prototype.updateLayout = function (processChildren) {
        if (processChildren === void 0) { processChildren = true; }
        _super.prototype.updateLayout.call(this, processChildren);
        if (shared_1.GlobalSettings.useAdvancedCardBottomTruncation && this.isDisplayed()) {
            var padding = this.hostConfig.getEffectiveSpacing(Enums.Spacing.Default);
            this['handleOverflow'](this.renderedElement.offsetHeight - padding);
        }
    };
    AdaptiveCard.prototype.shouldFallback = function () {
        return _super.prototype.shouldFallback.call(this) || !this.isVersionSupported();
    };
    Object.defineProperty(AdaptiveCard.prototype, "hasVisibleSeparator", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    AdaptiveCard.schemaUrl = "http://adaptivecards.io/schemas/adaptive-card.json";
    //#region Schema
    AdaptiveCard.$schemaProperty = new serialization_1.CustomProperty(serialization_1.Versions.v1_0, "$schema", function (sender, property, source, context) {
        return AdaptiveCard.schemaUrl;
    }, function (sender, property, target, value, context) {
        context.serializeValue(target, property.name, AdaptiveCard.schemaUrl);
    });
    AdaptiveCard.versionProperty = new serialization_1.CustomProperty(serialization_1.Versions.v1_0, "version", function (sender, property, source, context) {
        var version = serialization_1.Version.parse(source[property.name], context);
        if (version === undefined) {
            version = serialization_1.Versions.latest;
            context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidCardVersion(version.toString()));
        }
        return version;
    }, function (sender, property, target, value, context) {
        if (value !== undefined) {
            context.serializeValue(target, property.name, value.toString());
        }
    }, serialization_1.Versions.v1_0);
    AdaptiveCard.fallbackTextProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "fallbackText");
    AdaptiveCard.speakProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "speak");
    AdaptiveCard.refreshProperty = new serialization_1.SerializableObjectProperty(serialization_1.Versions.v1_4, "refresh", RefreshDefinition, true);
    AdaptiveCard.authenticationProperty = new serialization_1.SerializableObjectProperty(serialization_1.Versions.v1_4, "authentication", Authentication, true);
    __decorate([
        (0, serialization_1.property)(AdaptiveCard.versionProperty)
    ], AdaptiveCard.prototype, "version", void 0);
    __decorate([
        (0, serialization_1.property)(AdaptiveCard.fallbackTextProperty)
    ], AdaptiveCard.prototype, "fallbackText", void 0);
    __decorate([
        (0, serialization_1.property)(AdaptiveCard.speakProperty)
    ], AdaptiveCard.prototype, "speak", void 0);
    __decorate([
        (0, serialization_1.property)(AdaptiveCard.refreshProperty)
    ], AdaptiveCard.prototype, "refresh", null);
    __decorate([
        (0, serialization_1.property)(AdaptiveCard.authenticationProperty)
    ], AdaptiveCard.prototype, "authentication", void 0);
    return AdaptiveCard;
}(ContainerWithActions));
exports.AdaptiveCard = AdaptiveCard;
var InlineAdaptiveCard = /** @class */ (function (_super) {
    __extends(InlineAdaptiveCard, _super);
    function InlineAdaptiveCard() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.suppressStyle = false;
        return _this;
    }
    InlineAdaptiveCard.prototype.getSchemaKey = function () {
        return "InlineAdaptiveCard";
    };
    InlineAdaptiveCard.prototype.populateSchema = function (schema) {
        _super.prototype.populateSchema.call(this, schema);
        schema.remove(AdaptiveCard.$schemaProperty, AdaptiveCard.versionProperty);
    };
    //#endregion
    InlineAdaptiveCard.prototype.getDefaultPadding = function () {
        return new shared_1.PaddingDefinition(this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding, Enums.Spacing.Padding, this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding, Enums.Spacing.Padding);
    };
    Object.defineProperty(InlineAdaptiveCard.prototype, "bypassVersionCheck", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InlineAdaptiveCard.prototype, "defaultStyle", {
        get: function () {
            if (this.suppressStyle) {
                return Enums.ContainerStyle.Default;
            }
            else {
                return this.hostConfig.actions.showCard.style ? this.hostConfig.actions.showCard.style : Enums.ContainerStyle.Emphasis;
            }
        },
        enumerable: false,
        configurable: true
    });
    InlineAdaptiveCard.prototype.render = function (target) {
        var renderedCard = _super.prototype.render.call(this, target);
        if (renderedCard) {
            renderedCard.setAttribute("aria-live", "polite");
            renderedCard.removeAttribute("tabindex");
        }
        return renderedCard;
    };
    return InlineAdaptiveCard;
}(AdaptiveCard));
var SerializationContext = /** @class */ (function (_super) {
    __extends(SerializationContext, _super);
    function SerializationContext() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SerializationContext.prototype.internalParseCardObject = function (parent, source, forbiddenTypeNames, allowFallback, createInstanceCallback, logParseEvent) {
        var result = undefined;
        if (source && typeof source === "object") {
            var typeName = Utils.parseString(source["type"]);
            if (typeName && forbiddenTypeNames.indexOf(typeName) >= 0) {
                logParseEvent(typeName, Enums.TypeErrorType.ForbiddenType);
            }
            else {
                var tryToFallback = false;
                result = createInstanceCallback(typeName);
                if (!result) {
                    tryToFallback = shared_1.GlobalSettings.enableFallback && allowFallback;
                    logParseEvent(typeName, Enums.TypeErrorType.UnknownType);
                }
                else {
                    result.setParent(parent);
                    result.parse(source, this);
                    tryToFallback = shared_1.GlobalSettings.enableFallback && allowFallback && result.shouldFallback();
                }
                if (tryToFallback) {
                    var fallback = source["fallback"];
                    if (!fallback && parent) {
                        parent.setShouldFallback(true);
                    }
                    if (typeof fallback === "string" && fallback.toLowerCase() === "drop") {
                        result = undefined;
                    }
                    else if (typeof fallback === "object") {
                        result = this.internalParseCardObject(parent, fallback, forbiddenTypeNames, true, createInstanceCallback, logParseEvent);
                    }
                }
            }
        }
        return result;
    };
    SerializationContext.prototype.cardObjectParsed = function (o, source) {
        if (o instanceof Action && this.onParseAction) {
            this.onParseAction(o, source, this);
        }
        else if (o instanceof CardElement && this.onParseElement) {
            this.onParseElement(o, source, this);
        }
    };
    SerializationContext.prototype.shouldSerialize = function (o) {
        if (o instanceof Action) {
            return this.actionRegistry.findByName(o.getJsonTypeName()) !== undefined;
        }
        else if (o instanceof CardElement) {
            return this.elementRegistry.findByName(o.getJsonTypeName()) !== undefined;
        }
        else {
            return true;
        }
    };
    SerializationContext.prototype.parseCardObject = function (parent, source, forbiddenTypeNames, allowFallback, createInstanceCallback, logParseEvent) {
        var result = this.internalParseCardObject(parent, source, forbiddenTypeNames, allowFallback, createInstanceCallback, logParseEvent);
        if (result !== undefined) {
            this.cardObjectParsed(result, source);
        }
        return result;
    };
    SerializationContext.prototype.parseElement = function (parent, source, allowFallback) {
        var _this = this;
        return this.parseCardObject(parent, source, [], // Forbidden types not supported for elements for now
        allowFallback, function (typeName) {
            return _this.elementRegistry.createInstance(typeName, _this.targetVersion);
        }, function (typeName, errorType) {
            if (errorType === Enums.TypeErrorType.UnknownType) {
                _this.logParseEvent(undefined, Enums.ValidationEvent.UnknownElementType, strings_1.Strings.errors.unknownElementType(typeName));
            }
            else {
                _this.logParseEvent(undefined, Enums.ValidationEvent.ElementTypeNotAllowed, strings_1.Strings.errors.elementTypeNotAllowed(typeName));
            }
        });
    };
    SerializationContext.prototype.parseAction = function (parent, source, forbiddenActionTypes, allowFallback) {
        var _this = this;
        return this.parseCardObject(parent, source, forbiddenActionTypes, allowFallback, function (typeName) {
            return _this.actionRegistry.createInstance(typeName, _this.targetVersion);
        }, function (typeName, errorType) {
            if (errorType == Enums.TypeErrorType.UnknownType) {
                _this.logParseEvent(undefined, Enums.ValidationEvent.UnknownActionType, strings_1.Strings.errors.unknownActionType(typeName));
            }
            else {
                _this.logParseEvent(undefined, Enums.ValidationEvent.ActionTypeNotAllowed, strings_1.Strings.errors.actionTypeNotAllowed(typeName));
            }
        });
    };
    Object.defineProperty(SerializationContext.prototype, "elementRegistry", {
        get: function () {
            return this._elementRegistry ? this._elementRegistry : registry_1.GlobalRegistry.elements;
        },
        enumerable: false,
        configurable: true
    });
    // Not using a property setter here because the setter should accept "undefined"
    // whereas the getter should never return undefined.
    SerializationContext.prototype.setElementRegistry = function (value) {
        this._elementRegistry = value;
    };
    Object.defineProperty(SerializationContext.prototype, "actionRegistry", {
        get: function () {
            return this._actionRegistry ? this._actionRegistry : registry_1.GlobalRegistry.actions;
        },
        enumerable: false,
        configurable: true
    });
    // Not using a property setter here because the setter should accept "undefined"
    // whereas the getter should never return undefined.
    SerializationContext.prototype.setActionRegistry = function (value) {
        this._actionRegistry = value;
    };
    return SerializationContext;
}(serialization_1.BaseSerializationContext));
exports.SerializationContext = SerializationContext;
registry_1.GlobalRegistry.defaultElements.register("Container", Container);
registry_1.GlobalRegistry.defaultElements.register("TextBlock", TextBlock);
registry_1.GlobalRegistry.defaultElements.register("RichTextBlock", RichTextBlock, serialization_1.Versions.v1_2);
registry_1.GlobalRegistry.defaultElements.register("TextRun", TextRun, serialization_1.Versions.v1_2);
registry_1.GlobalRegistry.defaultElements.register("Image", Image);
registry_1.GlobalRegistry.defaultElements.register("ImageSet", ImageSet);
registry_1.GlobalRegistry.defaultElements.register("Media", Media, serialization_1.Versions.v1_1);
registry_1.GlobalRegistry.defaultElements.register("FactSet", FactSet);
registry_1.GlobalRegistry.defaultElements.register("ColumnSet", ColumnSet);
registry_1.GlobalRegistry.defaultElements.register("ActionSet", ActionSet, serialization_1.Versions.v1_2);
registry_1.GlobalRegistry.defaultElements.register("Input.Text", TextInput);
registry_1.GlobalRegistry.defaultElements.register("Input.Date", DateInput);
registry_1.GlobalRegistry.defaultElements.register("Input.Time", TimeInput);
registry_1.GlobalRegistry.defaultElements.register("Input.Number", NumberInput);
registry_1.GlobalRegistry.defaultElements.register("Input.ChoiceSet", ChoiceSetInput);
registry_1.GlobalRegistry.defaultElements.register("Input.Toggle", ToggleInput);
registry_1.GlobalRegistry.defaultActions.register(OpenUrlAction.JsonTypeName, OpenUrlAction);
registry_1.GlobalRegistry.defaultActions.register(SubmitAction.JsonTypeName, SubmitAction);
registry_1.GlobalRegistry.defaultActions.register(ShowCardAction.JsonTypeName, ShowCardAction);
registry_1.GlobalRegistry.defaultActions.register(ToggleVisibilityAction.JsonTypeName, ToggleVisibilityAction, serialization_1.Versions.v1_2);
registry_1.GlobalRegistry.defaultActions.register(ExecuteAction.JsonTypeName, ExecuteAction, serialization_1.Versions.v1_4);


/***/ }),

/***/ "./src/card-object.ts":
/*!****************************!*\
  !*** ./src/card-object.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CardObject = exports.ValidationResults = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Enums = __webpack_require__(/*! ./enums */ "./src/enums.ts");
var strings_1 = __webpack_require__(/*! ./strings */ "./src/strings.ts");
var shared_1 = __webpack_require__(/*! ./shared */ "./src/shared.ts");
var host_capabilities_1 = __webpack_require__(/*! ./host-capabilities */ "./src/host-capabilities.ts");
var serialization_1 = __webpack_require__(/*! ./serialization */ "./src/serialization.ts");
var ValidationResults = /** @class */ (function () {
    function ValidationResults() {
        this.allIds = {};
        this.validationEvents = [];
    }
    ValidationResults.prototype.addFailure = function (cardObject, event, message) {
        this.validationEvents.push({
            phase: Enums.ValidationPhase.Validation,
            source: cardObject,
            event: event,
            message: message
        });
    };
    return ValidationResults;
}());
exports.ValidationResults = ValidationResults;
var CardObject = /** @class */ (function (_super) {
    __extends(CardObject, _super);
    function CardObject() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        //#endregion
        _this._shouldFallback = false;
        return _this;
    }
    CardObject.prototype.getSchemaKey = function () {
        return this.getJsonTypeName();
    };
    Object.defineProperty(CardObject.prototype, "requires", {
        get: function () {
            return this.getValue(CardObject.requiresProperty);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Checks if this CardObject contains the given DOM Node.
     * @param node The DOM Node to look for.
     * @returns `true` if the DOM Node was found, `false` otherwise.
     */
    CardObject.prototype.contains = function (node) {
        if (this._renderedElement) {
            return this._renderedElement.contains(node);
        }
        return false;
    };
    CardObject.prototype.preProcessPropertyValue = function (property, propertyValue) {
        var value = propertyValue === undefined ? this.getValue(property) : propertyValue;
        if (shared_1.GlobalSettings.allowPreProcessingPropertyValues) {
            var currentObject = this;
            while (currentObject && !currentObject.onPreProcessPropertyValue) {
                currentObject = currentObject.parent;
            }
            if (currentObject && currentObject.onPreProcessPropertyValue) {
                return currentObject.onPreProcessPropertyValue(this, property, value);
            }
        }
        return value;
    };
    CardObject.prototype.setParent = function (value) {
        this._parent = value;
    };
    CardObject.prototype.setShouldFallback = function (value) {
        this._shouldFallback = value;
    };
    CardObject.prototype.shouldFallback = function () {
        return this._shouldFallback || !this.requires.areAllMet(this.hostConfig.hostCapabilities);
    };
    CardObject.prototype.getRootObject = function () {
        var rootObject = this;
        while (rootObject.parent) {
            rootObject = rootObject.parent;
        }
        return rootObject;
    };
    CardObject.prototype.internalValidateProperties = function (context) {
        if (this.id) {
            if (context.allIds.hasOwnProperty(this.id)) {
                if (context.allIds[this.id] == 1) {
                    context.addFailure(this, Enums.ValidationEvent.DuplicateId, strings_1.Strings.errors.duplicateId(this.id));
                }
                context.allIds[this.id] += 1;
            }
            else {
                context.allIds[this.id] = 1;
            }
        }
    };
    CardObject.prototype.validateProperties = function () {
        var result = new ValidationResults();
        this.internalValidateProperties(result);
        return result;
    };
    /**
     * Recursively searches this CardObject and any children to find the
     * innermost CardObject that owns the given DOM Node.
     *
     * @param node The DOM Node to look for.
     *
     * @returns The owner of the given DOM Node, or `undefined` if no owner was found.
     */
    CardObject.prototype.findDOMNodeOwner = function (node) {
        // default implementation for CardObjects with no associated children
        return this.contains(node) ? this : undefined;
    };
    Object.defineProperty(CardObject.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CardObject.prototype, "renderedElement", {
        get: function () {
            return this._renderedElement;
        },
        enumerable: false,
        configurable: true
    });
    CardObject.typeNameProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "type", undefined, undefined, undefined, function (sender) {
        return sender.getJsonTypeName();
    });
    CardObject.idProperty = new serialization_1.StringProperty(serialization_1.Versions.v1_0, "id");
    CardObject.requiresProperty = new serialization_1.SerializableObjectProperty(serialization_1.Versions.v1_2, "requires", host_capabilities_1.HostCapabilities, false, new host_capabilities_1.HostCapabilities());
    __decorate([
        (0, serialization_1.property)(CardObject.idProperty)
    ], CardObject.prototype, "id", void 0);
    __decorate([
        (0, serialization_1.property)(CardObject.requiresProperty)
    ], CardObject.prototype, "requires", null);
    return CardObject;
}(serialization_1.SerializableObject));
exports.CardObject = CardObject;


/***/ }),

/***/ "./src/channel-adapter.ts":
/*!********************************!*\
  !*** ./src/channel-adapter.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChannelAdapter = void 0;
var ChannelAdapter = /** @class */ (function () {
    function ChannelAdapter() {
    }
    return ChannelAdapter;
}());
exports.ChannelAdapter = ChannelAdapter;


/***/ }),

/***/ "./src/controls/collection.ts":
/*!************************************!*\
  !*** ./src/controls/collection.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Collection = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Collection = /** @class */ (function () {
    function Collection() {
        this._items = [];
    }
    Collection.prototype.get = function (index) {
        return this._items[index];
    };
    Collection.prototype.add = function (item) {
        this._items.push(item);
        if (this.onItemAdded) {
            this.onItemAdded(item);
        }
    };
    Collection.prototype.remove = function (item) {
        var i = this._items.indexOf(item);
        if (i >= 0) {
            this._items = this._items.splice(i, 1);
            if (this.onItemRemoved) {
                this.onItemRemoved(item);
            }
        }
    };
    Collection.prototype.indexOf = function (item) {
        return this._items.indexOf(item);
    };
    Object.defineProperty(Collection.prototype, "length", {
        get: function () {
            return this._items.length;
        },
        enumerable: false,
        configurable: true
    });
    return Collection;
}());
exports.Collection = Collection;


/***/ }),

/***/ "./src/controls/constants.ts":
/*!***********************************!*\
  !*** ./src/controls/constants.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Constants = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Constants = /** @class */ (function () {
    function Constants() {
    }
    Constants.keys = {
        tab: "Tab",
        enter: "Enter",
        escape: "Escape",
        space: " ",
        up: "ArrowUp",
        down: "ArrowDown",
        delete: "Delete"
    };
    return Constants;
}());
exports.Constants = Constants;


/***/ }),

/***/ "./src/controls/index.ts":
/*!*******************************!*\
  !*** ./src/controls/index.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./menu-item */ "./src/controls/menu-item.ts"), exports);
__exportStar(__webpack_require__(/*! ./popup-menu */ "./src/controls/popup-menu.ts"), exports);


/***/ }),

/***/ "./src/controls/menu-item.ts":
/*!***********************************!*\
  !*** ./src/controls/menu-item.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MenuItem = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var host_config_1 = __webpack_require__(/*! ../host-config */ "./src/host-config.ts");
var constants_1 = __webpack_require__(/*! ./constants */ "./src/controls/constants.ts");
var MenuItem = /** @class */ (function () {
    function MenuItem(key, value) {
        this._isEnabled = true;
        this.key = key;
        this._value = value;
    }
    MenuItem.prototype.click = function () {
        if (this.isEnabled && this.onClick) {
            this.onClick(this);
        }
    };
    MenuItem.prototype.updateCssClasses = function () {
        if (this._element) {
            var effectiveHostConfig = this._hostConfig ? this._hostConfig : host_config_1.defaultHostConfig;
            this._element.className = effectiveHostConfig.makeCssClassName("ac-ctrl");
            this._element.classList.add(effectiveHostConfig.makeCssClassName(this.isEnabled ? "ac-ctrl-dropdown-item" : "ac-ctrl-dropdown-item-disabled"));
            if (!this.isEnabled) {
                this._element.classList.add(effectiveHostConfig.makeCssClassName("ac-disabled"));
            }
        }
    };
    MenuItem.prototype.toString = function () {
        return this.value;
    };
    MenuItem.prototype.render = function (hostConfig) {
        var _this = this;
        this._hostConfig = hostConfig;
        if (!this._element) {
            this._element = document.createElement("span");
            this._element.innerText = this.value;
            this._element.setAttribute("role", "menuitem");
            if (!this.isEnabled) {
                this._element.setAttribute("aria-disabled", "true");
            }
            this._element.setAttribute("aria-selected", "false");
            this._element.onmouseup = function (e) { _this.click(); };
            this._element.onkeydown = function (e) {
                if (e.key === constants_1.Constants.keys.enter) {
                    e.cancelBubble = true;
                    _this.click();
                }
            };
            this.updateCssClasses();
        }
        return this._element;
    };
    Object.defineProperty(MenuItem.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (newValue) {
            this._value = newValue;
            if (this._element) {
                this._element.innerText = newValue;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "isEnabled", {
        get: function () {
            return this._isEnabled;
        },
        set: function (value) {
            if (this._isEnabled !== value) {
                this._isEnabled = value;
                this.updateCssClasses();
            }
        },
        enumerable: false,
        configurable: true
    });
    return MenuItem;
}());
exports.MenuItem = MenuItem;


/***/ }),

/***/ "./src/controls/popup-control.ts":
/*!***************************************!*\
  !*** ./src/controls/popup-control.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopupControl = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var constants_1 = __webpack_require__(/*! ./constants */ "./src/controls/constants.ts");
var Utils = __webpack_require__(/*! ../utils */ "./src/utils.ts");
var host_config_1 = __webpack_require__(/*! ../host-config */ "./src/host-config.ts");
var PopupControl = /** @class */ (function () {
    function PopupControl() {
        this._isOpen = false;
    }
    PopupControl.prototype.keyDown = function (e) {
        switch (e.key) {
            case constants_1.Constants.keys.escape:
                this.closePopup(true);
                break;
        }
    };
    PopupControl.prototype.render = function (rootElementBounds) {
        var _this = this;
        var element = document.createElement("div");
        element.tabIndex = 0;
        element.className = this.hostConfig.makeCssClassName("ac-ctrl", "ac-ctrl-popup-container");
        element.setAttribute("role", "dialog");
        element.setAttribute("aria-modal", "true");
        element.onkeydown = function (e) {
            _this.keyDown(e);
            return !e.cancelBubble;
        };
        element.appendChild(this.renderContent());
        return element;
    };
    PopupControl.prototype.focus = function () {
        if (this._popupElement) {
            this._popupElement.firstElementChild.focus();
        }
    };
    PopupControl.prototype.popup = function (rootElement) {
        var _a, _b, _c, _d, _e;
        var _this = this;
        if (!this._isOpen) {
            this._overlayElement = document.createElement("div");
            this._overlayElement.className = this.hostConfig.makeCssClassName("ac-ctrl-overlay");
            this._overlayElement.tabIndex = 0;
            this._overlayElement.style.width = document.documentElement.scrollWidth + "px";
            this._overlayElement.style.height = document.documentElement.scrollHeight + "px";
            this._overlayElement.onfocus = function (e) { _this.closePopup(true); };
            document.body.appendChild(this._overlayElement);
            var rootElementBounds = rootElement.getBoundingClientRect();
            this._popupElement = this.render(rootElementBounds);
            (_a = this._popupElement.classList).remove.apply(_a, this.hostConfig.makeCssClassNames("ac-ctrl-slide", "ac-ctrl-slideLeftToRight", "ac-ctrl-slideRightToLeft", "ac-ctrl-slideTopToBottom", "ac-ctrl-slideRightToLeft"));
            window.addEventListener("resize", function (e) { _this.closePopup(true); });
            var rootElementLabel = rootElement.getAttribute("aria-label");
            if (rootElementLabel) {
                this._popupElement.setAttribute("aria-label", rootElementLabel);
            }
            this._overlayElement.appendChild(this._popupElement);
            var popupElementBounds = this._popupElement.getBoundingClientRect();
            var availableSpaceBelow = window.innerHeight - rootElementBounds.bottom;
            var availableSpaceAbove = rootElementBounds.top;
            var availableSpaceRight = window.innerWidth - rootElementBounds.left;
            var availableSpaceRight = window.innerWidth - rootElementBounds.right;
            var availableSpaceLeft = rootElementBounds.left;
            var left = rootElementBounds.left + Utils.getScrollX();
            var top;
            if (availableSpaceAbove < popupElementBounds.height && availableSpaceBelow < popupElementBounds.height) {
                // Not enough space above or below root element
                var actualPopupHeight = Math.min(popupElementBounds.height, window.innerHeight);
                this._popupElement.style.maxHeight = actualPopupHeight + "px";
                if (actualPopupHeight < popupElementBounds.height) {
                    top = Utils.getScrollY();
                }
                else {
                    top = Utils.getScrollY() + rootElementBounds.top + (rootElementBounds.height - actualPopupHeight) / 2;
                }
                if (availableSpaceLeft < popupElementBounds.width && availableSpaceRight < popupElementBounds.width) {
                    // Not enough space left or right of root element
                    var actualPopupWidth = Math.min(popupElementBounds.width, window.innerWidth);
                    this._popupElement.style.maxWidth = actualPopupWidth + "px";
                    if (actualPopupWidth < popupElementBounds.width) {
                        left = Utils.getScrollX();
                    }
                    else {
                        left = Utils.getScrollX() + rootElementBounds.left + (rootElementBounds.width - actualPopupWidth) / 2;
                    }
                }
                else {
                    // Enough space on the left or right of the root element
                    if (availableSpaceRight >= popupElementBounds.width) {
                        left = Utils.getScrollX() + rootElementBounds.right;
                        (_b = this._popupElement.classList).add.apply(_b, this.hostConfig.makeCssClassNames("ac-ctrl-slide", "ac-ctrl-slideLeftToRight"));
                    }
                    else {
                        left = Utils.getScrollX() + rootElementBounds.left - popupElementBounds.width;
                        (_c = this._popupElement.classList).add.apply(_c, this.hostConfig.makeCssClassNames("ac-ctrl-slide", "ac-ctrl-slideRightToLeft"));
                    }
                }
            }
            else {
                // Enough space above or below root element
                if (availableSpaceBelow >= popupElementBounds.height) {
                    top = Utils.getScrollY() + rootElementBounds.bottom;
                    (_d = this._popupElement.classList).add.apply(_d, this.hostConfig.makeCssClassNames("ac-ctrl-slide", "ac-ctrl-slideTopToBottom"));
                }
                else {
                    top = Utils.getScrollY() + rootElementBounds.top - popupElementBounds.height;
                    (_e = this._popupElement.classList).add.apply(_e, this.hostConfig.makeCssClassNames("ac-ctrl-slide", "ac-ctrl-slideBottomToTop"));
                }
                if (availableSpaceRight < popupElementBounds.width) {
                    left = Utils.getScrollX() + rootElementBounds.right - popupElementBounds.width;
                }
            }
            this._popupElement.style.left = left + "px";
            this._popupElement.style.top = top + "px";
            this._popupElement.focus();
            this._isOpen = true;
        }
    };
    PopupControl.prototype.closePopup = function (wasCancelled) {
        if (this._isOpen) {
            document.body.removeChild(this._overlayElement);
            this._isOpen = false;
            if (this.onClose) {
                this.onClose(this, wasCancelled);
            }
        }
    };
    Object.defineProperty(PopupControl.prototype, "hostConfig", {
        get: function () {
            return this._hostConfig ? this._hostConfig : host_config_1.defaultHostConfig;
        },
        set: function (value) {
            this._hostConfig = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupControl.prototype, "isOpen", {
        get: function () {
            return this._isOpen;
        },
        enumerable: false,
        configurable: true
    });
    return PopupControl;
}());
exports.PopupControl = PopupControl;


/***/ }),

/***/ "./src/controls/popup-menu.ts":
/*!************************************!*\
  !*** ./src/controls/popup-menu.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopupMenu = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var constants_1 = __webpack_require__(/*! ./constants */ "./src/controls/constants.ts");
var collection_1 = __webpack_require__(/*! ./collection */ "./src/controls/collection.ts");
var popup_control_1 = __webpack_require__(/*! ./popup-control */ "./src/controls/popup-control.ts");
var PopupMenu = /** @class */ (function (_super) {
    __extends(PopupMenu, _super);
    function PopupMenu() {
        var _this = _super.call(this) || this;
        _this._items = new collection_1.Collection();
        _this._renderedItems = [];
        _this._selectedIndex = -1;
        return _this;
    }
    PopupMenu.prototype.renderContent = function () {
        var element = document.createElement("div");
        element.className = this.hostConfig.makeCssClassName("ac-ctrl ac-popup");
        element.setAttribute("role", "listbox");
        for (var i = 0; i < this._items.length; i++) {
            var renderedItem = this._items.get(i).render(this.hostConfig);
            renderedItem.tabIndex = 0;
            element.appendChild(renderedItem);
            if (i == this.selectedIndex) {
                renderedItem.focus();
            }
            this._renderedItems.push(renderedItem);
        }
        return element;
    };
    PopupMenu.prototype.keyDown = function (e) {
        _super.prototype.keyDown.call(this, e);
        var selectedItemIndex = this._selectedIndex;
        switch (e.key) {
            case constants_1.Constants.keys.tab:
                this.closePopup(true);
                break;
            /*
            case Constants.keys.enter:
                if (this.selectedIndex >= 0) {
                    this.selectedIndex = this.selectedIndex;

                    this.close();
                }

                break;
            */
            case constants_1.Constants.keys.up:
                if (selectedItemIndex <= 0) {
                    selectedItemIndex = this._renderedItems.length - 1;
                }
                else {
                    selectedItemIndex--;
                    if (selectedItemIndex < 0) {
                        selectedItemIndex = this._renderedItems.length - 1;
                    }
                }
                this.selectedIndex = selectedItemIndex;
                e.cancelBubble = true;
                break;
            case constants_1.Constants.keys.down:
                if (selectedItemIndex < 0) {
                    selectedItemIndex = 0;
                }
                else {
                    selectedItemIndex++;
                    if (selectedItemIndex >= this._renderedItems.length) {
                        selectedItemIndex = 0;
                    }
                }
                this.selectedIndex = selectedItemIndex;
                e.cancelBubble = true;
                break;
        }
    };
    Object.defineProperty(PopupMenu.prototype, "items", {
        get: function () {
            return this._items;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupMenu.prototype, "selectedIndex", {
        get: function () {
            return this._selectedIndex;
        },
        set: function (index) {
            if (index >= 0 && index < this._renderedItems.length) {
                this._renderedItems[index].focus();
                this._selectedIndex = index;
            }
        },
        enumerable: false,
        configurable: true
    });
    return PopupMenu;
}(popup_control_1.PopupControl));
exports.PopupMenu = PopupMenu;


/***/ }),

/***/ "./src/enums.ts":
/*!**********************!*\
  !*** ./src/enums.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {


// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LogLevel = exports.RefreshMode = exports.TypeErrorType = exports.ContainerFitStatus = exports.ValidationEvent = exports.ValidationPhase = exports.ContainerStyle = exports.InputTextStyle = exports.ActionIconPlacement = exports.FillMode = exports.Orientation = exports.ShowCardActionMode = exports.ImageStyle = exports.ActionAlignment = exports.VerticalAlignment = exports.HorizontalAlignment = exports.TextColor = exports.Spacing = exports.FontType = exports.TextWeight = exports.TextSize = exports.SizeUnit = exports.ImageSize = exports.Size = exports.ActionMode = exports.ActionStyle = void 0;
// Note the "weird" way these readonly fields are declared is to work around
// a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
// and adopt this syntax for all other static readonly fields.
var ActionStyle = /** @class */ (function () {
    function ActionStyle() {
    }
    ActionStyle.Default = "default";
    ActionStyle.Positive = "positive";
    ActionStyle.Destructive = "destructive";
    return ActionStyle;
}());
exports.ActionStyle = ActionStyle;
var ActionMode = /** @class */ (function () {
    function ActionMode() {
    }
    ActionMode.Primary = "primary";
    ActionMode.Secondary = "secondary";
    return ActionMode;
}());
exports.ActionMode = ActionMode;
var Size;
(function (Size) {
    Size[Size["Auto"] = 0] = "Auto";
    Size[Size["Stretch"] = 1] = "Stretch";
    Size[Size["Small"] = 2] = "Small";
    Size[Size["Medium"] = 3] = "Medium";
    Size[Size["Large"] = 4] = "Large";
})(Size = exports.Size || (exports.Size = {}));
var ImageSize;
(function (ImageSize) {
    ImageSize[ImageSize["Small"] = 0] = "Small";
    ImageSize[ImageSize["Medium"] = 1] = "Medium";
    ImageSize[ImageSize["Large"] = 2] = "Large";
})(ImageSize = exports.ImageSize || (exports.ImageSize = {}));
var SizeUnit;
(function (SizeUnit) {
    SizeUnit[SizeUnit["Weight"] = 0] = "Weight";
    SizeUnit[SizeUnit["Pixel"] = 1] = "Pixel";
})(SizeUnit = exports.SizeUnit || (exports.SizeUnit = {}));
var TextSize;
(function (TextSize) {
    TextSize[TextSize["Small"] = 0] = "Small";
    TextSize[TextSize["Default"] = 1] = "Default";
    TextSize[TextSize["Medium"] = 2] = "Medium";
    TextSize[TextSize["Large"] = 3] = "Large";
    TextSize[TextSize["ExtraLarge"] = 4] = "ExtraLarge";
})(TextSize = exports.TextSize || (exports.TextSize = {}));
var TextWeight;
(function (TextWeight) {
    TextWeight[TextWeight["Lighter"] = 0] = "Lighter";
    TextWeight[TextWeight["Default"] = 1] = "Default";
    TextWeight[TextWeight["Bolder"] = 2] = "Bolder";
})(TextWeight = exports.TextWeight || (exports.TextWeight = {}));
var FontType;
(function (FontType) {
    FontType[FontType["Default"] = 0] = "Default";
    FontType[FontType["Monospace"] = 1] = "Monospace";
})(FontType = exports.FontType || (exports.FontType = {}));
var Spacing;
(function (Spacing) {
    Spacing[Spacing["None"] = 0] = "None";
    Spacing[Spacing["Small"] = 1] = "Small";
    Spacing[Spacing["Default"] = 2] = "Default";
    Spacing[Spacing["Medium"] = 3] = "Medium";
    Spacing[Spacing["Large"] = 4] = "Large";
    Spacing[Spacing["ExtraLarge"] = 5] = "ExtraLarge";
    Spacing[Spacing["Padding"] = 6] = "Padding";
})(Spacing = exports.Spacing || (exports.Spacing = {}));
var TextColor;
(function (TextColor) {
    TextColor[TextColor["Default"] = 0] = "Default";
    TextColor[TextColor["Dark"] = 1] = "Dark";
    TextColor[TextColor["Light"] = 2] = "Light";
    TextColor[TextColor["Accent"] = 3] = "Accent";
    TextColor[TextColor["Good"] = 4] = "Good";
    TextColor[TextColor["Warning"] = 5] = "Warning";
    TextColor[TextColor["Attention"] = 6] = "Attention";
})(TextColor = exports.TextColor || (exports.TextColor = {}));
var HorizontalAlignment;
(function (HorizontalAlignment) {
    HorizontalAlignment[HorizontalAlignment["Left"] = 0] = "Left";
    HorizontalAlignment[HorizontalAlignment["Center"] = 1] = "Center";
    HorizontalAlignment[HorizontalAlignment["Right"] = 2] = "Right";
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
var VerticalAlignment;
(function (VerticalAlignment) {
    VerticalAlignment[VerticalAlignment["Top"] = 0] = "Top";
    VerticalAlignment[VerticalAlignment["Center"] = 1] = "Center";
    VerticalAlignment[VerticalAlignment["Bottom"] = 2] = "Bottom";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
var ActionAlignment;
(function (ActionAlignment) {
    ActionAlignment[ActionAlignment["Left"] = 0] = "Left";
    ActionAlignment[ActionAlignment["Center"] = 1] = "Center";
    ActionAlignment[ActionAlignment["Right"] = 2] = "Right";
    ActionAlignment[ActionAlignment["Stretch"] = 3] = "Stretch";
})(ActionAlignment = exports.ActionAlignment || (exports.ActionAlignment = {}));
var ImageStyle;
(function (ImageStyle) {
    ImageStyle[ImageStyle["Default"] = 0] = "Default";
    ImageStyle[ImageStyle["Person"] = 1] = "Person";
})(ImageStyle = exports.ImageStyle || (exports.ImageStyle = {}));
var ShowCardActionMode;
(function (ShowCardActionMode) {
    ShowCardActionMode[ShowCardActionMode["Inline"] = 0] = "Inline";
    ShowCardActionMode[ShowCardActionMode["Popup"] = 1] = "Popup";
})(ShowCardActionMode = exports.ShowCardActionMode || (exports.ShowCardActionMode = {}));
var Orientation;
(function (Orientation) {
    Orientation[Orientation["Horizontal"] = 0] = "Horizontal";
    Orientation[Orientation["Vertical"] = 1] = "Vertical";
})(Orientation = exports.Orientation || (exports.Orientation = {}));
var FillMode;
(function (FillMode) {
    FillMode[FillMode["Cover"] = 0] = "Cover";
    FillMode[FillMode["RepeatHorizontally"] = 1] = "RepeatHorizontally";
    FillMode[FillMode["RepeatVertically"] = 2] = "RepeatVertically";
    FillMode[FillMode["Repeat"] = 3] = "Repeat";
})(FillMode = exports.FillMode || (exports.FillMode = {}));
var ActionIconPlacement;
(function (ActionIconPlacement) {
    ActionIconPlacement[ActionIconPlacement["LeftOfTitle"] = 0] = "LeftOfTitle";
    ActionIconPlacement[ActionIconPlacement["AboveTitle"] = 1] = "AboveTitle";
})(ActionIconPlacement = exports.ActionIconPlacement || (exports.ActionIconPlacement = {}));
var InputTextStyle;
(function (InputTextStyle) {
    InputTextStyle[InputTextStyle["Text"] = 0] = "Text";
    InputTextStyle[InputTextStyle["Tel"] = 1] = "Tel";
    InputTextStyle[InputTextStyle["Url"] = 2] = "Url";
    InputTextStyle[InputTextStyle["Email"] = 3] = "Email";
    InputTextStyle[InputTextStyle["Password"] = 4] = "Password";
})(InputTextStyle = exports.InputTextStyle || (exports.InputTextStyle = {}));
/*
    This should really be a string enum, e.g.

        export enum ContainerStyle {
            Default = "default",
            Emphasis = "emphasis"
        }

    However, some hosts do not use a version of TypeScript
    recent enough to understand string enums. This is
    a compatible construct that does not require using
    a more recent version of TypeScript.

    Also note the "weird" way these readonly fields are declared is to work around
    a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    and adopt this syntax for all other static readonly fields.
*/
var ContainerStyle = /** @class */ (function () {
    function ContainerStyle() {
    }
    ContainerStyle.Default = "default";
    ContainerStyle.Emphasis = "emphasis";
    ContainerStyle.Accent = "accent";
    ContainerStyle.Good = "good";
    ContainerStyle.Attention = "attention";
    ContainerStyle.Warning = "warning";
    return ContainerStyle;
}());
exports.ContainerStyle = ContainerStyle;
var ValidationPhase;
(function (ValidationPhase) {
    ValidationPhase[ValidationPhase["Parse"] = 0] = "Parse";
    ValidationPhase[ValidationPhase["ToJSON"] = 1] = "ToJSON";
    ValidationPhase[ValidationPhase["Validation"] = 2] = "Validation";
})(ValidationPhase = exports.ValidationPhase || (exports.ValidationPhase = {}));
var ValidationEvent;
(function (ValidationEvent) {
    ValidationEvent[ValidationEvent["Hint"] = 0] = "Hint";
    ValidationEvent[ValidationEvent["ActionTypeNotAllowed"] = 1] = "ActionTypeNotAllowed";
    ValidationEvent[ValidationEvent["CollectionCantBeEmpty"] = 2] = "CollectionCantBeEmpty";
    ValidationEvent[ValidationEvent["Deprecated"] = 3] = "Deprecated";
    ValidationEvent[ValidationEvent["ElementTypeNotAllowed"] = 4] = "ElementTypeNotAllowed";
    ValidationEvent[ValidationEvent["InteractivityNotAllowed"] = 5] = "InteractivityNotAllowed";
    ValidationEvent[ValidationEvent["InvalidPropertyValue"] = 6] = "InvalidPropertyValue";
    ValidationEvent[ValidationEvent["MissingCardType"] = 7] = "MissingCardType";
    ValidationEvent[ValidationEvent["PropertyCantBeNull"] = 8] = "PropertyCantBeNull";
    ValidationEvent[ValidationEvent["TooManyActions"] = 9] = "TooManyActions";
    ValidationEvent[ValidationEvent["UnknownActionType"] = 10] = "UnknownActionType";
    ValidationEvent[ValidationEvent["UnknownElementType"] = 11] = "UnknownElementType";
    ValidationEvent[ValidationEvent["UnsupportedCardVersion"] = 12] = "UnsupportedCardVersion";
    ValidationEvent[ValidationEvent["DuplicateId"] = 13] = "DuplicateId";
    ValidationEvent[ValidationEvent["UnsupportedProperty"] = 14] = "UnsupportedProperty";
    ValidationEvent[ValidationEvent["RequiredInputsShouldHaveLabel"] = 15] = "RequiredInputsShouldHaveLabel";
    ValidationEvent[ValidationEvent["RequiredInputsShouldHaveErrorMessage"] = 16] = "RequiredInputsShouldHaveErrorMessage";
    ValidationEvent[ValidationEvent["Other"] = 17] = "Other";
})(ValidationEvent = exports.ValidationEvent || (exports.ValidationEvent = {}));
var ContainerFitStatus;
(function (ContainerFitStatus) {
    ContainerFitStatus[ContainerFitStatus["FullyInContainer"] = 0] = "FullyInContainer";
    ContainerFitStatus[ContainerFitStatus["Overflowing"] = 1] = "Overflowing";
    ContainerFitStatus[ContainerFitStatus["FullyOutOfContainer"] = 2] = "FullyOutOfContainer";
})(ContainerFitStatus = exports.ContainerFitStatus || (exports.ContainerFitStatus = {}));
var TypeErrorType;
(function (TypeErrorType) {
    TypeErrorType[TypeErrorType["UnknownType"] = 0] = "UnknownType";
    TypeErrorType[TypeErrorType["ForbiddenType"] = 1] = "ForbiddenType";
})(TypeErrorType = exports.TypeErrorType || (exports.TypeErrorType = {}));
var RefreshMode;
(function (RefreshMode) {
    RefreshMode[RefreshMode["Disabled"] = 0] = "Disabled";
    RefreshMode[RefreshMode["Manual"] = 1] = "Manual";
    RefreshMode[RefreshMode["Automatic"] = 2] = "Automatic";
})(RefreshMode = exports.RefreshMode || (exports.RefreshMode = {}));
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Info"] = 0] = "Info";
    LogLevel[LogLevel["Warning"] = 1] = "Warning";
    LogLevel[LogLevel["Error"] = 2] = "Error";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));


/***/ }),

/***/ "./src/host-capabilities.ts":
/*!**********************************!*\
  !*** ./src/host-capabilities.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HostCapabilities = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var serialization_1 = __webpack_require__(/*! ./serialization */ "./src/serialization.ts");
var HostCapabilities = /** @class */ (function (_super) {
    __extends(HostCapabilities, _super);
    function HostCapabilities() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._capabilities = {};
        return _this;
    }
    HostCapabilities.prototype.getSchemaKey = function () {
        return "HostCapabilities";
    };
    HostCapabilities.prototype.internalParse = function (source, context) {
        _super.prototype.internalParse.call(this, source, context);
        if (source) {
            for (var name_1 in source) {
                var jsonVersion = source[name_1];
                if (typeof jsonVersion === "string") {
                    if (jsonVersion == "*") {
                        this.addCapability(name_1, "*");
                    }
                    else {
                        var version = serialization_1.Version.parse(jsonVersion, context);
                        if (version && version.isValid) {
                            this.addCapability(name_1, version);
                        }
                    }
                }
            }
        }
    };
    HostCapabilities.prototype.internalToJSON = function (target, context) {
        _super.prototype.internalToJSON.call(this, target, context);
        for (var key in this._capabilities) {
            target[key] = this._capabilities[key];
        }
    };
    HostCapabilities.prototype.addCapability = function (name, version) {
        this._capabilities[name] = version;
    };
    HostCapabilities.prototype.removeCapability = function (name) {
        delete this._capabilities[name];
    };
    HostCapabilities.prototype.clear = function () {
        this._capabilities = {};
    };
    HostCapabilities.prototype.hasCapability = function (name, version) {
        if (this._capabilities.hasOwnProperty(name)) {
            if (version == "*" || this._capabilities[name] == "*") {
                return true;
            }
            return version.compareTo(this._capabilities[name]) <= 0;
        }
        return false;
    };
    HostCapabilities.prototype.areAllMet = function (hostCapabilities) {
        for (var capabilityName in this._capabilities) {
            if (!hostCapabilities.hasCapability(capabilityName, this._capabilities[capabilityName])) {
                return false;
            }
        }
        return true;
    };
    return HostCapabilities;
}(serialization_1.SerializableObject));
exports.HostCapabilities = HostCapabilities;


/***/ }),

/***/ "./src/host-config.ts":
/*!****************************!*\
  !*** ./src/host-config.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultHostConfig = exports.HostConfig = exports.FontTypeSet = exports.FontTypeDefinition = exports.ContainerStyleSet = exports.ContainerStyleDefinition = exports.ColorSetDefinition = exports.ActionsConfig = exports.ShowCardActionConfig = exports.FactSetConfig = exports.FactTitleDefinition = exports.FactTextDefinition = exports.InputConfig = exports.InputLabelConfig = exports.RequiredInputLabelTextDefinition = exports.TextBlockConfig = exports.TextStyleSet = exports.TextStyleDefinition = exports.BaseTextDefinition = exports.TableConfig = exports.MediaConfig = exports.ImageSetConfig = exports.AdaptiveCardConfig = exports.TextColorDefinition = exports.ColorDefinition = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Enums = __webpack_require__(/*! ./enums */ "./src/enums.ts");
var Utils = __webpack_require__(/*! ./utils */ "./src/utils.ts");
var Shared = __webpack_require__(/*! ./shared */ "./src/shared.ts");
var host_capabilities_1 = __webpack_require__(/*! ./host-capabilities */ "./src/host-capabilities.ts");
function parseHostConfigEnum(targetEnum, value, defaultValue) {
    if (typeof value === "string") {
        var parsedValue = Utils.parseEnum(targetEnum, value, defaultValue);
        return parsedValue !== undefined ? parsedValue : defaultValue;
    }
    else if (typeof value === "number") {
        return value;
    }
    else {
        return defaultValue;
    }
}
var ColorDefinition = /** @class */ (function () {
    function ColorDefinition(defaultColor, subtleColor) {
        this.default = "#000000";
        this.subtle = "#666666";
        if (defaultColor) {
            this.default = defaultColor;
        }
        if (subtleColor) {
            this.subtle = subtleColor;
        }
    }
    ColorDefinition.prototype.parse = function (obj) {
        if (obj) {
            this.default = obj["default"] || this.default;
            this.subtle = obj["subtle"] || this.subtle;
        }
    };
    return ColorDefinition;
}());
exports.ColorDefinition = ColorDefinition;
var TextColorDefinition = /** @class */ (function (_super) {
    __extends(TextColorDefinition, _super);
    function TextColorDefinition() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.highlightColors = new ColorDefinition("#22000000", "#11000000");
        return _this;
    }
    TextColorDefinition.prototype.parse = function (obj) {
        _super.prototype.parse.call(this, obj);
        if (obj) {
            this.highlightColors.parse(obj["highlightColors"]);
        }
    };
    return TextColorDefinition;
}(ColorDefinition));
exports.TextColorDefinition = TextColorDefinition;
var AdaptiveCardConfig = /** @class */ (function () {
    function AdaptiveCardConfig(obj) {
        this.allowCustomStyle = false;
        if (obj) {
            this.allowCustomStyle = obj["allowCustomStyle"] || this.allowCustomStyle;
        }
    }
    return AdaptiveCardConfig;
}());
exports.AdaptiveCardConfig = AdaptiveCardConfig;
var ImageSetConfig = /** @class */ (function () {
    function ImageSetConfig(obj) {
        this.imageSize = Enums.Size.Medium;
        this.maxImageHeight = 100;
        if (obj) {
            this.imageSize = obj["imageSize"] != null ? obj["imageSize"] : this.imageSize;
            this.maxImageHeight = Utils.parseNumber(obj["maxImageHeight"], 100);
        }
    }
    ImageSetConfig.prototype.toJSON = function () {
        return {
            imageSize: Enums.Size[this.imageSize],
            maxImageHeight: this.maxImageHeight
        };
    };
    return ImageSetConfig;
}());
exports.ImageSetConfig = ImageSetConfig;
var MediaConfig = /** @class */ (function () {
    function MediaConfig(obj) {
        this.allowInlinePlayback = true;
        if (obj) {
            this.defaultPoster = obj["defaultPoster"];
            this.allowInlinePlayback = obj["allowInlinePlayback"] || this.allowInlinePlayback;
        }
    }
    MediaConfig.prototype.toJSON = function () {
        return {
            defaultPoster: this.defaultPoster,
            allowInlinePlayback: this.allowInlinePlayback
        };
    };
    return MediaConfig;
}());
exports.MediaConfig = MediaConfig;
var TableConfig = /** @class */ (function () {
    function TableConfig(obj) {
        this.cellSpacing = 8;
        if (obj) {
            this.cellSpacing = obj.cellSpacing && typeof obj.cellSpacing === "number" ? obj.cellSpacing : this.cellSpacing;
        }
    }
    TableConfig.prototype.toJSON = function () {
        return {
            cellSpacing: this.cellSpacing
        };
    };
    return TableConfig;
}());
exports.TableConfig = TableConfig;
var BaseTextDefinition = /** @class */ (function () {
    function BaseTextDefinition(obj) {
        this.size = Enums.TextSize.Default;
        this.color = Enums.TextColor.Default;
        this.isSubtle = false;
        this.weight = Enums.TextWeight.Default;
        this.parse(obj);
    }
    ;
    BaseTextDefinition.prototype.parse = function (obj) {
        if (obj) {
            this.size = parseHostConfigEnum(Enums.TextSize, obj["size"], this.size);
            this.color = parseHostConfigEnum(Enums.TextColor, obj["color"], this.color);
            this.isSubtle = obj.isSubtle !== undefined && typeof obj.isSubtle === "boolean" ? obj.isSubtle : this.isSubtle;
            this.weight = parseHostConfigEnum(Enums.TextWeight, obj["weight"], this.getDefaultWeight());
        }
    };
    BaseTextDefinition.prototype.getDefaultWeight = function () {
        return Enums.TextWeight.Default;
    };
    BaseTextDefinition.prototype.toJSON = function () {
        return {
            size: Enums.TextSize[this.size],
            color: Enums.TextColor[this.color],
            isSubtle: this.isSubtle,
            weight: Enums.TextWeight[this.weight]
        };
    };
    return BaseTextDefinition;
}());
exports.BaseTextDefinition = BaseTextDefinition;
var TextStyleDefinition = /** @class */ (function (_super) {
    __extends(TextStyleDefinition, _super);
    function TextStyleDefinition() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fontType = Enums.FontType.Default;
        return _this;
    }
    TextStyleDefinition.prototype.parse = function (obj) {
        _super.prototype.parse.call(this, obj);
        if (obj) {
            this.fontType = parseHostConfigEnum(Enums.FontType, obj.fontType, this.fontType);
        }
    };
    return TextStyleDefinition;
}(BaseTextDefinition));
exports.TextStyleDefinition = TextStyleDefinition;
var TextStyleSet = /** @class */ (function () {
    function TextStyleSet(obj) {
        this.default = new TextStyleDefinition();
        this.heading = new TextStyleDefinition({
            size: "Large",
            weight: "Bolder"
        });
        this.columnHeader = new TextStyleDefinition({
            weight: "Bolder"
        });
        if (obj) {
            this.heading.parse(obj.heading);
            this.columnHeader.parse(obj.columnHeader);
        }
    }
    TextStyleSet.prototype.getStyleByName = function (name) {
        switch (name.toLowerCase()) {
            case "heading":
                return this.heading;
            case "columnHeader":
                return this.columnHeader;
            default:
                return this.default;
        }
    };
    return TextStyleSet;
}());
exports.TextStyleSet = TextStyleSet;
var TextBlockConfig = /** @class */ (function () {
    function TextBlockConfig(obj) {
        if (obj) {
            this.headingLevel = Utils.parseNumber(obj.headingLevel);
        }
    }
    return TextBlockConfig;
}());
exports.TextBlockConfig = TextBlockConfig;
var RequiredInputLabelTextDefinition = /** @class */ (function (_super) {
    __extends(RequiredInputLabelTextDefinition, _super);
    function RequiredInputLabelTextDefinition() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.suffix = " *";
        _this.suffixColor = Enums.TextColor.Attention;
        return _this;
    }
    RequiredInputLabelTextDefinition.prototype.parse = function (obj) {
        _super.prototype.parse.call(this, obj);
        if (obj) {
            this.suffix = obj["suffix"] || this.suffix;
            this.suffixColor = parseHostConfigEnum(Enums.TextColor, obj["suffixColor"], this.suffixColor);
        }
    };
    RequiredInputLabelTextDefinition.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        result["suffix"] = this.suffix;
        result["suffixColor"] = Enums.TextColor[this.suffixColor];
        return result;
    };
    return RequiredInputLabelTextDefinition;
}(BaseTextDefinition));
exports.RequiredInputLabelTextDefinition = RequiredInputLabelTextDefinition;
var InputLabelConfig = /** @class */ (function () {
    function InputLabelConfig(obj) {
        this.inputSpacing = Enums.Spacing.Small;
        this.requiredInputs = new RequiredInputLabelTextDefinition();
        this.optionalInputs = new BaseTextDefinition();
        if (obj) {
            this.inputSpacing = parseHostConfigEnum(Enums.Spacing, obj["inputSpacing"], this.inputSpacing);
            this.requiredInputs = new RequiredInputLabelTextDefinition(obj["requiredInputs"]);
            this.optionalInputs = new BaseTextDefinition(obj["optionalInputs"]);
        }
    }
    return InputLabelConfig;
}());
exports.InputLabelConfig = InputLabelConfig;
var InputConfig = /** @class */ (function () {
    function InputConfig(obj) {
        this.label = new InputLabelConfig();
        this.errorMessage = new BaseTextDefinition({ color: Enums.TextColor.Attention });
        if (obj) {
            this.label = new InputLabelConfig(obj["label"]);
            this.errorMessage = new BaseTextDefinition(obj["errorMessage"]);
        }
    }
    return InputConfig;
}());
exports.InputConfig = InputConfig;
var FactTextDefinition = /** @class */ (function (_super) {
    __extends(FactTextDefinition, _super);
    function FactTextDefinition() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.wrap = true;
        return _this;
    }
    FactTextDefinition.prototype.parse = function (obj) {
        _super.prototype.parse.call(this, obj);
        if (obj) {
            this.wrap = obj["wrap"] != null ? obj["wrap"] : this.wrap;
        }
    };
    FactTextDefinition.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        result["wrap"] = this.wrap;
        return result;
    };
    return FactTextDefinition;
}(BaseTextDefinition));
exports.FactTextDefinition = FactTextDefinition;
var FactTitleDefinition = /** @class */ (function (_super) {
    __extends(FactTitleDefinition, _super);
    function FactTitleDefinition(obj) {
        var _this = _super.call(this, obj) || this;
        _this.maxWidth = 150;
        _this.weight = Enums.TextWeight.Bolder;
        if (obj) {
            _this.maxWidth = obj["maxWidth"] != null ? obj["maxWidth"] : _this.maxWidth;
            _this.weight = parseHostConfigEnum(Enums.TextWeight, obj["weight"], Enums.TextWeight.Bolder);
        }
        return _this;
    }
    FactTitleDefinition.prototype.getDefaultWeight = function () {
        return Enums.TextWeight.Bolder;
    };
    return FactTitleDefinition;
}(FactTextDefinition));
exports.FactTitleDefinition = FactTitleDefinition;
var FactSetConfig = /** @class */ (function () {
    function FactSetConfig(obj) {
        this.title = new FactTitleDefinition();
        this.value = new FactTextDefinition();
        this.spacing = 10;
        if (obj) {
            this.title = new FactTitleDefinition(obj["title"]);
            this.value = new FactTextDefinition(obj["value"]);
            this.spacing = obj.spacing && obj.spacing != null ? obj.spacing && obj.spacing : this.spacing;
        }
    }
    return FactSetConfig;
}());
exports.FactSetConfig = FactSetConfig;
var ShowCardActionConfig = /** @class */ (function () {
    function ShowCardActionConfig(obj) {
        this.actionMode = Enums.ShowCardActionMode.Inline;
        this.inlineTopMargin = 16;
        this.style = Enums.ContainerStyle.Emphasis;
        if (obj) {
            this.actionMode = parseHostConfigEnum(Enums.ShowCardActionMode, obj["actionMode"], Enums.ShowCardActionMode.Inline);
            this.inlineTopMargin = obj["inlineTopMargin"] != null ? obj["inlineTopMargin"] : this.inlineTopMargin;
            this.style = obj["style"] && typeof obj["style"] === "string" ? obj["style"] : Enums.ContainerStyle.Emphasis;
        }
    }
    ShowCardActionConfig.prototype.toJSON = function () {
        return {
            actionMode: Enums.ShowCardActionMode[this.actionMode],
            inlineTopMargin: this.inlineTopMargin,
            style: this.style
        };
    };
    return ShowCardActionConfig;
}());
exports.ShowCardActionConfig = ShowCardActionConfig;
var ActionsConfig = /** @class */ (function () {
    function ActionsConfig(obj) {
        this.maxActions = 5;
        this.spacing = Enums.Spacing.Default;
        this.buttonSpacing = 20;
        this.showCard = new ShowCardActionConfig();
        this.preExpandSingleShowCardAction = false;
        this.actionsOrientation = Enums.Orientation.Horizontal;
        this.actionAlignment = Enums.ActionAlignment.Left;
        this.iconPlacement = Enums.ActionIconPlacement.LeftOfTitle;
        this.allowTitleToWrap = false;
        this.iconSize = 16;
        if (obj) {
            this.maxActions = obj["maxActions"] != null ? obj["maxActions"] : this.maxActions;
            this.spacing = parseHostConfigEnum(Enums.Spacing, obj.spacing && obj.spacing, Enums.Spacing.Default);
            this.buttonSpacing = obj["buttonSpacing"] != null ? obj["buttonSpacing"] : this.buttonSpacing;
            this.showCard = new ShowCardActionConfig(obj["showCard"]);
            this.preExpandSingleShowCardAction = Utils.parseBool(obj["preExpandSingleShowCardAction"], false);
            this.actionsOrientation = parseHostConfigEnum(Enums.Orientation, obj["actionsOrientation"], Enums.Orientation.Horizontal);
            this.actionAlignment = parseHostConfigEnum(Enums.ActionAlignment, obj["actionAlignment"], Enums.ActionAlignment.Left);
            this.iconPlacement = parseHostConfigEnum(Enums.ActionIconPlacement, obj["iconPlacement"], Enums.ActionIconPlacement.LeftOfTitle);
            this.allowTitleToWrap = obj["allowTitleToWrap"] != null ? obj["allowTitleToWrap"] : this.allowTitleToWrap;
            try {
                var sizeAndUnit = Shared.SizeAndUnit.parse(obj["iconSize"]);
                if (sizeAndUnit.unit == Enums.SizeUnit.Pixel) {
                    this.iconSize = sizeAndUnit.physicalSize;
                }
            }
            catch (e) {
                // Swallow this, keep default icon size
            }
        }
    }
    ActionsConfig.prototype.toJSON = function () {
        return {
            maxActions: this.maxActions,
            spacing: Enums.Spacing[this.spacing],
            buttonSpacing: this.buttonSpacing,
            showCard: this.showCard,
            preExpandSingleShowCardAction: this.preExpandSingleShowCardAction,
            actionsOrientation: Enums.Orientation[this.actionsOrientation],
            actionAlignment: Enums.ActionAlignment[this.actionAlignment]
        };
    };
    return ActionsConfig;
}());
exports.ActionsConfig = ActionsConfig;
var ColorSetDefinition = /** @class */ (function () {
    function ColorSetDefinition(obj) {
        this.default = new TextColorDefinition();
        this.dark = new TextColorDefinition();
        this.light = new TextColorDefinition();
        this.accent = new TextColorDefinition();
        this.good = new TextColorDefinition();
        this.warning = new TextColorDefinition();
        this.attention = new TextColorDefinition();
        this.parse(obj);
    }
    ColorSetDefinition.prototype.parseSingleColor = function (obj, propertyName) {
        if (obj) {
            this[propertyName].parse(obj[propertyName]);
        }
    };
    ColorSetDefinition.prototype.parse = function (obj) {
        if (obj) {
            this.parseSingleColor(obj, "default");
            this.parseSingleColor(obj, "dark");
            this.parseSingleColor(obj, "light");
            this.parseSingleColor(obj, "accent");
            this.parseSingleColor(obj, "good");
            this.parseSingleColor(obj, "warning");
            this.parseSingleColor(obj, "attention");
        }
    };
    return ColorSetDefinition;
}());
exports.ColorSetDefinition = ColorSetDefinition;
var ContainerStyleDefinition = /** @class */ (function () {
    function ContainerStyleDefinition(obj) {
        this.foregroundColors = new ColorSetDefinition({
            "default": { default: "#333333", subtle: "#EE333333" },
            "dark": { default: "#000000", subtle: "#66000000" },
            "light": { default: "#FFFFFF", subtle: "#33000000" },
            "accent": { default: "#2E89FC", subtle: "#882E89FC" },
            "good": { default: "#028A02", subtle: "#DD027502" },
            "warning": { default: "#E69500", subtle: "#DDE69500" },
            "attention": { default: "#CC3300", subtle: "#DDCC3300" }
        });
        this.parse(obj);
    }
    ContainerStyleDefinition.prototype.parse = function (obj) {
        if (obj) {
            this.backgroundColor = obj["backgroundColor"];
            this.foregroundColors.parse(obj["foregroundColors"]);
            this.highlightBackgroundColor = obj["highlightBackgroundColor"];
            this.highlightForegroundColor = obj["highlightForegroundColor"];
            this.borderColor = obj["borderColor"];
        }
    };
    Object.defineProperty(ContainerStyleDefinition.prototype, "isBuiltIn", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    return ContainerStyleDefinition;
}());
exports.ContainerStyleDefinition = ContainerStyleDefinition;
var BuiltInContainerStyleDefinition = /** @class */ (function (_super) {
    __extends(BuiltInContainerStyleDefinition, _super);
    function BuiltInContainerStyleDefinition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BuiltInContainerStyleDefinition.prototype, "isBuiltIn", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    return BuiltInContainerStyleDefinition;
}(ContainerStyleDefinition));
var ContainerStyleSet = /** @class */ (function () {
    function ContainerStyleSet(obj) {
        this._allStyles = {};
        this._allStyles[Enums.ContainerStyle.Default] = new BuiltInContainerStyleDefinition();
        this._allStyles[Enums.ContainerStyle.Emphasis] = new BuiltInContainerStyleDefinition();
        this._allStyles[Enums.ContainerStyle.Accent] = new BuiltInContainerStyleDefinition();
        this._allStyles[Enums.ContainerStyle.Good] = new BuiltInContainerStyleDefinition();
        this._allStyles[Enums.ContainerStyle.Attention] = new BuiltInContainerStyleDefinition();
        this._allStyles[Enums.ContainerStyle.Warning] = new BuiltInContainerStyleDefinition();
        if (obj) {
            this._allStyles[Enums.ContainerStyle.Default].parse(obj[Enums.ContainerStyle.Default]);
            this._allStyles[Enums.ContainerStyle.Emphasis].parse(obj[Enums.ContainerStyle.Emphasis]);
            this._allStyles[Enums.ContainerStyle.Accent].parse(obj[Enums.ContainerStyle.Accent]);
            this._allStyles[Enums.ContainerStyle.Good].parse(obj[Enums.ContainerStyle.Good]);
            this._allStyles[Enums.ContainerStyle.Attention].parse(obj[Enums.ContainerStyle.Attention]);
            this._allStyles[Enums.ContainerStyle.Warning].parse(obj[Enums.ContainerStyle.Warning]);
            var customStyleArray = obj["customStyles"];
            if (customStyleArray && Array.isArray(customStyleArray)) {
                for (var _i = 0, customStyleArray_1 = customStyleArray; _i < customStyleArray_1.length; _i++) {
                    var customStyle = customStyleArray_1[_i];
                    if (customStyle) {
                        var styleName = customStyle["name"];
                        if (styleName && typeof styleName === "string") {
                            if (this._allStyles.hasOwnProperty(styleName)) {
                                this._allStyles[styleName].parse(customStyle["style"]);
                            }
                            else {
                                this._allStyles[styleName] = new ContainerStyleDefinition(customStyle["style"]);
                            }
                        }
                    }
                }
            }
        }
    }
    ContainerStyleSet.prototype.toJSON = function () {
        var _this = this;
        var customStyleArray = [];
        Object.keys(this._allStyles).forEach(function (key) {
            if (!_this._allStyles[key].isBuiltIn) {
                customStyleArray.push({
                    name: key,
                    style: _this._allStyles[key]
                });
            }
        });
        var result = {
            default: this.default,
            emphasis: this.emphasis
        };
        if (customStyleArray.length > 0) {
            result.customStyles = customStyleArray;
        }
        return result;
    };
    ContainerStyleSet.prototype.getStyleByName = function (name, defaultValue) {
        if (name && this._allStyles.hasOwnProperty(name)) {
            return this._allStyles[name];
        }
        else {
            return defaultValue ? defaultValue : this._allStyles[Enums.ContainerStyle.Default];
        }
    };
    Object.defineProperty(ContainerStyleSet.prototype, "default", {
        get: function () {
            return this._allStyles[Enums.ContainerStyle.Default];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContainerStyleSet.prototype, "emphasis", {
        get: function () {
            return this._allStyles[Enums.ContainerStyle.Emphasis];
        },
        enumerable: false,
        configurable: true
    });
    return ContainerStyleSet;
}());
exports.ContainerStyleSet = ContainerStyleSet;
var FontTypeDefinition = /** @class */ (function () {
    function FontTypeDefinition(fontFamily) {
        this.fontFamily = "Segoe UI,Segoe,Segoe WP,Helvetica Neue,Helvetica,sans-serif";
        this.fontSizes = {
            small: 12,
            default: 14,
            medium: 17,
            large: 21,
            extraLarge: 26
        };
        this.fontWeights = {
            lighter: 200,
            default: 400,
            bolder: 600
        };
        if (fontFamily) {
            this.fontFamily = fontFamily;
        }
    }
    FontTypeDefinition.prototype.parse = function (obj) {
        this.fontFamily = obj["fontFamily"] || this.fontFamily;
        this.fontSizes = {
            small: obj.fontSizes && obj.fontSizes["small"] || this.fontSizes.small,
            default: obj.fontSizes && obj.fontSizes["default"] || this.fontSizes.default,
            medium: obj.fontSizes && obj.fontSizes["medium"] || this.fontSizes.medium,
            large: obj.fontSizes && obj.fontSizes["large"] || this.fontSizes.large,
            extraLarge: obj.fontSizes && obj.fontSizes["extraLarge"] || this.fontSizes.extraLarge
        };
        this.fontWeights = {
            lighter: obj.fontWeights && obj.fontWeights["lighter"] || this.fontWeights.lighter,
            default: obj.fontWeights && obj.fontWeights["default"] || this.fontWeights.default,
            bolder: obj.fontWeights && obj.fontWeights["bolder"] || this.fontWeights.bolder
        };
    };
    FontTypeDefinition.monospace = new FontTypeDefinition("'Courier New', Courier, monospace");
    return FontTypeDefinition;
}());
exports.FontTypeDefinition = FontTypeDefinition;
var FontTypeSet = /** @class */ (function () {
    function FontTypeSet(obj) {
        this.default = new FontTypeDefinition();
        this.monospace = new FontTypeDefinition("'Courier New', Courier, monospace");
        if (obj) {
            this.default.parse(obj["default"]);
            this.monospace.parse(obj["monospace"]);
        }
    }
    FontTypeSet.prototype.getStyleDefinition = function (style) {
        switch (style) {
            case Enums.FontType.Monospace:
                return this.monospace;
            case Enums.FontType.Default:
            default:
                return this.default;
        }
    };
    return FontTypeSet;
}());
exports.FontTypeSet = FontTypeSet;
var HostConfig = /** @class */ (function () {
    function HostConfig(obj) {
        this.hostCapabilities = new host_capabilities_1.HostCapabilities();
        this.choiceSetInputValueSeparator = ",";
        this.supportsInteractivity = true;
        this.spacing = {
            small: 3,
            default: 8,
            medium: 20,
            large: 30,
            extraLarge: 40,
            padding: 15
        };
        this.separator = {
            lineThickness: 1,
            lineColor: "#EEEEEE"
        };
        this.imageSizes = {
            small: 40,
            medium: 80,
            large: 160
        };
        this.containerStyles = new ContainerStyleSet();
        this.inputs = new InputConfig();
        this.actions = new ActionsConfig();
        this.adaptiveCard = new AdaptiveCardConfig();
        this.imageSet = new ImageSetConfig();
        this.media = new MediaConfig();
        this.factSet = new FactSetConfig();
        this.table = new TableConfig();
        this.textStyles = new TextStyleSet();
        this.textBlock = new TextBlockConfig();
        this.alwaysAllowBleed = false;
        if (obj) {
            if (typeof obj === "string" || obj instanceof String) {
                obj = JSON.parse(obj);
            }
            this.choiceSetInputValueSeparator = (obj && typeof obj["choiceSetInputValueSeparator"] === "string") ? obj["choiceSetInputValueSeparator"] : this.choiceSetInputValueSeparator;
            this.supportsInteractivity = (obj && typeof obj["supportsInteractivity"] === "boolean") ? obj["supportsInteractivity"] : this.supportsInteractivity;
            this._legacyFontType = new FontTypeDefinition();
            this._legacyFontType.parse(obj);
            if (obj.fontTypes) {
                this.fontTypes = new FontTypeSet(obj.fontTypes);
            }
            if (obj.lineHeights) {
                this.lineHeights = {
                    small: obj.lineHeights["small"],
                    default: obj.lineHeights["default"],
                    medium: obj.lineHeights["medium"],
                    large: obj.lineHeights["large"],
                    extraLarge: obj.lineHeights["extraLarge"]
                };
            }
            ;
            this.imageSizes = {
                small: obj.imageSizes && obj.imageSizes["small"] || this.imageSizes.small,
                medium: obj.imageSizes && obj.imageSizes["medium"] || this.imageSizes.medium,
                large: obj.imageSizes && obj.imageSizes["large"] || this.imageSizes.large,
            };
            this.containerStyles = new ContainerStyleSet(obj["containerStyles"]);
            this.spacing = {
                small: obj.spacing && obj.spacing["small"] || this.spacing.small,
                default: obj.spacing && obj.spacing["default"] || this.spacing.default,
                medium: obj.spacing && obj.spacing["medium"] || this.spacing.medium,
                large: obj.spacing && obj.spacing["large"] || this.spacing.large,
                extraLarge: obj.spacing && obj.spacing["extraLarge"] || this.spacing.extraLarge,
                padding: obj.spacing && obj.spacing["padding"] || this.spacing.padding
            };
            this.separator = {
                lineThickness: obj.separator && obj.separator["lineThickness"] || this.separator.lineThickness,
                lineColor: obj.separator && obj.separator["lineColor"] || this.separator.lineColor
            };
            this.inputs = new InputConfig(obj.inputs || this.inputs);
            this.actions = new ActionsConfig(obj.actions || this.actions);
            this.adaptiveCard = new AdaptiveCardConfig(obj.adaptiveCard || this.adaptiveCard);
            this.imageSet = new ImageSetConfig(obj["imageSet"]);
            this.factSet = new FactSetConfig(obj["factSet"]);
            this.textStyles = new TextStyleSet(obj["textStyles"]);
            this.textBlock = new TextBlockConfig(obj["textBlock"]);
        }
    }
    HostConfig.prototype.getFontTypeDefinition = function (style) {
        if (this.fontTypes) {
            return this.fontTypes.getStyleDefinition(style);
        }
        else {
            return style == Enums.FontType.Monospace ? FontTypeDefinition.monospace : this._legacyFontType;
        }
    };
    HostConfig.prototype.getEffectiveSpacing = function (spacing) {
        switch (spacing) {
            case Enums.Spacing.Small:
                return this.spacing.small;
            case Enums.Spacing.Default:
                return this.spacing.default;
            case Enums.Spacing.Medium:
                return this.spacing.medium;
            case Enums.Spacing.Large:
                return this.spacing.large;
            case Enums.Spacing.ExtraLarge:
                return this.spacing.extraLarge;
            case Enums.Spacing.Padding:
                return this.spacing.padding;
            default:
                return 0;
        }
    };
    HostConfig.prototype.paddingDefinitionToSpacingDefinition = function (paddingDefinition) {
        return new Shared.SpacingDefinition(this.getEffectiveSpacing(paddingDefinition.top), this.getEffectiveSpacing(paddingDefinition.right), this.getEffectiveSpacing(paddingDefinition.bottom), this.getEffectiveSpacing(paddingDefinition.left));
    };
    HostConfig.prototype.makeCssClassNames = function () {
        var classNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            classNames[_i] = arguments[_i];
        }
        var result = [];
        for (var _a = 0, classNames_1 = classNames; _a < classNames_1.length; _a++) {
            var className = classNames_1[_a];
            result.push((this.cssClassNamePrefix ? this.cssClassNamePrefix + "-" : "") + className);
        }
        return result;
    };
    HostConfig.prototype.makeCssClassName = function () {
        var classNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            classNames[_i] = arguments[_i];
        }
        var result = this.makeCssClassNames.apply(this, classNames).join(" ");
        return result ? result : "";
    };
    Object.defineProperty(HostConfig.prototype, "fontFamily", {
        get: function () {
            return this._legacyFontType.fontFamily;
        },
        set: function (value) {
            this._legacyFontType.fontFamily = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HostConfig.prototype, "fontSizes", {
        get: function () {
            return this._legacyFontType.fontSizes;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HostConfig.prototype, "fontWeights", {
        get: function () {
            return this._legacyFontType.fontWeights;
        },
        enumerable: false,
        configurable: true
    });
    return HostConfig;
}());
exports.HostConfig = HostConfig;
exports.defaultHostConfig = new HostConfig({
    supportsInteractivity: true,
    spacing: {
        small: 10,
        default: 20,
        medium: 30,
        large: 40,
        extraLarge: 50,
        padding: 20
    },
    separator: {
        lineThickness: 1,
        lineColor: "#EEEEEE"
    },
    fontTypes: {
        default: {
            fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
            fontSizes: {
                small: 12,
                default: 14,
                medium: 17,
                large: 21,
                extraLarge: 26
            },
            fontWeights: {
                lighter: 200,
                default: 400,
                bolder: 600
            }
        },
        monospace: {
            fontFamily: "'Courier New', Courier, monospace",
            fontSizes: {
                small: 12,
                default: 14,
                medium: 17,
                large: 21,
                extraLarge: 26
            },
            fontWeights: {
                lighter: 200,
                default: 400,
                bolder: 600
            }
        }
    },
    imageSizes: {
        small: 40,
        medium: 80,
        large: 160
    },
    containerStyles: {
        default: {
            backgroundColor: "#FFFFFF",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#028A02",
                    subtle: "#DD027502"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        emphasis: {
            backgroundColor: "#08000000",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#028A02",
                    subtle: "#DD027502"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        accent: {
            backgroundColor: "#C7DEF9",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#028A02",
                    subtle: "#DD027502"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        good: {
            backgroundColor: "#CCFFCC",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#028A02",
                    subtle: "#DD027502"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        attention: {
            backgroundColor: "#FFC5B2",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#028A02",
                    subtle: "#DD027502"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        warning: {
            backgroundColor: "#FFE2B2",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#028A02",
                    subtle: "#DD027502"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        }
    },
    inputs: {
        label: {
            requiredInputs: {
                color: Enums.TextColor.Accent,
                size: Enums.TextSize.ExtraLarge,
                weight: Enums.TextWeight.Bolder,
                isSubtle: true,
                suffix: " (required)",
                suffixColor: Enums.TextColor.Good
            },
            optionalInputs: {
                color: Enums.TextColor.Warning,
                size: Enums.TextSize.Medium,
                weight: Enums.TextWeight.Lighter,
                isSubtle: false
            }
        },
        errorMessage: {
            color: Enums.TextColor.Accent,
            size: Enums.TextSize.Small,
            weight: Enums.TextWeight.Bolder
        }
    },
    actions: {
        maxActions: 5,
        spacing: Enums.Spacing.Default,
        buttonSpacing: 10,
        showCard: {
            actionMode: Enums.ShowCardActionMode.Inline,
            inlineTopMargin: 16
        },
        actionsOrientation: Enums.Orientation.Horizontal,
        actionAlignment: Enums.ActionAlignment.Left
    },
    adaptiveCard: {
        allowCustomStyle: false
    },
    imageSet: {
        imageSize: Enums.Size.Medium,
        maxImageHeight: 100
    },
    factSet: {
        title: {
            color: Enums.TextColor.Default,
            size: Enums.TextSize.Default,
            isSubtle: false,
            weight: Enums.TextWeight.Bolder,
            wrap: true,
            maxWidth: 150,
        },
        value: {
            color: Enums.TextColor.Default,
            size: Enums.TextSize.Default,
            isSubtle: false,
            weight: Enums.TextWeight.Default,
            wrap: true,
        },
        spacing: 10
    }
});


/***/ }),

/***/ "./src/registry.ts":
/*!*************************!*\
  !*** ./src/registry.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GlobalRegistry = exports.CardObjectRegistry = void 0;
var serialization_1 = __webpack_require__(/*! ./serialization */ "./src/serialization.ts");
var CardObjectRegistry = /** @class */ (function () {
    function CardObjectRegistry() {
        this._items = {};
    }
    CardObjectRegistry.prototype.findByName = function (typeName) {
        return this._items.hasOwnProperty(typeName) ? this._items[typeName] : undefined;
    };
    CardObjectRegistry.prototype.clear = function () {
        this._items = {};
    };
    CardObjectRegistry.prototype.copyTo = function (target) {
        var keys = Object.keys(this._items);
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            var typeRegistration = this._items[key];
            target.register(typeRegistration.typeName, typeRegistration.objectType, typeRegistration.schemaVersion);
        }
    };
    CardObjectRegistry.prototype.register = function (typeName, objectType, schemaVersion) {
        if (schemaVersion === void 0) { schemaVersion = serialization_1.Versions.v1_0; }
        var registrationInfo = this.findByName(typeName);
        if (registrationInfo !== undefined) {
            registrationInfo.objectType = objectType;
        }
        else {
            registrationInfo = {
                typeName: typeName,
                objectType: objectType,
                schemaVersion: schemaVersion
            };
        }
        this._items[typeName] = registrationInfo;
    };
    CardObjectRegistry.prototype.unregister = function (typeName) {
        delete this._items[typeName];
    };
    CardObjectRegistry.prototype.createInstance = function (typeName, targetVersion) {
        var registrationInfo = this.findByName(typeName);
        return (registrationInfo && registrationInfo.schemaVersion.compareTo(targetVersion) <= 0) ? new registrationInfo.objectType() : undefined;
    };
    CardObjectRegistry.prototype.getItemCount = function () {
        return Object.keys(this._items).length;
    };
    CardObjectRegistry.prototype.getItemAt = function (index) {
        var _this = this;
        return Object.keys(this._items).map(function (e) { return _this._items[e]; })[index];
    };
    return CardObjectRegistry;
}());
exports.CardObjectRegistry = CardObjectRegistry;
var GlobalRegistry = /** @class */ (function () {
    function GlobalRegistry() {
    }
    GlobalRegistry.populateWithDefaultElements = function (registry) {
        registry.clear();
        GlobalRegistry.defaultElements.copyTo(registry);
    };
    GlobalRegistry.populateWithDefaultActions = function (registry) {
        registry.clear();
        GlobalRegistry.defaultActions.copyTo(registry);
    };
    Object.defineProperty(GlobalRegistry, "elements", {
        get: function () {
            if (!GlobalRegistry._elements) {
                GlobalRegistry._elements = new CardObjectRegistry();
                GlobalRegistry.populateWithDefaultElements(GlobalRegistry._elements);
            }
            return GlobalRegistry._elements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GlobalRegistry, "actions", {
        get: function () {
            if (!GlobalRegistry._actions) {
                GlobalRegistry._actions = new CardObjectRegistry();
                GlobalRegistry.populateWithDefaultActions(GlobalRegistry._actions);
            }
            return GlobalRegistry._actions;
        },
        enumerable: false,
        configurable: true
    });
    GlobalRegistry.reset = function () {
        GlobalRegistry._elements = undefined;
        GlobalRegistry._actions = undefined;
    };
    GlobalRegistry.defaultElements = new CardObjectRegistry();
    GlobalRegistry.defaultActions = new CardObjectRegistry();
    return GlobalRegistry;
}());
exports.GlobalRegistry = GlobalRegistry;


/***/ }),

/***/ "./src/serialization.ts":
/*!******************************!*\
  !*** ./src/serialization.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SerializableObject = exports.property = exports.SerializableObjectSchema = exports.CustomProperty = exports.SerializableObjectCollectionProperty = exports.SerializableObjectProperty = exports.EnumProperty = exports.ValueSetProperty = exports.StringArrayProperty = exports.PixelSizeProperty = exports.NumProperty = exports.BoolProperty = exports.StringProperty = exports.PropertyDefinition = exports.BaseSerializationContext = exports.isVersionLessOrEqual = exports.Versions = exports.Version = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var shared_1 = __webpack_require__(/*! ./shared */ "./src/shared.ts");
var Utils = __webpack_require__(/*! ./utils */ "./src/utils.ts");
var Enums = __webpack_require__(/*! ./enums */ "./src/enums.ts");
var strings_1 = __webpack_require__(/*! ./strings */ "./src/strings.ts");
var Version = /** @class */ (function () {
    function Version(major, minor, label) {
        if (major === void 0) { major = 1; }
        if (minor === void 0) { minor = 1; }
        this._isValid = true;
        this._major = major;
        this._minor = minor;
        this._label = label;
    }
    Version.parse = function (versionString, context) {
        if (!versionString) {
            return undefined;
        }
        var result = new Version();
        result._versionString = versionString;
        var regEx = /(\d+).(\d+)/gi;
        var matches = regEx.exec(versionString);
        if (matches != null && matches.length == 3) {
            result._major = parseInt(matches[1]);
            result._minor = parseInt(matches[2]);
        }
        else {
            result._isValid = false;
        }
        if (!result._isValid) {
            context.logParseEvent(undefined, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidVersionString(result._versionString));
        }
        return result;
    };
    Version.prototype.toString = function () {
        return !this._isValid ? this._versionString : this._major + "." + this._minor;
    };
    Version.prototype.toJSON = function () {
        return this.toString();
    };
    Version.prototype.compareTo = function (otherVersion) {
        if (!this.isValid || !otherVersion.isValid) {
            throw new Error("Cannot compare invalid version.");
        }
        if (this.major > otherVersion.major) {
            return 1;
        }
        else if (this.major < otherVersion.major) {
            return -1;
        }
        else if (this.minor > otherVersion.minor) {
            return 1;
        }
        else if (this.minor < otherVersion.minor) {
            return -1;
        }
        return 0;
    };
    Object.defineProperty(Version.prototype, "label", {
        get: function () {
            return this._label ? this._label : this.toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "major", {
        get: function () {
            return this._major;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "minor", {
        get: function () {
            return this._minor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "isValid", {
        get: function () {
            return this._isValid;
        },
        enumerable: false,
        configurable: true
    });
    return Version;
}());
exports.Version = Version;
var Versions = /** @class */ (function () {
    function Versions() {
    }
    Versions.v1_0 = new Version(1, 0);
    Versions.v1_1 = new Version(1, 1);
    Versions.v1_2 = new Version(1, 2);
    Versions.v1_3 = new Version(1, 3);
    Versions.v1_4 = new Version(1, 4);
    Versions.v1_5 = new Version(1, 5);
    Versions.latest = Versions.v1_5;
    return Versions;
}());
exports.Versions = Versions;
function isVersionLessOrEqual(version, targetVersion) {
    if (version instanceof Version) {
        if (targetVersion instanceof Version) {
            return targetVersion.compareTo(version) >= 0;
        }
        else {
            // Target version is *
            return true;
        }
    }
    else {
        // Version is *
        return true;
    }
}
exports.isVersionLessOrEqual = isVersionLessOrEqual;
var BaseSerializationContext = /** @class */ (function () {
    function BaseSerializationContext(targetVersion) {
        if (targetVersion === void 0) { targetVersion = Versions.latest; }
        this.targetVersion = targetVersion;
        this._validationEvents = [];
    }
    BaseSerializationContext.prototype.serializeValue = function (target, propertyName, propertyValue, defaultValue, forceDeleteIfNullOrDefault) {
        if (defaultValue === void 0) { defaultValue = undefined; }
        if (forceDeleteIfNullOrDefault === void 0) { forceDeleteIfNullOrDefault = false; }
        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {
            if (!shared_1.GlobalSettings.enableFullJsonRoundTrip || forceDeleteIfNullOrDefault) {
                delete target[propertyName];
            }
        }
        else if (propertyValue === defaultValue) {
            delete target[propertyName];
        }
        else {
            target[propertyName] = propertyValue;
        }
    };
    BaseSerializationContext.prototype.serializeString = function (target, propertyName, propertyValue, defaultValue) {
        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {
            delete target[propertyName];
        }
        else {
            target[propertyName] = propertyValue;
        }
    };
    BaseSerializationContext.prototype.serializeBool = function (target, propertyName, propertyValue, defaultValue) {
        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {
            delete target[propertyName];
        }
        else {
            target[propertyName] = propertyValue;
        }
    };
    BaseSerializationContext.prototype.serializeNumber = function (target, propertyName, propertyValue, defaultValue) {
        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue || isNaN(propertyValue)) {
            delete target[propertyName];
        }
        else {
            target[propertyName] = propertyValue;
        }
    };
    BaseSerializationContext.prototype.serializeEnum = function (enumType, target, propertyName, propertyValue, defaultValue) {
        if (defaultValue === void 0) { defaultValue = undefined; }
        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {
            delete target[propertyName];
        }
        else {
            target[propertyName] = enumType[propertyValue];
        }
    };
    BaseSerializationContext.prototype.serializeArray = function (target, propertyName, propertyValue) {
        var items = [];
        if (propertyValue) {
            for (var _i = 0, propertyValue_1 = propertyValue; _i < propertyValue_1.length; _i++) {
                var item = propertyValue_1[_i];
                var serializedItem = undefined;
                if (item instanceof SerializableObject) {
                    serializedItem = item.toJSON(this);
                }
                else if (item.toJSON) {
                    serializedItem = item.toJSON();
                }
                else {
                    serializedItem = item;
                }
                if (serializedItem !== undefined) {
                    items.push(serializedItem);
                }
            }
        }
        if (items.length == 0) {
            if (target.hasOwnProperty(propertyName) && Array.isArray(target[propertyName])) {
                delete target[propertyName];
            }
        }
        else {
            this.serializeValue(target, propertyName, items);
        }
    };
    BaseSerializationContext.prototype.clearEvents = function () {
        this._validationEvents = [];
    };
    BaseSerializationContext.prototype.logEvent = function (source, phase, event, message) {
        this._validationEvents.push({
            source: source,
            phase: phase,
            event: event,
            message: message
        });
    };
    BaseSerializationContext.prototype.logParseEvent = function (source, event, message) {
        this.logEvent(source, Enums.ValidationPhase.Parse, event, message);
    };
    BaseSerializationContext.prototype.getEventAt = function (index) {
        return this._validationEvents[index];
    };
    Object.defineProperty(BaseSerializationContext.prototype, "eventCount", {
        get: function () {
            return this._validationEvents.length;
        },
        enumerable: false,
        configurable: true
    });
    return BaseSerializationContext;
}());
exports.BaseSerializationContext = BaseSerializationContext;
var SimpleSerializationContext = /** @class */ (function (_super) {
    __extends(SimpleSerializationContext, _super);
    function SimpleSerializationContext() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SimpleSerializationContext;
}(BaseSerializationContext));
var PropertyDefinition = /** @class */ (function () {
    function PropertyDefinition(targetVersion, name, defaultValue, onGetInitialValue) {
        this.targetVersion = targetVersion;
        this.name = name;
        this.defaultValue = defaultValue;
        this.onGetInitialValue = onGetInitialValue;
        this.isSerializationEnabled = true;
        this.sequentialNumber = PropertyDefinition._sequentialNumber;
        PropertyDefinition._sequentialNumber++;
    }
    PropertyDefinition.prototype.getInternalName = function () {
        return this.name;
    };
    PropertyDefinition.prototype.parse = function (sender, source, context) {
        return source[this.name];
    };
    PropertyDefinition.prototype.toJSON = function (sender, target, value, context) {
        context.serializeValue(target, this.name, value, this.defaultValue);
    };
    PropertyDefinition._sequentialNumber = 0;
    return PropertyDefinition;
}());
exports.PropertyDefinition = PropertyDefinition;
var StringProperty = /** @class */ (function (_super) {
    __extends(StringProperty, _super);
    function StringProperty(targetVersion, name, treatEmptyAsUndefined, regEx, defaultValue, onGetInitialValue) {
        if (treatEmptyAsUndefined === void 0) { treatEmptyAsUndefined = true; }
        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.treatEmptyAsUndefined = treatEmptyAsUndefined;
        _this.regEx = regEx;
        _this.defaultValue = defaultValue;
        _this.onGetInitialValue = onGetInitialValue;
        return _this;
    }
    StringProperty.prototype.parse = function (sender, source, context) {
        var parsedValue = Utils.parseString(source[this.name], this.defaultValue);
        var isUndefined = parsedValue === undefined || (parsedValue === "" && this.treatEmptyAsUndefined);
        if (!isUndefined && this.regEx !== undefined) {
            var matches = this.regEx.exec(parsedValue);
            if (!matches) {
                context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(parsedValue, this.name));
                return undefined;
            }
        }
        return parsedValue;
    };
    StringProperty.prototype.toJSON = function (sender, target, value, context) {
        context.serializeString(target, this.name, value === "" && this.treatEmptyAsUndefined ? undefined : value, this.defaultValue);
    };
    return StringProperty;
}(PropertyDefinition));
exports.StringProperty = StringProperty;
var BoolProperty = /** @class */ (function (_super) {
    __extends(BoolProperty, _super);
    function BoolProperty(targetVersion, name, defaultValue, onGetInitialValue) {
        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.defaultValue = defaultValue;
        _this.onGetInitialValue = onGetInitialValue;
        return _this;
    }
    BoolProperty.prototype.parse = function (sender, source, context) {
        return Utils.parseBool(source[this.name], this.defaultValue);
    };
    BoolProperty.prototype.toJSON = function (sender, target, value, context) {
        context.serializeBool(target, this.name, value, this.defaultValue);
    };
    return BoolProperty;
}(PropertyDefinition));
exports.BoolProperty = BoolProperty;
var NumProperty = /** @class */ (function (_super) {
    __extends(NumProperty, _super);
    function NumProperty(targetVersion, name, defaultValue, onGetInitialValue) {
        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.defaultValue = defaultValue;
        _this.onGetInitialValue = onGetInitialValue;
        return _this;
    }
    NumProperty.prototype.parse = function (sender, source, context) {
        return Utils.parseNumber(source[this.name], this.defaultValue);
    };
    NumProperty.prototype.toJSON = function (sender, target, value, context) {
        context.serializeNumber(target, this.name, value, this.defaultValue);
    };
    return NumProperty;
}(PropertyDefinition));
exports.NumProperty = NumProperty;
var PixelSizeProperty = /** @class */ (function (_super) {
    __extends(PixelSizeProperty, _super);
    function PixelSizeProperty() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PixelSizeProperty.prototype.parse = function (sender, source, context) {
        var result = undefined;
        var value = source[this.name];
        if (typeof value === "string") {
            var isValid = false;
            try {
                var size = shared_1.SizeAndUnit.parse(value, true);
                if (size.unit == Enums.SizeUnit.Pixel) {
                    result = size.physicalSize;
                    isValid = true;
                }
            }
            catch (_a) {
                // Do nothing. A parse error is emitted below
            }
            if (!isValid) {
                context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(source[this.name], "minHeight"));
            }
        }
        return result;
    };
    PixelSizeProperty.prototype.toJSON = function (sender, target, value, context) {
        context.serializeValue(target, this.name, typeof value === "number" && !isNaN(value) ? value + "px" : undefined);
    };
    return PixelSizeProperty;
}(PropertyDefinition));
exports.PixelSizeProperty = PixelSizeProperty;
var StringArrayProperty = /** @class */ (function (_super) {
    __extends(StringArrayProperty, _super);
    function StringArrayProperty(targetVersion, name, defaultValue, onGetInitialValue) {
        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.defaultValue = defaultValue;
        _this.onGetInitialValue = onGetInitialValue;
        return _this;
    }
    StringArrayProperty.prototype.parse = function (sender, source, context) {
        var sourceValue = source[this.name];
        if (sourceValue === undefined || !Array.isArray(sourceValue)) {
            return this.defaultValue;
        }
        var result = [];
        for (var _i = 0, sourceValue_1 = sourceValue; _i < sourceValue_1.length; _i++) {
            var value = sourceValue_1[_i];
            if (typeof value === "string") {
                result.push(value);
            }
            else {
                context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, "Invalid array value \"" + value + "\" of type \"" + typeof value + "\" ignored for \"" + this.name + "\".");
            }
        }
        return result;
    };
    StringArrayProperty.prototype.toJSON = function (sender, target, value, context) {
        context.serializeArray(target, this.name, value);
    };
    return StringArrayProperty;
}(PropertyDefinition));
exports.StringArrayProperty = StringArrayProperty;
var ValueSetProperty = /** @class */ (function (_super) {
    __extends(ValueSetProperty, _super);
    function ValueSetProperty(targetVersion, name, values, defaultValue, onGetInitialValue) {
        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.values = values;
        _this.defaultValue = defaultValue;
        _this.onGetInitialValue = onGetInitialValue;
        return _this;
    }
    ValueSetProperty.prototype.isValidValue = function (value, context) {
        for (var _i = 0, _a = this.values; _i < _a.length; _i++) {
            var versionedValue = _a[_i];
            if (value.toLowerCase() === versionedValue.value.toLowerCase()) {
                var targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;
                return targetVersion.compareTo(context.targetVersion) <= 0;
            }
        }
        return false;
    };
    ValueSetProperty.prototype.parse = function (sender, source, context) {
        var sourceValue = source[this.name];
        if (sourceValue === undefined) {
            return this.defaultValue;
        }
        if (typeof sourceValue === "string") {
            for (var _i = 0, _a = this.values; _i < _a.length; _i++) {
                var versionedValue = _a[_i];
                if (sourceValue.toLowerCase() === versionedValue.value.toLowerCase()) {
                    var targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;
                    if (targetVersion.compareTo(context.targetVersion) <= 0) {
                        return versionedValue.value;
                    }
                    else {
                        context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.propertyValueNotSupported(sourceValue, this.name, targetVersion.toString(), context.targetVersion.toString()));
                        return this.defaultValue;
                    }
                }
            }
        }
        context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(sourceValue, this.name));
        return this.defaultValue;
    };
    ValueSetProperty.prototype.toJSON = function (sender, target, value, context) {
        var invalidValue = false;
        if (value !== undefined) {
            invalidValue = true;
            for (var _i = 0, _a = this.values; _i < _a.length; _i++) {
                var versionedValue = _a[_i];
                if (versionedValue.value === value) {
                    var targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;
                    if (targetVersion.compareTo(context.targetVersion) <= 0) {
                        invalidValue = false;
                        break;
                    }
                    else {
                        context.logEvent(sender, Enums.ValidationPhase.ToJSON, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.propertyValueNotSupported(value, this.name, targetVersion.toString(), context.targetVersion.toString()));
                    }
                }
            }
        }
        if (!invalidValue) {
            context.serializeValue(target, this.name, value, this.defaultValue, true);
        }
    };
    return ValueSetProperty;
}(PropertyDefinition));
exports.ValueSetProperty = ValueSetProperty;
var EnumProperty = /** @class */ (function (_super) {
    __extends(EnumProperty, _super);
    function EnumProperty(targetVersion, name, enumType, defaultValue, values, onGetInitialValue) {
        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.enumType = enumType;
        _this.defaultValue = defaultValue;
        _this.onGetInitialValue = onGetInitialValue;
        _this._values = [];
        if (!values) {
            for (var key in enumType) {
                var keyAsNumber = parseInt(key, 10);
                if (keyAsNumber >= 0) {
                    _this._values.push({ value: keyAsNumber });
                }
            }
        }
        else {
            _this._values = values;
        }
        return _this;
    }
    EnumProperty.prototype.parse = function (sender, source, context) {
        var sourceValue = source[this.name];
        if (typeof sourceValue !== "string") {
            return this.defaultValue;
        }
        var enumValue = Utils.getEnumValueByName(this.enumType, sourceValue);
        if (enumValue !== undefined) {
            for (var _i = 0, _a = this.values; _i < _a.length; _i++) {
                var versionedValue = _a[_i];
                if (versionedValue.value === enumValue) {
                    var targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;
                    if (targetVersion.compareTo(context.targetVersion) <= 0) {
                        return enumValue;
                    }
                    else {
                        context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.propertyValueNotSupported(sourceValue, this.name, targetVersion.toString(), context.targetVersion.toString()));
                        return this.defaultValue;
                    }
                }
            }
        }
        context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(sourceValue, this.name));
        return this.defaultValue;
    };
    EnumProperty.prototype.toJSON = function (sender, target, value, context) {
        var invalidValue = false;
        if (value !== undefined) {
            invalidValue = true;
            for (var _i = 0, _a = this.values; _i < _a.length; _i++) {
                var versionedValue = _a[_i];
                if (versionedValue.value === value) {
                    var targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;
                    if (targetVersion.compareTo(context.targetVersion) <= 0) {
                        invalidValue = false;
                        break;
                    }
                    else {
                        context.logEvent(sender, Enums.ValidationPhase.ToJSON, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(value, this.name));
                    }
                }
            }
        }
        if (!invalidValue) {
            context.serializeEnum(this.enumType, target, this.name, value, this.defaultValue);
        }
    };
    Object.defineProperty(EnumProperty.prototype, "values", {
        get: function () {
            return this._values;
        },
        enumerable: false,
        configurable: true
    });
    return EnumProperty;
}(PropertyDefinition));
exports.EnumProperty = EnumProperty;
var SerializableObjectProperty = /** @class */ (function (_super) {
    __extends(SerializableObjectProperty, _super);
    function SerializableObjectProperty(targetVersion, name, objectType, nullable, defaultValue) {
        if (nullable === void 0) { nullable = false; }
        var _this = _super.call(this, targetVersion, name, defaultValue, function (sender) { return _this.nullable ? undefined : new _this.objectType(); }) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.objectType = objectType;
        _this.nullable = nullable;
        return _this;
    }
    SerializableObjectProperty.prototype.parse = function (sender, source, context) {
        var sourceValue = source[this.name];
        if (sourceValue === undefined) {
            return this.onGetInitialValue ? this.onGetInitialValue(sender) : this.defaultValue;
        }
        var result = new this.objectType();
        result.parse(sourceValue, context);
        return result;
    };
    SerializableObjectProperty.prototype.toJSON = function (sender, target, value, context) {
        var serializedValue = undefined;
        if (value !== undefined && !value.hasAllDefaultValues()) {
            serializedValue = value.toJSON(context);
        }
        if (typeof serializedValue === "object" && Object.keys(serializedValue).length === 0) {
            serializedValue = undefined;
        }
        context.serializeValue(target, this.name, serializedValue, this.defaultValue, true);
    };
    return SerializableObjectProperty;
}(PropertyDefinition));
exports.SerializableObjectProperty = SerializableObjectProperty;
var SerializableObjectCollectionProperty = /** @class */ (function (_super) {
    __extends(SerializableObjectCollectionProperty, _super);
    function SerializableObjectCollectionProperty(targetVersion, name, objectType, onItemAdded) {
        var _this = _super.call(this, targetVersion, name, undefined, function (sender) { return []; }) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.objectType = objectType;
        _this.onItemAdded = onItemAdded;
        return _this;
    }
    SerializableObjectCollectionProperty.prototype.parse = function (sender, source, context) {
        var result = [];
        var sourceCollection = source[this.name];
        if (Array.isArray(sourceCollection)) {
            for (var _i = 0, sourceCollection_1 = sourceCollection; _i < sourceCollection_1.length; _i++) {
                var sourceItem = sourceCollection_1[_i];
                var item = new this.objectType();
                item.parse(sourceItem, context);
                result.push(item);
                if (this.onItemAdded) {
                    this.onItemAdded(sender, item);
                }
            }
        }
        return result.length > 0 ? result : (this.onGetInitialValue ? this.onGetInitialValue(sender) : undefined);
    };
    SerializableObjectCollectionProperty.prototype.toJSON = function (sender, target, value, context) {
        context.serializeArray(target, this.name, value);
    };
    return SerializableObjectCollectionProperty;
}(PropertyDefinition));
exports.SerializableObjectCollectionProperty = SerializableObjectCollectionProperty;
var CustomProperty = /** @class */ (function (_super) {
    __extends(CustomProperty, _super);
    function CustomProperty(targetVersion, name, onParse, onToJSON, defaultValue, onGetInitialValue) {
        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.onParse = onParse;
        _this.onToJSON = onToJSON;
        _this.defaultValue = defaultValue;
        _this.onGetInitialValue = onGetInitialValue;
        if (!_this.onParse) {
            throw new Error("CustomPropertyDefinition instances must have an onParse handler.");
        }
        if (!_this.onToJSON) {
            throw new Error("CustomPropertyDefinition instances must have an onToJSON handler.");
        }
        return _this;
    }
    CustomProperty.prototype.parse = function (sender, source, context) {
        return this.onParse(sender, this, source, context);
    };
    CustomProperty.prototype.toJSON = function (sender, target, value, context) {
        this.onToJSON(sender, this, target, value, context);
    };
    return CustomProperty;
}(PropertyDefinition));
exports.CustomProperty = CustomProperty;
var SerializableObjectSchema = /** @class */ (function () {
    function SerializableObjectSchema() {
        this._properties = [];
    }
    SerializableObjectSchema.prototype.indexOf = function (property) {
        for (var i = 0; i < this._properties.length; i++) {
            if (this._properties[i] === property) {
                return i;
            }
        }
        return -1;
    };
    SerializableObjectSchema.prototype.add = function () {
        var properties = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            properties[_i] = arguments[_i];
        }
        for (var i = 0; i < properties.length; i++) {
            if (this.indexOf(properties[i]) === -1) {
                this._properties.push(properties[i]);
            }
        }
    };
    SerializableObjectSchema.prototype.remove = function () {
        var properties = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            properties[_i] = arguments[_i];
        }
        for (var _a = 0, properties_1 = properties; _a < properties_1.length; _a++) {
            var property_1 = properties_1[_a];
            while (true) {
                var index = this.indexOf(property_1);
                if (index >= 0) {
                    this._properties.splice(index, 1);
                }
                else {
                    break;
                }
            }
        }
    };
    SerializableObjectSchema.prototype.getItemAt = function (index) {
        return this._properties[index];
    };
    SerializableObjectSchema.prototype.getCount = function () {
        return this._properties.length;
    };
    return SerializableObjectSchema;
}());
exports.SerializableObjectSchema = SerializableObjectSchema;
// This is a decorator function, used to map SerializableObject descendant class members to
// schema properties
function property(property) {
    return function (target, propertyKey) {
        var descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {};
        if (!descriptor.get && !descriptor.set) {
            descriptor.get = function () { return this.getValue(property); };
            descriptor.set = function (value) { this.setValue(property, value); };
            Object.defineProperty(target, propertyKey, descriptor);
        }
    };
}
exports.property = property;
var SerializableObject = /** @class */ (function () {
    function SerializableObject() {
        this._propertyBag = {};
        this._rawProperties = {};
        this.maxVersion = SerializableObject.defaultMaxVersion;
        var s = this.getSchema();
        for (var i = 0; i < s.getCount(); i++) {
            var property_2 = s.getItemAt(i);
            if (property_2.onGetInitialValue) {
                this.setValue(property_2, property_2.onGetInitialValue(this));
            }
        }
    }
    SerializableObject.prototype.getDefaultSerializationContext = function () {
        return new SimpleSerializationContext();
    };
    SerializableObject.prototype.populateSchema = function (schema) {
        var ctor = this.constructor;
        var properties = [];
        for (var propertyName in ctor) {
            try {
                var propertyValue = ctor[propertyName];
                if (propertyValue instanceof PropertyDefinition) {
                    properties.push(propertyValue);
                }
            }
            catch (_a) {
                // If a property happens to have a getter function and
                // it throws an exception, we need to catch it here
            }
        }
        if (properties.length > 0) {
            var sortedProperties = properties.sort(function (p1, p2) {
                if (p1.sequentialNumber > p2.sequentialNumber) {
                    return 1;
                }
                else if (p1.sequentialNumber < p2.sequentialNumber) {
                    return -1;
                }
                return 0;
            });
            schema.add.apply(schema, sortedProperties);
        }
        if (SerializableObject.onRegisterCustomProperties) {
            SerializableObject.onRegisterCustomProperties(this, schema);
        }
    };
    SerializableObject.prototype.getValue = function (property) {
        return this._propertyBag.hasOwnProperty(property.getInternalName()) ? this._propertyBag[property.getInternalName()] : property.defaultValue;
    };
    SerializableObject.prototype.setValue = function (property, value) {
        if (value === undefined || value === null) {
            delete this._propertyBag[property.getInternalName()];
        }
        else {
            this._propertyBag[property.getInternalName()] = value;
        }
    };
    SerializableObject.prototype.internalParse = function (source, context) {
        this._propertyBag = {};
        this._rawProperties = shared_1.GlobalSettings.enableFullJsonRoundTrip ? (source ? source : {}) : {};
        if (source) {
            var s = this.getSchema();
            for (var i = 0; i < s.getCount(); i++) {
                var property_3 = s.getItemAt(i);
                if (property_3.isSerializationEnabled) {
                    var propertyValue = property_3.onGetInitialValue ? property_3.onGetInitialValue(this) : undefined;
                    if (source.hasOwnProperty(property_3.name)) {
                        if (property_3.targetVersion.compareTo(context.targetVersion) <= 0) {
                            propertyValue = property_3.parse(this, source, context);
                        }
                        else {
                            context.logParseEvent(this, Enums.ValidationEvent.UnsupportedProperty, strings_1.Strings.errors.propertyNotSupported(property_3.name, property_3.targetVersion.toString(), context.targetVersion.toString()));
                        }
                    }
                    this.setValue(property_3, propertyValue);
                }
            }
        }
        else {
            this.resetDefaultValues();
        }
    };
    SerializableObject.prototype.internalToJSON = function (target, context) {
        var s = this.getSchema();
        var serializedProperties = [];
        for (var i = 0; i < s.getCount(); i++) {
            var property_4 = s.getItemAt(i);
            // Avoid serializing the same property multiple times. This is necessary
            // because some property definitions map to the same underlying schema
            // property
            if (property_4.isSerializationEnabled && property_4.targetVersion.compareTo(context.targetVersion) <= 0 && serializedProperties.indexOf(property_4.name) === -1) {
                property_4.toJSON(this, target, this.getValue(property_4), context);
                serializedProperties.push(property_4.name);
            }
        }
    };
    SerializableObject.prototype.shouldSerialize = function (context) {
        return true;
    };
    SerializableObject.prototype.parse = function (source, context) {
        this.internalParse(source, context ? context : new SimpleSerializationContext());
    };
    SerializableObject.prototype.toJSON = function (context) {
        var effectiveContext;
        if (context && context instanceof BaseSerializationContext) {
            effectiveContext = context;
        }
        else {
            effectiveContext = this.getDefaultSerializationContext();
            effectiveContext.toJSONOriginalParam = context;
        }
        if (this.shouldSerialize(effectiveContext)) {
            var result = void 0;
            if (shared_1.GlobalSettings.enableFullJsonRoundTrip && this._rawProperties && typeof this._rawProperties === "object") {
                result = this._rawProperties;
            }
            else {
                result = {};
            }
            this.internalToJSON(result, effectiveContext);
            return result;
        }
        else {
            return undefined;
        }
    };
    SerializableObject.prototype.hasDefaultValue = function (property) {
        return this.getValue(property) === property.defaultValue;
    };
    SerializableObject.prototype.hasAllDefaultValues = function () {
        var s = this.getSchema();
        for (var i = 0; i < s.getCount(); i++) {
            var property_5 = s.getItemAt(i);
            if (!this.hasDefaultValue(property_5)) {
                return false;
            }
        }
        return true;
    };
    SerializableObject.prototype.resetDefaultValues = function () {
        var s = this.getSchema();
        for (var i = 0; i < s.getCount(); i++) {
            var property_6 = s.getItemAt(i);
            this.setValue(property_6, property_6.defaultValue);
        }
    };
    SerializableObject.prototype.setCustomProperty = function (name, value) {
        var shouldDeleteProperty = (typeof value === "string" && !value) || value === undefined || value === null;
        if (shouldDeleteProperty) {
            delete this._rawProperties[name];
        }
        else {
            this._rawProperties[name] = value;
        }
    };
    SerializableObject.prototype.getCustomProperty = function (name) {
        return this._rawProperties[name];
    };
    SerializableObject.prototype.getSchema = function () {
        var schema = SerializableObject._schemaCache[this.getSchemaKey()];
        if (!schema) {
            schema = new SerializableObjectSchema();
            this.populateSchema(schema);
            SerializableObject._schemaCache[this.getSchemaKey()] = schema;
        }
        return schema;
    };
    SerializableObject.defaultMaxVersion = Versions.latest;
    SerializableObject._schemaCache = {};
    return SerializableObject;
}());
exports.SerializableObject = SerializableObject;


/***/ }),

/***/ "./src/shared.ts":
/*!***********************!*\
  !*** ./src/shared.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UUID = exports.SizeAndUnit = exports.PaddingDefinition = exports.SpacingDefinition = exports.StringWithSubstitutions = exports.ContentTypes = exports.GlobalSettings = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Enums = __webpack_require__(/*! ./enums */ "./src/enums.ts");
var GlobalSettings = /** @class */ (function () {
    function GlobalSettings() {
    }
    GlobalSettings.useAdvancedTextBlockTruncation = true;
    GlobalSettings.useAdvancedCardBottomTruncation = false;
    GlobalSettings.useMarkdownInRadioButtonAndCheckbox = true;
    GlobalSettings.allowMarkForTextHighlighting = false;
    GlobalSettings.alwaysBleedSeparators = false;
    GlobalSettings.enableFullJsonRoundTrip = false;
    GlobalSettings.displayInputValidationErrors = true;
    GlobalSettings.allowPreProcessingPropertyValues = false;
    GlobalSettings.setTabIndexAtCardRoot = true;
    GlobalSettings.enableFallback = true;
    GlobalSettings.useWebkitLineClamp = true;
    GlobalSettings.allowMoreThanMaxActionsInOverflowMenu = false;
    GlobalSettings.applets = {
        logEnabled: true,
        logLevel: Enums.LogLevel.Error,
        maximumRetryAttempts: 3,
        defaultTimeBetweenRetryAttempts: 3000,
        authPromptWidth: 400,
        authPromptHeight: 600,
        refresh: {
            mode: Enums.RefreshMode.Manual,
            timeBetweenAutomaticRefreshes: 3000,
            maximumConsecutiveAutomaticRefreshes: 3,
            allowManualRefreshesAfterAutomaticRefreshes: true
        }
    };
    return GlobalSettings;
}());
exports.GlobalSettings = GlobalSettings;
exports.ContentTypes = {
    applicationJson: "application/json",
    applicationXWwwFormUrlencoded: "application/x-www-form-urlencoded"
};
var StringWithSubstitutions = /** @class */ (function () {
    function StringWithSubstitutions() {
        this._isProcessed = false;
    }
    StringWithSubstitutions.prototype.getReferencedInputs = function (inputs, referencedInputs) {
        if (!referencedInputs) {
            throw new Error("The referencedInputs parameter cannot be null.");
        }
        for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
            var input = inputs_1[_i];
            var matches = new RegExp("\\{{2}(" + input.id + ").value\\}{2}", "gi").exec(this._original);
            if (matches != null && input.id) {
                referencedInputs[input.id] = input;
            }
        }
    };
    StringWithSubstitutions.prototype.substituteInputValues = function (inputs, contentType) {
        this._processed = this._original;
        if (this._original) {
            var regEx = /\{{2}([a-z0-9_$@]+).value\}{2}/gi;
            var matches = void 0;
            while ((matches = regEx.exec(this._original)) !== null) {
                for (var _i = 0, _a = Object.keys(inputs); _i < _a.length; _i++) {
                    var key = _a[_i];
                    if (key.toLowerCase() == matches[1].toLowerCase()) {
                        var matchedInput = inputs[key];
                        var valueForReplace = "";
                        if (matchedInput.value) {
                            valueForReplace = matchedInput.value;
                        }
                        if (contentType === exports.ContentTypes.applicationJson) {
                            valueForReplace = JSON.stringify(valueForReplace);
                            valueForReplace = valueForReplace.slice(1, -1);
                        }
                        else if (contentType === exports.ContentTypes.applicationXWwwFormUrlencoded) {
                            valueForReplace = encodeURIComponent(valueForReplace);
                        }
                        this._processed = this._processed.replace(matches[0], valueForReplace);
                        break;
                    }
                }
            }
        }
        this._isProcessed = true;
    };
    StringWithSubstitutions.prototype.getOriginal = function () {
        return this._original;
    };
    StringWithSubstitutions.prototype.get = function () {
        if (!this._isProcessed) {
            return this._original;
        }
        else {
            return this._processed;
        }
    };
    StringWithSubstitutions.prototype.set = function (value) {
        this._original = value;
        this._isProcessed = false;
    };
    return StringWithSubstitutions;
}());
exports.StringWithSubstitutions = StringWithSubstitutions;
var SpacingDefinition = /** @class */ (function () {
    function SpacingDefinition(top, right, bottom, left) {
        if (top === void 0) { top = 0; }
        if (right === void 0) { right = 0; }
        if (bottom === void 0) { bottom = 0; }
        if (left === void 0) { left = 0; }
        this.left = 0;
        this.top = 0;
        this.right = 0;
        this.bottom = 0;
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
    }
    return SpacingDefinition;
}());
exports.SpacingDefinition = SpacingDefinition;
var PaddingDefinition = /** @class */ (function () {
    function PaddingDefinition(top, right, bottom, left) {
        if (top === void 0) { top = Enums.Spacing.None; }
        if (right === void 0) { right = Enums.Spacing.None; }
        if (bottom === void 0) { bottom = Enums.Spacing.None; }
        if (left === void 0) { left = Enums.Spacing.None; }
        this.top = Enums.Spacing.None;
        this.right = Enums.Spacing.None;
        this.bottom = Enums.Spacing.None;
        this.left = Enums.Spacing.None;
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
    }
    return PaddingDefinition;
}());
exports.PaddingDefinition = PaddingDefinition;
var SizeAndUnit = /** @class */ (function () {
    function SizeAndUnit(physicalSize, unit) {
        this.physicalSize = physicalSize;
        this.unit = unit;
    }
    SizeAndUnit.parse = function (input, requireUnitSpecifier) {
        if (requireUnitSpecifier === void 0) { requireUnitSpecifier = false; }
        var result = new SizeAndUnit(0, Enums.SizeUnit.Weight);
        if (typeof input === "number") {
            result.physicalSize = input;
            return result;
        }
        else if (typeof input === "string") {
            var regExp = /^([0-9]+)(px|\*)?$/g;
            var matches = regExp.exec(input);
            var expectedMatchCount = requireUnitSpecifier ? 3 : 2;
            if (matches && matches.length >= expectedMatchCount) {
                result.physicalSize = parseInt(matches[1]);
                if (matches.length == 3) {
                    if (matches[2] == "px") {
                        result.unit = Enums.SizeUnit.Pixel;
                    }
                }
                return result;
            }
        }
        throw new Error("Invalid size: " + input);
    };
    return SizeAndUnit;
}());
exports.SizeAndUnit = SizeAndUnit;
/**
 * Fast UUID generator, RFC4122 version 4 compliant.
 * @author Jeff Ward (jcward.com).
 * @license MIT license
 * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
 **/
var UUID = /** @class */ (function () {
    function UUID() {
    }
    UUID.generate = function () {
        var d0 = Math.random() * 0xffffffff | 0;
        var d1 = Math.random() * 0xffffffff | 0;
        var d2 = Math.random() * 0xffffffff | 0;
        var d3 = Math.random() * 0xffffffff | 0;
        return UUID.lut[d0 & 0xff] + UUID.lut[d0 >> 8 & 0xff] + UUID.lut[d0 >> 16 & 0xff] + UUID.lut[d0 >> 24 & 0xff] + '-' +
            UUID.lut[d1 & 0xff] + UUID.lut[d1 >> 8 & 0xff] + '-' + UUID.lut[d1 >> 16 & 0x0f | 0x40] + UUID.lut[d1 >> 24 & 0xff] + '-' +
            UUID.lut[d2 & 0x3f | 0x80] + UUID.lut[d2 >> 8 & 0xff] + '-' + UUID.lut[d2 >> 16 & 0xff] + UUID.lut[d2 >> 24 & 0xff] +
            UUID.lut[d3 & 0xff] + UUID.lut[d3 >> 8 & 0xff] + UUID.lut[d3 >> 16 & 0xff] + UUID.lut[d3 >> 24 & 0xff];
    };
    UUID.initialize = function () {
        for (var i = 0; i < 256; i++) {
            UUID.lut[i] = (i < 16 ? '0' : '') + i.toString(16);
        }
    };
    UUID.lut = [];
    return UUID;
}());
exports.UUID = UUID;
UUID.initialize();


/***/ }),

/***/ "./src/strings.ts":
/*!************************!*\
  !*** ./src/strings.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports) => {


// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Strings = void 0;
var Strings = /** @class */ (function () {
    function Strings() {
    }
    Strings.errors = {
        unknownElementType: function (typeName) { return "Unknown element type \"" + typeName + "\". Fallback will be used if present."; },
        unknownActionType: function (typeName) { return "Unknown action type \"" + typeName + "\". Fallback will be used if present."; },
        elementTypeNotAllowed: function (typeName) { return "Element type \"" + typeName + "\" is not allowed in this context."; },
        actionTypeNotAllowed: function (typeName) { return "Action type \"" + typeName + "\" is not allowed in this context."; },
        invalidPropertyValue: function (value, propertyName) { return "Invalid value \"" + value + "\" for property \"" + propertyName + "\"."; },
        showCardMustHaveCard: function () { return "\"An Action.ShowCard must have its \"card\" property set to a valid AdaptiveCard object."; },
        invalidColumnWidth: function (invalidWidth) { return "Invalid column width \"" + invalidWidth + "\" - defaulting to \"auto\"."; },
        invalidCardVersion: function (defaultingToVersion) { return "Invalid card version. Defaulting to \"" + defaultingToVersion + "\"."; },
        invalidVersionString: function (versionString) { return "Invalid version string \"" + versionString + "\"."; },
        propertyValueNotSupported: function (value, propertyName, supportedInVersion, versionUsed) { return "Value \"" + value + "\" for property \"" + propertyName + "\" is supported in version " + supportedInVersion + ", but you are using version " + versionUsed + "."; },
        propertyNotSupported: function (propertyName, supportedInVersion, versionUsed) { return "Property \"" + propertyName + "\" is supported in version " + supportedInVersion + ", but you are using version " + versionUsed + "."; },
        indexOutOfRange: function (index) { return "Index out of range (" + index + ")."; },
        elementCannotBeUsedAsInline: function () { return "RichTextBlock.addInline: the specified card element cannot be used as a RichTextBlock inline."; },
        inlineAlreadyParented: function () { return "RichTextBlock.addInline: the specified inline already belongs to another RichTextBlock."; },
        interactivityNotAllowed: function () { return "Interactivity is not allowed."; },
        inputsMustHaveUniqueId: function () { return "All inputs must have a unique Id."; },
        choiceSetMustHaveAtLeastOneChoice: function () { return "An Input.ChoiceSet must have at least one choice defined."; },
        choiceSetChoicesMustHaveTitleAndValue: function () { return "All choices in an Input.ChoiceSet must have their title and value properties set."; },
        propertyMustBeSet: function (propertyName) { return "Property \"" + propertyName + "\" must be set."; },
        actionHttpHeadersMustHaveNameAndValue: function () { return "All headers of an Action.Http must have their name and value properties set."; },
        tooManyActions: function (maximumActions) { return "Maximum number of actions exceeded (" + maximumActions + ")."; },
        columnAlreadyBelongsToAnotherSet: function () { return "This column already belongs to another ColumnSet."; },
        invalidCardType: function () { return "Invalid or missing card type. Make sure the card's type property is set to \"AdaptiveCard\"."; },
        unsupportedCardVersion: function (version, maxSupportedVersion) { return "The specified card version (" + version + ") is not supported. The maximum supported card version is " + maxSupportedVersion + "."; },
        duplicateId: function (id) { return "Duplicate Id \"" + id + "\"."; },
        markdownProcessingNotEnabled: function () { return "Markdown processing isn't enabled. Please see https://www.npmjs.com/package/adaptivecards#supporting-markdown"; },
        processMarkdownEventRemoved: function () { return "The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead."; },
        elementAlreadyParented: function () { return "The element already belongs to another container."; },
        actionAlreadyParented: function () { return "The action already belongs to another element."; },
        elementTypeNotStandalone: function (typeName) { return "Elements of type " + typeName + " cannot be used as standalone elements."; }
    };
    Strings.magicCodeInputCard = {
        tryAgain: function () { return "That didn't work... let's try again."; },
        pleaseLogin: function () { return "Please login in the popup. You will obtain a magic code. Paste that code below and select \"Submit\""; },
        enterMagicCode: function () { return "Enter magic code"; },
        pleaseEnterMagicCodeYouReceived: function () { return "Please enter the magic code you received."; },
        submit: function () { return "Submit"; },
        cancel: function () { return "Cancel"; },
        somethingWentWrong: function () { return "Something went wrong. This action can't be handled."; },
        authenticationFailed: function () { return "Authentication failed."; }
    };
    Strings.runtime = {
        automaticRefreshPaused: function () { return "Automatic refresh paused."; },
        clckToRestartAutomaticRefresh: function () { return "Click to restart."; },
        refreshThisCard: function () { return "Refresh this card"; }
    };
    Strings.hints = {
        dontUseWeightedAndStrecthedColumnsInSameSet: function () { return "It is not recommended to use weighted and stretched columns in the same ColumnSet, because in such a situation stretched columns will always get the minimum amount of space."; }
    };
    Strings.defaults = {
        inlineActionTitle: function () { return "Inline Action"; },
        overflowButtonText: function () { return "..."; },
        mediaPlayerAriaLabel: function () { return "Media content"; },
        mediaPlayerPlayMedia: function () { return "Play media"; }
    };
    return Strings;
}());
exports.Strings = Strings;


/***/ }),

/***/ "./src/table.ts":
/*!**********************!*\
  !*** ./src/table.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Table = exports.TableRow = exports.TableCell = exports.StylableContainer = exports.TableColumnDefinition = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var card_elements_1 = __webpack_require__(/*! ./card-elements */ "./src/card-elements.ts");
var enums_1 = __webpack_require__(/*! ./enums */ "./src/enums.ts");
var registry_1 = __webpack_require__(/*! ./registry */ "./src/registry.ts");
var serialization_1 = __webpack_require__(/*! ./serialization */ "./src/serialization.ts");
var shared_1 = __webpack_require__(/*! ./shared */ "./src/shared.ts");
var strings_1 = __webpack_require__(/*! ./strings */ "./src/strings.ts");
var utils_1 = __webpack_require__(/*! ./utils */ "./src/utils.ts");
var TableColumnDefinition = /** @class */ (function (_super) {
    __extends(TableColumnDefinition, _super);
    function TableColumnDefinition() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.width = new shared_1.SizeAndUnit(1, enums_1.SizeUnit.Weight);
        return _this;
    }
    TableColumnDefinition.prototype.getSchemaKey = function () {
        return "ColumnDefinition";
    };
    TableColumnDefinition.horizontalCellContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_5, "horizontalCellContentAlignment", enums_1.HorizontalAlignment);
    TableColumnDefinition.verticalCellContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_5, "verticalCellContentAlignment", enums_1.VerticalAlignment);
    TableColumnDefinition.widthProperty = new serialization_1.CustomProperty(serialization_1.Versions.v1_5, "width", function (sender, property, source, context) {
        var result = property.defaultValue;
        var value = source[property.name];
        var invalidWidth = false;
        if (typeof value === "number" && !isNaN(value)) {
            result = new shared_1.SizeAndUnit(value, enums_1.SizeUnit.Weight);
        }
        else if (typeof value === "string") {
            try {
                result = shared_1.SizeAndUnit.parse(value);
            }
            catch (e) {
                invalidWidth = true;
            }
        }
        else {
            invalidWidth = true;
        }
        if (invalidWidth) {
            context.logParseEvent(sender, enums_1.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidColumnWidth(value));
        }
        return result;
    }, function (sender, property, target, value, context) {
        if (value.unit === enums_1.SizeUnit.Pixel) {
            context.serializeValue(target, "width", value.physicalSize + "px");
        }
        else {
            context.serializeNumber(target, "width", value.physicalSize);
        }
    }, new shared_1.SizeAndUnit(1, enums_1.SizeUnit.Weight));
    __decorate([
        (0, serialization_1.property)(TableColumnDefinition.horizontalCellContentAlignmentProperty)
    ], TableColumnDefinition.prototype, "horizontalCellContentAlignment", void 0);
    __decorate([
        (0, serialization_1.property)(TableColumnDefinition.verticalCellContentAlignmentProperty)
    ], TableColumnDefinition.prototype, "verticalCellContentAlignment", void 0);
    __decorate([
        (0, serialization_1.property)(TableColumnDefinition.widthProperty)
    ], TableColumnDefinition.prototype, "width", void 0);
    return TableColumnDefinition;
}(serialization_1.SerializableObject));
exports.TableColumnDefinition = TableColumnDefinition;
var StylableContainer = /** @class */ (function (_super) {
    __extends(StylableContainer, _super);
    function StylableContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._items = [];
        return _this;
    }
    StylableContainer.prototype.parseItem = function (source, context) {
        var _this = this;
        return context.parseCardObject(this, source, [], // Forbidden types not supported for elements for now
        !this.isDesignMode(), function (typeName) {
            return _this.createItemInstance(typeName);
        }, function (typeName, errorType) {
            context.logParseEvent(undefined, enums_1.ValidationEvent.ElementTypeNotAllowed, strings_1.Strings.errors.elementTypeNotAllowed(typeName));
        });
    };
    StylableContainer.prototype.internalAddItem = function (item) {
        if (!item.parent) {
            this._items.push(item);
            item.setParent(this);
        }
        else {
            throw new Error(strings_1.Strings.errors.elementAlreadyParented());
        }
    };
    StylableContainer.prototype.internalRemoveItem = function (item) {
        var itemIndex = this._items.indexOf(item);
        if (itemIndex >= 0) {
            this._items.splice(itemIndex, 1);
            item.setParent(undefined);
            this.updateLayout();
            return true;
        }
        return false;
    };
    StylableContainer.prototype.internalParse = function (source, context) {
        _super.prototype.internalParse.call(this, source, context);
        this._items = [];
        var items = source[this.getCollectionPropertyName()];
        if (Array.isArray(items)) {
            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                var item = items_1[_i];
                var instance = this.parseItem(item, context);
                if (instance) {
                    this._items.push(instance);
                }
            }
        }
    };
    StylableContainer.prototype.internalToJSON = function (target, context) {
        _super.prototype.internalToJSON.call(this, target, context);
        context.serializeArray(target, this.getCollectionPropertyName(), this._items);
    };
    StylableContainer.prototype.removeItem = function (item) {
        return this.internalRemoveItem(item);
    };
    StylableContainer.prototype.getItemCount = function () {
        return this._items.length;
    };
    StylableContainer.prototype.getItemAt = function (index) {
        return this._items[index];
    };
    StylableContainer.prototype.getFirstVisibleRenderedItem = function () {
        return this.getItemCount() > 0 ? this.getItemAt(0) : undefined;
    };
    StylableContainer.prototype.getLastVisibleRenderedItem = function () {
        return this.getItemCount() > 0 ? this.getItemAt(this.getItemCount() - 1) : undefined;
    };
    return StylableContainer;
}(card_elements_1.StylableCardElementContainer));
exports.StylableContainer = StylableContainer;
var TableCell = /** @class */ (function (_super) {
    __extends(TableCell, _super);
    function TableCell() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._columnIndex = -1;
        _this._cellType = "data";
        return _this;
    }
    TableCell.prototype.getHasBorder = function () {
        return this.parentRow.parentTable.showGridLines;
    };
    TableCell.prototype.applyBorder = function () {
        if (this.renderedElement && this.getHasBorder()) {
            var styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.parentRow.parentTable.gridStyle);
            if (styleDefinition.borderColor) {
                var borderColor = (0, utils_1.stringToCssColor)(styleDefinition.borderColor);
                if (borderColor) {
                    this.renderedElement.style.borderRight = "1px solid " + borderColor;
                    this.renderedElement.style.borderBottom = "1px solid " + borderColor;
                }
            }
        }
    };
    TableCell.prototype.getDefaultPadding = function () {
        return this.getHasBackground() || this.getHasBorder() ?
            new shared_1.PaddingDefinition(enums_1.Spacing.Small, enums_1.Spacing.Small, enums_1.Spacing.Small, enums_1.Spacing.Small) : _super.prototype.getDefaultPadding.call(this);
    };
    TableCell.prototype.internalRender = function () {
        var cellElement = _super.prototype.internalRender.call(this);
        if (cellElement) {
            cellElement.setAttribute("role", this.cellType === "data" ? "cell" : "columnheader");
            cellElement.style.minWidth = "0";
            if (this.cellType === "header") {
                cellElement.setAttribute("scope", "col");
            }
        }
        return cellElement;
    };
    TableCell.prototype.shouldSerialize = function (context) {
        return true;
    };
    TableCell.prototype.getJsonTypeName = function () {
        return "TableCell";
    };
    TableCell.prototype.getEffectiveTextStyleDefinition = function () {
        if (this.cellType === "header") {
            return this.hostConfig.textStyles.columnHeader;
        }
        return _super.prototype.getEffectiveTextStyleDefinition.call(this);
    };
    TableCell.prototype.getEffectiveHorizontalAlignment = function () {
        if (this.horizontalAlignment !== undefined) {
            return this.horizontalAlignment;
        }
        if (this.parentRow.horizontalCellContentAlignment !== undefined) {
            return this.parentRow.horizontalCellContentAlignment;
        }
        if (this.columnIndex >= 0) {
            var horizontalAlignment = this.parentRow.parentTable.getColumnAt(this.columnIndex).horizontalCellContentAlignment;
            if (horizontalAlignment !== undefined) {
                return horizontalAlignment;
            }
        }
        if (this.parentRow.parentTable.horizontalCellContentAlignment !== undefined) {
            return this.parentRow.parentTable.horizontalCellContentAlignment;
        }
        return _super.prototype.getEffectiveHorizontalAlignment.call(this);
    };
    TableCell.prototype.getEffectiveVerticalContentAlignment = function () {
        if (this.verticalContentAlignment !== undefined) {
            return this.verticalContentAlignment;
        }
        if (this.parentRow.verticalCellContentAlignment !== undefined) {
            return this.parentRow.verticalCellContentAlignment;
        }
        if (this.columnIndex >= 0) {
            var verticalAlignment = this.parentRow.parentTable.getColumnAt(this.columnIndex).verticalCellContentAlignment;
            if (verticalAlignment !== undefined) {
                return verticalAlignment;
            }
        }
        if (this.parentRow.parentTable.verticalCellContentAlignment !== undefined) {
            return this.parentRow.parentTable.verticalCellContentAlignment;
        }
        return _super.prototype.getEffectiveVerticalContentAlignment.call(this);
    };
    Object.defineProperty(TableCell.prototype, "columnIndex", {
        get: function () {
            return this._columnIndex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TableCell.prototype, "cellType", {
        get: function () {
            return this._cellType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TableCell.prototype, "parentRow", {
        get: function () {
            return this.parent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TableCell.prototype, "isStandalone", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    return TableCell;
}(card_elements_1.Container));
exports.TableCell = TableCell;
var TableRow = /** @class */ (function (_super) {
    __extends(TableRow, _super);
    function TableRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    //#endregion
    TableRow.prototype.getDefaultPadding = function () {
        return new shared_1.PaddingDefinition(enums_1.Spacing.None, enums_1.Spacing.None, enums_1.Spacing.None, enums_1.Spacing.None);
    };
    TableRow.prototype.applyBackground = function () {
        if (this.renderedElement) {
            var styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.style, this.hostConfig.containerStyles.getStyleByName(this.defaultStyle));
            if (styleDefinition.backgroundColor) {
                var bgColor = (0, utils_1.stringToCssColor)(styleDefinition.backgroundColor);
                this.renderedElement.style.backgroundColor = bgColor;
            }
        }
    };
    TableRow.prototype.getCollectionPropertyName = function () {
        return "cells";
    };
    TableRow.prototype.createItemInstance = function (typeName) {
        return !typeName || typeName === "TableCell" ? new TableCell() : undefined;
    };
    TableRow.prototype.internalRender = function () {
        var isFirstRow = this.getIsFirstRow();
        var cellSpacing = this.hostConfig.table.cellSpacing;
        var rowElement = document.createElement("div");
        rowElement.setAttribute("role", "row");
        rowElement.style.display = "flex";
        rowElement.style.flexDirection = "row";
        for (var i = 0; i < Math.min(this.getItemCount(), this.parentTable.getColumnCount()); i++) {
            var cell = this.getItemAt(i);
            // Cheating a bit in order to keep cellType read-only
            cell["_columnIndex"] = i;
            cell["_cellType"] = (this.parentTable.firstRowAsHeaders && isFirstRow) ? "header" : "data";
            var renderedCell = cell.render();
            if (renderedCell) {
                var column = this.parentTable.getColumnAt(i);
                if (column.computedWidth.unit === enums_1.SizeUnit.Pixel) {
                    renderedCell.style.flex = "0 0 " + column.computedWidth.physicalSize + "px";
                }
                else {
                    renderedCell.style.flex = "1 1 " + column.computedWidth.physicalSize + "%";
                }
                if (i > 0 && !this.parentTable.showGridLines && cellSpacing > 0) {
                    renderedCell.style.marginLeft = cellSpacing + "px";
                }
                rowElement.appendChild(renderedCell);
            }
        }
        return rowElement.children.length > 0 ? rowElement : undefined;
    };
    TableRow.prototype.shouldSerialize = function (context) {
        return true;
    };
    TableRow.prototype.addCell = function (cell) {
        this.internalAddItem(cell);
    };
    TableRow.prototype.removeCellAt = function (columnIndex) {
        if (columnIndex >= 0 && columnIndex < this.getItemCount()) {
            return this.removeItem(this.getItemAt(columnIndex));
        }
        return false;
    };
    TableRow.prototype.ensureHasEnoughCells = function (cellCount) {
        while (this.getItemCount() < cellCount) {
            this.addCell(new TableCell());
        }
    };
    TableRow.prototype.getJsonTypeName = function () {
        return "TableRow";
    };
    TableRow.prototype.getIsFirstRow = function () {
        return this.parentTable.getItemAt(0) === this;
    };
    Object.defineProperty(TableRow.prototype, "parentTable", {
        get: function () {
            return this.parent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TableRow.prototype, "isStandalone", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    //#region Schema
    TableRow.styleProperty = new card_elements_1.ContainerStyleProperty(serialization_1.Versions.v1_5, "style");
    TableRow.horizontalCellContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_5, "horizontalCellContentAlignment", enums_1.HorizontalAlignment);
    TableRow.verticalCellContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_5, "verticalCellContentAlignment", enums_1.VerticalAlignment);
    __decorate([
        (0, serialization_1.property)(TableRow.horizontalCellContentAlignmentProperty)
    ], TableRow.prototype, "horizontalCellContentAlignment", void 0);
    __decorate([
        (0, serialization_1.property)(TableRow.verticalCellContentAlignmentProperty)
    ], TableRow.prototype, "verticalCellContentAlignment", void 0);
    return TableRow;
}(StylableContainer));
exports.TableRow = TableRow;
var Table = /** @class */ (function (_super) {
    __extends(Table, _super);
    function Table() {
        //#region Schema
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._columns = [];
        _this.firstRowAsHeaders = true;
        _this.showGridLines = true;
        return _this;
    }
    Object.defineProperty(Table.prototype, "gridStyle", {
        get: function () {
            var style = this.getValue(Table.gridStyleProperty);
            if (style && this.hostConfig.containerStyles.getStyleByName(style)) {
                return style;
            }
            return undefined;
        },
        set: function (value) {
            this.setValue(Table.gridStyleProperty, value);
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    Table.prototype.ensureRowsHaveEnoughCells = function () {
        for (var i = 0; i < this.getItemCount(); i++) {
            this.getItemAt(i).ensureHasEnoughCells(this.getColumnCount());
        }
    };
    Table.prototype.removeCellsFromColumn = function (columnIndex) {
        for (var i = 0; i < this.getItemCount(); i++) {
            this.getItemAt(i).removeCellAt(columnIndex);
        }
    };
    Table.prototype.getCollectionPropertyName = function () {
        return "rows";
    };
    Table.prototype.createItemInstance = function (typeName) {
        return !typeName || typeName === "TableRow" ? new TableRow() : undefined;
    };
    Table.prototype.internalParse = function (source, context) {
        _super.prototype.internalParse.call(this, source, context);
        this.ensureRowsHaveEnoughCells();
    };
    Table.prototype.internalRender = function () {
        if (this.getItemCount() > 0) {
            var totalWeights = 0;
            for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
                var column = _a[_i];
                if (column.width.unit === enums_1.SizeUnit.Weight) {
                    totalWeights += column.width.physicalSize;
                }
            }
            for (var _b = 0, _c = this._columns; _b < _c.length; _b++) {
                var column = _c[_b];
                if (column.width.unit === enums_1.SizeUnit.Pixel) {
                    column.computedWidth = new shared_1.SizeAndUnit(column.width.physicalSize, enums_1.SizeUnit.Pixel);
                }
                else {
                    column.computedWidth = new shared_1.SizeAndUnit(100 / totalWeights * column.width.physicalSize, enums_1.SizeUnit.Weight);
                }
            }
            var tableElement = document.createElement("div");
            tableElement.setAttribute("role", "table");
            tableElement.style.display = "flex";
            tableElement.style.flexDirection = "column";
            if (this.showGridLines) {
                var styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.gridStyle);
                if (styleDefinition.borderColor) {
                    var borderColor = (0, utils_1.stringToCssColor)(styleDefinition.borderColor);
                    if (borderColor) {
                        tableElement.style.borderTop = "1px solid " + borderColor;
                        tableElement.style.borderLeft = "1px solid " + borderColor;
                    }
                }
            }
            var cellSpacing = this.hostConfig.table.cellSpacing;
            for (var i = 0; i < this.getItemCount(); i++) {
                var renderedRow = this.getItemAt(i).render();
                if (renderedRow) {
                    if (i > 0 && !this.showGridLines && cellSpacing > 0) {
                        var separatorRow = document.createElement("div");
                        separatorRow.setAttribute("aria-hidden", "true");
                        separatorRow.style.height = cellSpacing + "px";
                        tableElement.appendChild(separatorRow);
                    }
                    tableElement.appendChild(renderedRow);
                }
            }
            return tableElement;
        }
        return undefined;
    };
    Table.prototype.addColumn = function (column) {
        this._columns.push(column);
        this.ensureRowsHaveEnoughCells();
    };
    Table.prototype.removeColumn = function (column) {
        var index = this._columns.indexOf(column);
        if (index >= 0) {
            this.removeCellsFromColumn(index);
            this._columns.splice(index, 1);
        }
    };
    Table.prototype.getColumnCount = function () {
        return this._columns.length;
    };
    Table.prototype.getColumnAt = function (index) {
        return this._columns[index];
    };
    Table.prototype.addRow = function (row) {
        this.internalAddItem(row);
        row.ensureHasEnoughCells(this.getColumnCount());
    };
    Table.prototype.getJsonTypeName = function () {
        return "Table";
    };
    Table.columnsProperty = new serialization_1.SerializableObjectCollectionProperty(serialization_1.Versions.v1_5, "columns", TableColumnDefinition);
    Table.firstRowAsHeadersProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_5, "firstRowAsHeaders", true);
    Table.showGridLinesProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_5, "showGridLines", true);
    Table.gridStyleProperty = new card_elements_1.ContainerStyleProperty(serialization_1.Versions.v1_5, "gridStyle");
    Table.horizontalCellContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_5, "horizontalCellContentAlignment", enums_1.HorizontalAlignment);
    Table.verticalCellContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_5, "verticalCellContentAlignment", enums_1.VerticalAlignment);
    __decorate([
        (0, serialization_1.property)(Table.columnsProperty)
    ], Table.prototype, "_columns", void 0);
    __decorate([
        (0, serialization_1.property)(Table.firstRowAsHeadersProperty)
    ], Table.prototype, "firstRowAsHeaders", void 0);
    __decorate([
        (0, serialization_1.property)(Table.showGridLinesProperty)
    ], Table.prototype, "showGridLines", void 0);
    __decorate([
        (0, serialization_1.property)(Table.gridStyleProperty)
    ], Table.prototype, "gridStyle", null);
    __decorate([
        (0, serialization_1.property)(Table.horizontalCellContentAlignmentProperty)
    ], Table.prototype, "horizontalCellContentAlignment", void 0);
    __decorate([
        (0, serialization_1.property)(Table.verticalCellContentAlignmentProperty)
    ], Table.prototype, "verticalCellContentAlignment", void 0);
    return Table;
}(StylableContainer));
exports.Table = Table;
registry_1.GlobalRegistry.defaultElements.register("Table", Table, serialization_1.Versions.v1_5);


/***/ }),

/***/ "./src/text-formatters.ts":
/*!********************************!*\
  !*** ./src/text-formatters.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formatText = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var AbstractTextFormatter = /** @class */ (function () {
    function AbstractTextFormatter(regularExpression) {
        this._regularExpression = regularExpression;
    }
    AbstractTextFormatter.prototype.format = function (lang, input) {
        var matches;
        if (input) {
            var result = input;
            while ((matches = this._regularExpression.exec(input)) != null) {
                result = result.replace(matches[0], this.internalFormat(lang, matches));
            }
            ;
            return result;
        }
        else {
            return input;
        }
    };
    return AbstractTextFormatter;
}());
var DateFormatter = /** @class */ (function (_super) {
    __extends(DateFormatter, _super);
    function DateFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DateFormatter.prototype.internalFormat = function (lang, matches) {
        var date = new Date(Date.parse(matches[1]));
        var format = matches[2] != undefined ? matches[2].toLowerCase() : "compact";
        if (format != "compact") {
            return date.toLocaleDateString(lang, { day: "numeric", weekday: format, month: format, year: "numeric" });
        }
        else {
            return date.toLocaleDateString();
        }
    };
    return DateFormatter;
}(AbstractTextFormatter));
var TimeFormatter = /** @class */ (function (_super) {
    __extends(TimeFormatter, _super);
    function TimeFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TimeFormatter.prototype.internalFormat = function (lang, matches) {
        var date = new Date(Date.parse(matches[1]));
        return date.toLocaleTimeString(lang, { hour: 'numeric', minute: '2-digit' });
    };
    return TimeFormatter;
}(AbstractTextFormatter));
function formatText(lang, text) {
    var formatters = [
        new DateFormatter(/\{{2}DATE\((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:Z|(?:(?:-|\+)\d{2}:\d{2})))(?:, ?(COMPACT|LONG|SHORT))?\)\}{2}/g),
        new TimeFormatter(/\{{2}TIME\((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:Z|(?:(?:-|\+)\d{2}:\d{2})))\)\}{2}/g)
    ];
    var result = text;
    for (var _i = 0, formatters_1 = formatters; _i < formatters_1.length; _i++) {
        var formatter = formatters_1[_i];
        result = formatter.format(lang, result);
    }
    return result;
}
exports.formatText = formatText;


/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.clearElementChildren = exports.getScrollY = exports.getScrollX = exports.getFitStatus = exports.truncate = exports.stringToCssColor = exports.parseEnum = exports.getEnumValueByName = exports.parseBool = exports.parseNumber = exports.parseString = exports.appendChild = exports.generateUniqueId = exports.isMobileOS = exports.isInternetExplorer = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Enums = __webpack_require__(/*! ./enums */ "./src/enums.ts");
var Shared = __webpack_require__(/*! ./shared */ "./src/shared.ts");
function isInternetExplorer() {
    // The documentMode property only exists in IE
    return window.document.documentMode !== undefined;
}
exports.isInternetExplorer = isInternetExplorer;
function isMobileOS() {
    var userAgent = window.navigator.userAgent;
    return !!userAgent.match(/Android/i) || !!userAgent.match(/iPad/i) || !!userAgent.match(/iPhone/i);
}
exports.isMobileOS = isMobileOS;
/**
 * Generate a UUID prepended with "__ac-"
 */
function generateUniqueId() {
    return "__ac-" + Shared.UUID.generate();
}
exports.generateUniqueId = generateUniqueId;
function appendChild(node, child) {
    if (child) {
        node.appendChild(child);
    }
}
exports.appendChild = appendChild;
function parseString(obj, defaultValue) {
    return typeof obj === "string" ? obj : defaultValue;
}
exports.parseString = parseString;
function parseNumber(obj, defaultValue) {
    return typeof obj === "number" ? obj : defaultValue;
}
exports.parseNumber = parseNumber;
function parseBool(value, defaultValue) {
    if (typeof value === "boolean") {
        return value;
    }
    else if (typeof value === "string") {
        switch (value.toLowerCase()) {
            case "true":
                return true;
            case "false":
                return false;
            default:
                return defaultValue;
        }
    }
    return defaultValue;
}
exports.parseBool = parseBool;
function getEnumValueByName(enumType, name) {
    for (var key in enumType) {
        var keyAsNumber = parseInt(key, 10);
        if (keyAsNumber >= 0) {
            var value = enumType[key];
            if (value && typeof value === "string" && value.toLowerCase() === name.toLowerCase()) {
                return keyAsNumber;
            }
        }
    }
    return undefined;
}
exports.getEnumValueByName = getEnumValueByName;
function parseEnum(enumType, name, defaultValue) {
    if (!name) {
        return defaultValue;
    }
    var enumValue = getEnumValueByName(enumType, name);
    return enumValue !== undefined ? enumValue : defaultValue;
}
exports.parseEnum = parseEnum;
function stringToCssColor(color) {
    if (color) {
        var regEx = /#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?/gi;
        var matches = regEx.exec(color);
        if (matches && matches[4]) {
            var a = parseInt(matches[1], 16) / 255;
            var r = parseInt(matches[2], 16);
            var g = parseInt(matches[3], 16);
            var b = parseInt(matches[4], 16);
            return "rgba(" + r + "," + g + "," + b + "," + a + ")";
        }
    }
    return color;
}
exports.stringToCssColor = stringToCssColor;
function truncate(element, maxHeight, lineHeight) {
    var fits = function () {
        // Allow a one pixel overflow to account for rounding differences
        // between browsers
        return maxHeight - element.scrollHeight >= -1.0;
    };
    if (fits())
        return;
    var fullText = element.innerHTML;
    var truncateAt = function (idx) {
        element.innerHTML = fullText.substring(0, idx) + '...';
    };
    var breakableIndices = findBreakableIndices(fullText);
    var lo = 0;
    var hi = breakableIndices.length;
    var bestBreakIdx = 0;
    // Do a binary search for the longest string that fits
    while (lo < hi) {
        var mid = Math.floor((lo + hi) / 2);
        truncateAt(breakableIndices[mid]);
        if (fits()) {
            bestBreakIdx = breakableIndices[mid];
            lo = mid + 1;
        }
        else {
            hi = mid;
        }
    }
    truncateAt(bestBreakIdx);
    // If we have extra room, try to expand the string letter by letter
    // (covers the case where we have to break in the middle of a long word)
    if (lineHeight && maxHeight - element.scrollHeight >= lineHeight - 1.0) {
        var idx = findNextCharacter(fullText, bestBreakIdx);
        while (idx < fullText.length) {
            truncateAt(idx);
            if (fits()) {
                bestBreakIdx = idx;
                idx = findNextCharacter(fullText, idx);
            }
            else {
                break;
            }
        }
        truncateAt(bestBreakIdx);
    }
}
exports.truncate = truncate;
function findBreakableIndices(html) {
    var results = [];
    var idx = findNextCharacter(html, -1);
    while (idx < html.length) {
        if (html[idx] == ' ') {
            results.push(idx);
        }
        idx = findNextCharacter(html, idx);
    }
    return results;
}
function findNextCharacter(html, currIdx) {
    currIdx += 1;
    // If we found the start of an HTML tag, keep advancing until we get
    // past it, so we don't end up truncating in the middle of the tag
    while (currIdx < html.length && html[currIdx] == '<') {
        while (currIdx < html.length && html[currIdx++] != '>')
            ;
    }
    return currIdx;
}
function getFitStatus(element, containerEnd) {
    var start = element.offsetTop;
    var end = start + element.clientHeight;
    if (end <= containerEnd) {
        return Enums.ContainerFitStatus.FullyInContainer;
    }
    else if (start < containerEnd) {
        return Enums.ContainerFitStatus.Overflowing;
    }
    else {
        return Enums.ContainerFitStatus.FullyOutOfContainer;
    }
}
exports.getFitStatus = getFitStatus;
function getScrollX() {
    return window.pageXOffset;
}
exports.getScrollX = getScrollX;
function getScrollY() {
    return window.pageYOffset;
}
exports.getScrollY = getScrollY;
function clearElementChildren(element) {
    while (element.firstChild) {
        element.removeChild(element.firstChild);
    }
}
exports.clearElementChildren = clearElementChildren;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/adaptivecards.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxDQUFDLE1BQU0sRUFBRSxHQUFHLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFFeEMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHO1lBQy9HLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRztZQUN6SCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQztZQUNuSCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFH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QUFFRCxTQUFnQixZQUFZLENBQUMsT0FBb0IsRUFBRSxZQUFvQjtJQUNuRSxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQzlCLElBQUksR0FBRyxHQUFHLEtBQUssR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO0lBRXZDLElBQUksR0FBRyxJQUFJLFlBQVksRUFBRTtRQUNyQixPQUFPLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztLQUNwRDtTQUNJLElBQUksS0FBSyxHQUFHLFlBQVksRUFBRTtRQUMzQixPQUFPLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUM7S0FDL0M7U0FDSTtRQUNELE9BQU8sS0FBSyxDQUFDLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDO0tBQ3ZEO0FBQ0wsQ0FBQztBQWJELG9DQWFDO0FBRUQsU0FBZ0IsVUFBVTtJQUN0QixPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDOUIsQ0FBQztBQUZELGdDQUVDO0FBRUQsU0FBZ0IsVUFBVTtJQUN0QixPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDOUIsQ0FBQztBQUZELGdDQUVDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsT0FBb0I7SUFDckQsT0FBTyxPQUFPLENBQUMsVUFBVSxFQUFFO1FBQ3ZCLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQzNDO0FBQ0wsQ0FBQztBQUpELG9EQUlDOzs7Ozs7O1VDM05EO1VBQ0E7O1VBRUE7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7O1VBRUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7Ozs7VUV0QkE7VUFDQTtVQUNBO1VBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BZGFwdGl2ZUNhcmRzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9BZGFwdGl2ZUNhcmRzLy4vc3JjL2FjdGl2aXR5LXJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vQWRhcHRpdmVDYXJkcy8uL3NyYy9hZGFwdGl2ZS1hcHBsZXQudHMiLCJ3ZWJwYWNrOi8vQWRhcHRpdmVDYXJkcy8uL3NyYy9hZGFwdGl2ZWNhcmRzLnRzIiwid2VicGFjazovL0FkYXB0aXZlQ2FyZHMvLi9zcmMvY2FyZC1lbGVtZW50cy50cyIsIndlYnBhY2s6Ly9BZGFwdGl2ZUNhcmRzLy4vc3JjL2NhcmQtb2JqZWN0LnRzIiwid2VicGFjazovL0FkYXB0aXZlQ2FyZHMvLi9zcmMvY2hhbm5lbC1hZGFwdGVyLnRzIiwid2VicGFjazovL0FkYXB0aXZlQ2FyZHMvLi9zcmMvY29udHJvbHMvY29sbGVjdGlvbi50cyIsIndlYnBhY2s6Ly9BZGFwdGl2ZUNhcmRzLy4vc3JjL2NvbnRyb2xzL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9BZGFwdGl2ZUNhcmRzLy4vc3JjL2NvbnRyb2xzL2luZGV4LnRzIiwid2VicGFjazovL0FkYXB0aXZlQ2FyZHMvLi9zcmMvY29udHJvbHMvbWVudS1pdGVtLnRzIiwid2VicGFjazovL0FkYXB0aXZlQ2FyZHMvLi9zcmMvY29udHJvbHMvcG9wdXAtY29udHJvbC50cyIsIndlYnBhY2s6Ly9BZGFwdGl2ZUNhcmRzLy4vc3JjL2NvbnRyb2xzL3BvcHVwLW1lbnUudHMiLCJ3ZWJwYWNrOi8vQWRhcHRpdmVDYXJkcy8uL3NyYy9lbnVtcy50cyIsIndlYnBhY2s6Ly9BZGFwdGl2ZUNhcmRzLy4vc3JjL2hvc3QtY2FwYWJpbGl0aWVzLnRzIiwid2VicGFjazovL0FkYXB0aXZlQ2FyZHMvLi9zcmMvaG9zdC1jb25maWcudHMiLCJ3ZWJwYWNrOi8vQWRhcHRpdmVDYXJkcy8uL3NyYy9yZWdpc3RyeS50cyIsIndlYnBhY2s6Ly9BZGFwdGl2ZUNhcmRzLy4vc3JjL3NlcmlhbGl6YXRpb24udHMiLCJ3ZWJwYWNrOi8vQWRhcHRpdmVDYXJkcy8uL3NyYy9zaGFyZWQudHMiLCJ3ZWJwYWNrOi8vQWRhcHRpdmVDYXJkcy8uL3NyYy9zdHJpbmdzLnRzIiwid2VicGFjazovL0FkYXB0aXZlQ2FyZHMvLi9zcmMvdGFibGUudHMiLCJ3ZWJwYWNrOi8vQWRhcHRpdmVDYXJkcy8uL3NyYy90ZXh0LWZvcm1hdHRlcnMudHMiLCJ3ZWJwYWNrOi8vQWRhcHRpdmVDYXJkcy8uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly9BZGFwdGl2ZUNhcmRzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0FkYXB0aXZlQ2FyZHMvd2VicGFjay9iZWZvcmUtc3RhcnR1cCIsIndlYnBhY2s6Ly9BZGFwdGl2ZUNhcmRzL3dlYnBhY2svc3RhcnR1cCIsIndlYnBhY2s6Ly9BZGFwdGl2ZUNhcmRzL3dlYnBhY2svYWZ0ZXItc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJBZGFwdGl2ZUNhcmRzXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkFkYXB0aXZlQ2FyZHNcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCJpbXBvcnQgeyBBdXRoZW50aWNhdGlvbiwgQXV0aENhcmRCdXR0b24sIEV4ZWN1dGVBY3Rpb24sIFRva2VuRXhjaGFuZ2VSZXNvdXJjZSB9IGZyb20gXCIuL2NhcmQtZWxlbWVudHNcIjtcblxuZXhwb3J0IGVudW0gQWN0aXZpdHlSZXF1ZXN0VHJpZ2dlciB7XG4gICAgQXV0b21hdGljID0gXCJhdXRvbWF0aWNcIixcbiAgICBNYW51YWwgPSBcIm1hbnVhbFwiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElBY3Rpdml0eVJlcXVlc3Qge1xuICAgIHJlYWRvbmx5IGFjdGlvbjogRXhlY3V0ZUFjdGlvbjtcbiAgICByZWFkb25seSB0cmlnZ2VyOiBBY3Rpdml0eVJlcXVlc3RUcmlnZ2VyO1xuICAgIHJlYWRvbmx5IGF0dGVtcHROdW1iZXI6IG51bWJlcjtcbiAgICByZWFkb25seSBjb25zZWN1dGl2ZVJlZnJlc2hlczogbnVtYmVyO1xuXG4gICAgYXV0aENvZGU/OiBzdHJpbmc7XG4gICAgYXV0aFRva2VuPzogc3RyaW5nO1xuXG4gICAgcmV0cnlBc3luYygpOiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgQWN0aXZpdHlSZXF1ZXN0RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGNvZGU/OiBzdHJpbmcsIHJlYWRvbmx5IG1lc3NhZ2U/OiBzdHJpbmcpIHsgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWN0aXZpdHlSZXNwb25zZSB7XG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgcmVxdWVzdDogSUFjdGl2aXR5UmVxdWVzdCkgeyB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdWNjZXNzUmVzcG9uc2UgZXh0ZW5kcyBBY3Rpdml0eVJlc3BvbnNlIHtcbiAgICBjb25zdHJ1Y3RvcihyZWFkb25seSByZXF1ZXN0OiBJQWN0aXZpdHlSZXF1ZXN0LCByZWFkb25seSByYXdDb250ZW50Pzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHJlcXVlc3QpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVycm9yUmVzcG9uc2UgZXh0ZW5kcyBBY3Rpdml0eVJlc3BvbnNlIHtcbiAgICBjb25zdHJ1Y3RvcihyZWFkb25seSByZXF1ZXN0OiBJQWN0aXZpdHlSZXF1ZXN0LCByZWFkb25seSBlcnJvcjogQWN0aXZpdHlSZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgc3VwZXIocmVxdWVzdCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9naW5SZXF1ZXN0UmVzcG9uc2UgZXh0ZW5kcyBBY3Rpdml0eVJlc3BvbnNlIHtcbiAgICByZWFkb25seSBzaWduaW5CdXR0b24/OiBBdXRoQ2FyZEJ1dHRvbjtcblxuICAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlcXVlc3Q6IElBY3Rpdml0eVJlcXVlc3QsIHByaXZhdGUgX2F1dGg6IEF1dGhlbnRpY2F0aW9uKSB7XG4gICAgICAgIHN1cGVyKHJlcXVlc3QpO1xuXG4gICAgICAgIGZvciAobGV0IGJ1dHRvbiBvZiB0aGlzLl9hdXRoLmJ1dHRvbnMpIHtcbiAgICAgICAgICAgIGlmIChidXR0b24udHlwZSA9PT0gXCJzaWduaW5cIiAmJiBidXR0b24udmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBVUkwoYnV0dG9uLnZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpZ25pbkJ1dHRvbiA9IGJ1dHRvbjtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIHBhcnNpbmcgZXJyb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgdG9rZW5FeGNoYW5nZVJlc291cmNlKCk6IFRva2VuRXhjaGFuZ2VSZXNvdXJjZSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRoLnRva2VuRXhjaGFuZ2VSZXNvdXJjZTtcbiAgICB9XG59IiwiaW1wb3J0ICogYXMgRW51bXMgZnJvbSBcIi4vZW51bXNcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBHbG9iYWxTZXR0aW5ncyB9IGZyb20gXCIuL3NoYXJlZFwiO1xuaW1wb3J0IHsgQ2hhbm5lbEFkYXB0ZXIgfSBmcm9tIFwiLi9jaGFubmVsLWFkYXB0ZXJcIjtcbmltcG9ydCB7IEFjdGl2aXR5UmVzcG9uc2UsIElBY3Rpdml0eVJlcXVlc3QsIEFjdGl2aXR5UmVxdWVzdFRyaWdnZXIsIFN1Y2Nlc3NSZXNwb25zZSwgRXJyb3JSZXNwb25zZSwgTG9naW5SZXF1ZXN0UmVzcG9uc2UgfSBmcm9tIFwiLi9hY3Rpdml0eS1yZXF1ZXN0XCI7XG5pbXBvcnQgeyBTdHJpbmdzIH0gZnJvbSBcIi4vc3RyaW5nc1wiO1xuaW1wb3J0IHsgU3VibWl0QWN0aW9uLCBFeGVjdXRlQWN0aW9uLCBTZXJpYWxpemF0aW9uQ29udGV4dCwgQWRhcHRpdmVDYXJkLCBBY3Rpb24sIElucHV0LCBBdXRoZW50aWNhdGlvbiwgVG9rZW5FeGNoYW5nZVJlc291cmNlLCBBdXRoQ2FyZEJ1dHRvbiwgQ2FyZEVsZW1lbnQgfSBmcm9tIFwiLi9jYXJkLWVsZW1lbnRzXCI7XG5pbXBvcnQgeyBWZXJzaW9ucyB9IGZyb20gXCIuL3NlcmlhbGl6YXRpb25cIjtcbmltcG9ydCB7IEhvc3RDb25maWcgfSBmcm9tIFwiLi9ob3N0LWNvbmZpZ1wiO1xuXG5mdW5jdGlvbiBsb2dFdmVudChsZXZlbDogRW51bXMuTG9nTGV2ZWwsIG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkge1xuICAgIGlmIChHbG9iYWxTZXR0aW5ncy5hcHBsZXRzLmxvZ0VuYWJsZWQpIHtcbiAgICAgICAgaWYgKEdsb2JhbFNldHRpbmdzLmFwcGxldHMub25Mb2dFdmVudCkge1xuICAgICAgICAgICAgR2xvYmFsU2V0dGluZ3MuYXBwbGV0cy5vbkxvZ0V2ZW50KGxldmVsLCBtZXNzYWdlLCBvcHRpb25hbFBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5Mb2dMZXZlbC5XYXJuaW5nOlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkxvZ0xldmVsLkVycm9yOlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIG9wdGlvbmFsUGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQWN0aXZpdHlSZXF1ZXN0IGltcGxlbWVudHMgSUFjdGl2aXR5UmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHJlYWRvbmx5IGFjdGlvbjogRXhlY3V0ZUFjdGlvbixcbiAgICAgICAgcmVhZG9ubHkgdHJpZ2dlcjogQWN0aXZpdHlSZXF1ZXN0VHJpZ2dlcixcbiAgICAgICAgcmVhZG9ubHkgY29uc2VjdXRpdmVSZWZyZXNoZXM6IG51bWJlcikgeyB9XG5cbiAgICBhdXRoQ29kZT86IHN0cmluZztcbiAgICBhdXRoVG9rZW4/OiBzdHJpbmc7XG4gICAgYXR0ZW1wdE51bWJlcjogbnVtYmVyID0gMDtcblxuICAgIG9uU2VuZDogKHNlbmRlcjogQWN0aXZpdHlSZXF1ZXN0KSA9PiB2b2lkO1xuXG4gICAgYXN5bmMgcmV0cnlBc3luYygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKHRoaXMub25TZW5kKSB7XG4gICAgICAgICAgICB0aGlzLm9uU2VuZCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFkYXB0aXZlQXBwbGV0IHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBzdWJtaXRNYWdpY0NvZGVBY3Rpb25JZCA9IFwic3VibWl0TWFnaWNDb2RlXCI7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgY2FuY2VsTWFnaWNDb2RlQXV0aEFjdGlvbklkID0gXCJjYW5jZWxNYWdpY0NvZGVBdXRoXCI7XG5cbiAgICBwcml2YXRlIF9jYXJkPzogQWRhcHRpdmVDYXJkO1xuICAgIHByaXZhdGUgX2NhcmRQYXlsb2FkOiBhbnk7XG4gICAgcHJpdmF0ZSBfYWxsb3dBdXRvbWF0aWNDYXJkVXBkYXRlOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfcmVmcmVzaEJ1dHRvbkhvc3RFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIF9jYXJkSG9zdEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgX3Byb2dyZXNzT3ZlcmxheT86IEhUTUxFbGVtZW50O1xuXG4gICAgcHJpdmF0ZSBkaXNwbGF5Q2FyZChjYXJkOiBBZGFwdGl2ZUNhcmQpIHtcbiAgICAgICAgaWYgKGNhcmQucmVuZGVyZWRFbGVtZW50KSB7XG4gICAgICAgICAgICBVdGlscy5jbGVhckVsZW1lbnRDaGlsZHJlbih0aGlzLl9jYXJkSG9zdEVsZW1lbnQpO1xuXG4gICAgICAgICAgICB0aGlzLl9yZWZyZXNoQnV0dG9uSG9zdEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG4gICAgICAgICAgICB0aGlzLl9jYXJkSG9zdEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FyZC5yZW5kZXJlZEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGlzcGxheUNhcmQ6IHVuZGVmaW5lZCBjYXJkLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2hvd01hbnVhbFJlZnJlc2hCdXR0b24ocmVmcmVzaEFjdGlvbjogRXhlY3V0ZUFjdGlvbikge1xuICAgICAgICBsZXQgZGlzcGxheUJ1aWx0SW5NYW51YWxSZWZyZXNoQnV0dG9uID0gdGhpcy5vblNob3dNYW51YWxSZWZyZXNoQnV0dG9uID8gdGhpcy5vblNob3dNYW51YWxSZWZyZXNoQnV0dG9uKHRoaXMpIDogdHJ1ZTtcblxuICAgICAgICBpZiAoZGlzcGxheUJ1aWx0SW5NYW51YWxSZWZyZXNoQnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWZyZXNoQnV0dG9uSG9zdEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG4gICAgICAgICAgICBsZXQgcmVuZGVyZWRSZWZyZXNoQnV0dG9uOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgaWYgKHRoaXMub25SZW5kZXJNYW51YWxSZWZyZXNoQnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZWRSZWZyZXNoQnV0dG9uID0gdGhpcy5vblJlbmRlck1hbnVhbFJlZnJlc2hCdXR0b24odGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9IFN0cmluZ3MucnVudGltZS5yZWZyZXNoVGhpc0NhcmQoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoR2xvYmFsU2V0dGluZ3MuYXBwbGV0cy5yZWZyZXNoLm1vZGUgPT09IEVudW1zLlJlZnJlc2hNb2RlLkF1dG9tYXRpYykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYXV0b1JlZnJlc2hQYXVzZWRNZXNzYWdlID0gU3RyaW5ncy5ydW50aW1lLmF1dG9tYXRpY1JlZnJlc2hQYXVzZWQoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYXV0b1JlZnJlc2hQYXVzZWRNZXNzYWdlW2F1dG9SZWZyZXNoUGF1c2VkTWVzc2FnZS5sZW5ndGggLSAxXSAhPT0gXCIgXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9SZWZyZXNoUGF1c2VkTWVzc2FnZSArPSBcIiBcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBTdHJpbmdzLnJ1bnRpbWUuY2xja1RvUmVzdGFydEF1dG9tYXRpY1JlZnJlc2goKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgY2FyZFBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiQWRhcHRpdmVDYXJkXCIsXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246IFwiMS4yXCIsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlJpY2hUZXh0QmxvY2tcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsQWxpZ25tZW50OiBcInJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlRleHRSdW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RBY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkFjdGlvbi5TdWJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJyZWZyZXNoQ2FyZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgbGV0IGNhcmQgPSBuZXcgQWRhcHRpdmVDYXJkKCk7XG4gICAgICAgICAgICAgICAgY2FyZC5wYXJzZShjYXJkUGF5bG9hZCwgbmV3IFNlcmlhbGl6YXRpb25Db250ZXh0KFZlcnNpb25zLnYxXzIpKTtcbiAgICAgICAgICAgICAgICBjYXJkLm9uRXhlY3V0ZUFjdGlvbiA9IChhY3Rpb246IEFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLmlkID09PSBcInJlZnJlc2hDYXJkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzLmNsZWFyRWxlbWVudENoaWxkcmVuKHRoaXMuX3JlZnJlc2hCdXR0b25Ib3N0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxFeGVjdXRlQWN0aW9uKHJlZnJlc2hBY3Rpb24sIEFjdGl2aXR5UmVxdWVzdFRyaWdnZXIuQXV0b21hdGljLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlbmRlcmVkUmVmcmVzaEJ1dHRvbiA9IGNhcmQucmVuZGVyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJlZFJlZnJlc2hCdXR0b24pIHtcbiAgICAgICAgICAgICAgICBVdGlscy5jbGVhckVsZW1lbnRDaGlsZHJlbih0aGlzLl9yZWZyZXNoQnV0dG9uSG9zdEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVmcmVzaEJ1dHRvbkhvc3RFbGVtZW50LmFwcGVuZENoaWxkKHJlbmRlcmVkUmVmcmVzaEJ1dHRvbik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZWZyZXNoQnV0dG9uSG9zdEVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJkaXNwbGF5XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVBY3Rpdml0eVJlcXVlc3QoYWN0aW9uOiBFeGVjdXRlQWN0aW9uLCB0cmlnZ2VyOiBBY3Rpdml0eVJlcXVlc3RUcmlnZ2VyLCBjb25zZWN1dGl2ZVJlZnJlc2hlczogbnVtYmVyKTogQWN0aXZpdHlSZXF1ZXN0IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKHRoaXMuY2FyZCkge1xuICAgICAgICAgICAgbGV0IHJlcXVlc3QgPSBuZXcgQWN0aXZpdHlSZXF1ZXN0KGFjdGlvbiwgdHJpZ2dlciwgY29uc2VjdXRpdmVSZWZyZXNoZXMpO1xuICAgICAgICAgICAgcmVxdWVzdC5vblNlbmQgPSAoc2VuZGVyOiBBY3Rpdml0eVJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgICAgICBzZW5kZXIuYXR0ZW1wdE51bWJlcisrO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hbFNlbmRBY3Rpdml0eVJlcXVlc3RBc3luYyhyZXF1ZXN0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGNhbmNlbCA9IHRoaXMub25QcmVwYXJlQWN0aXZpdHlSZXF1ZXN0ID8gIXRoaXMub25QcmVwYXJlQWN0aXZpdHlSZXF1ZXN0KHRoaXMsIHJlcXVlc3QsIGFjdGlvbikgOiBmYWxzZTtcblxuICAgICAgICAgICAgcmV0dXJuIGNhbmNlbCA/IHVuZGVmaW5lZCA6IHJlcXVlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjcmVhdGVBY3Rpdml0eVJlcXVlc3Q6IG5vIGNhcmQgaGFzIGJlZW4gc2V0LlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlTWFnaWNDb2RlSW5wdXRDYXJkKGF0dGVtcHROdW1iZXI6IG51bWJlcik6IEFkYXB0aXZlQ2FyZCB7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgICAgICAgdHlwZTogXCJBZGFwdGl2ZUNhcmRcIixcbiAgICAgICAgICAgIHZlcnNpb246IFwiMS4wXCIsXG4gICAgICAgICAgICBib2R5OiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlRleHRCbG9ja1wiLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCJhdHRlbnRpb25cIixcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogYXR0ZW1wdE51bWJlciA9PT0gMSA/IHVuZGVmaW5lZCA6IFwiVGhhdCBkaWRuJ3Qgd29yay4uLiBsZXQncyB0cnkgYWdhaW4uXCIsXG4gICAgICAgICAgICAgICAgICAgIHdyYXA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWxBbGlnbm1lbnQ6IFwiY2VudGVyXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJUZXh0QmxvY2tcIixcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJQbGVhc2UgbG9naW4gaW4gdGhlIHBvcHVwLiBZb3Ugd2lsbCBvYnRhaW4gYSBtYWdpYyBjb2RlLiBQYXN0ZSB0aGF0IGNvZGUgYmVsb3cgYW5kIHNlbGVjdCBcXFwiU3VibWl0XFxcIlwiLFxuICAgICAgICAgICAgICAgICAgICB3cmFwOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsQWxpZ25tZW50OiBcImNlbnRlclwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiSW5wdXQuVGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogXCJtYWdpY0NvZGVcIixcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiRW50ZXIgbWFnaWMgY29kZVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiQWN0aW9uU2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWxBbGlnbm1lbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkFjdGlvbi5TdWJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogQWRhcHRpdmVBcHBsZXQuc3VibWl0TWFnaWNDb2RlQWN0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiU3VibWl0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJBY3Rpb24uU3VibWl0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IEFkYXB0aXZlQXBwbGV0LmNhbmNlbE1hZ2ljQ29kZUF1dGhBY3Rpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJDYW5jZWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBjYXJkID0gbmV3IEFkYXB0aXZlQ2FyZCgpO1xuICAgICAgICBjYXJkLnBhcnNlKHBheWxvYWQpO1xuXG4gICAgICAgIHJldHVybiBjYXJkO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FuY2VsQXV0b21hdGljUmVmcmVzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FsbG93QXV0b21hdGljQ2FyZFVwZGF0ZSkge1xuICAgICAgICAgICAgbG9nRXZlbnQoRW51bXMuTG9nTGV2ZWwuV2FybmluZywgXCJBdXRvbWF0aWMgY2FyZCByZWZyZXNoIGhhcyBiZWVuIGNhbmNlbGxlZCBhcyBhIHJlc3VsdCBvZiB0aGUgdXNlciBpbnRlcmFjdGluZyB3aXRoIHRoZSBjYXJkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2FsbG93QXV0b21hdGljQ2FyZFVwZGF0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlU2VyaWFsaXphdGlvbkNvbnRleHQoKTogU2VyaWFsaXphdGlvbkNvbnRleHQge1xuICAgICAgICByZXR1cm4gdGhpcy5vbkNyZWF0ZVNlcmlhbGl6YXRpb25Db250ZXh0ID8gdGhpcy5vbkNyZWF0ZVNlcmlhbGl6YXRpb25Db250ZXh0KHRoaXMpIDogbmV3IFNlcmlhbGl6YXRpb25Db250ZXh0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbnRlcm5hbFNldENhcmQocGF5bG9hZDogYW55LCBjb25zZWN1dGl2ZVJlZnJlc2hlczogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gXCJvYmplY3RcIiAmJiBwYXlsb2FkW1widHlwZVwiXSA9PT0gXCJBZGFwdGl2ZUNhcmRcIikge1xuICAgICAgICAgICAgdGhpcy5fY2FyZFBheWxvYWQgPSBwYXlsb2FkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2NhcmRQYXlsb2FkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBjYXJkID0gbmV3IEFkYXB0aXZlQ2FyZCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaG9zdENvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICBjYXJkLmhvc3RDb25maWcgPSB0aGlzLmhvc3RDb25maWc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHNlcmlhbGl6YXRpb25Db250ZXh0ID0gdGhpcy5jcmVhdGVTZXJpYWxpemF0aW9uQ29udGV4dCgpO1xuXG4gICAgICAgICAgICAgICAgY2FyZC5wYXJzZSh0aGlzLl9jYXJkUGF5bG9hZCwgc2VyaWFsaXphdGlvbkNvbnRleHQpO1xuXG4gICAgICAgICAgICAgICAgbGV0IGRvQ2hhbmdlQ2FyZCA9IHRoaXMub25DYXJkQ2hhbmdpbmcgPyB0aGlzLm9uQ2FyZENoYW5naW5nKHRoaXMsIHRoaXMuX2NhcmRQYXlsb2FkKSA6IHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9DaGFuZ2VDYXJkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhcmQgPSBjYXJkO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYXJkLmF1dGhlbnRpY2F0aW9uICYmIHRoaXMuX2NhcmQuYXV0aGVudGljYXRpb24udG9rZW5FeGNoYW5nZVJlc291cmNlICYmIHRoaXMub25QcmVmZXRjaFNTT1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUHJlZmV0Y2hTU09Ub2tlbih0aGlzLCB0aGlzLl9jYXJkLmF1dGhlbnRpY2F0aW9uLnRva2VuRXhjaGFuZ2VSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYXJkLm9uRXhlY3V0ZUFjdGlvbiA9IChhY3Rpb246IEFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHVzZXIgdGFrZXMgYW4gYWN0aW9uLCBjYW5jZWwgYW55IHBlbmRpbmcgYXV0b21hdGljIHJlZnJlc2hcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsQXV0b21hdGljUmVmcmVzaCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVybmFsRXhlY3V0ZUFjdGlvbihhY3Rpb24sIEFjdGl2aXR5UmVxdWVzdFRyaWdnZXIuTWFudWFsLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYXJkLm9uSW5wdXRWYWx1ZUNoYW5nZWQgPSAoaW5wdXQ6IElucHV0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBtb2RpZmllcyBhbiBpbnB1dCwgY2FuY2VsIGFueSBwZW5kaW5nIGF1dG9tYXRpYyByZWZyZXNoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbEF1dG9tYXRpY1JlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhcmQucmVuZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NhcmQucmVuZGVyZWRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlDYXJkKHRoaXMuX2NhcmQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbkNhcmRDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNhcmRDaGFuZ2VkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2FyZC5yZWZyZXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEdsb2JhbFNldHRpbmdzLmFwcGxldHMucmVmcmVzaC5tb2RlID09PSBFbnVtcy5SZWZyZXNoTW9kZS5BdXRvbWF0aWMgJiYgY29uc2VjdXRpdmVSZWZyZXNoZXMgPCBHbG9iYWxTZXR0aW5ncy5hcHBsZXRzLnJlZnJlc2gubWF4aW11bUNvbnNlY3V0aXZlQXV0b21hdGljUmVmcmVzaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChHbG9iYWxTZXR0aW5ncy5hcHBsZXRzLnJlZnJlc2gudGltZUJldHdlZW5BdXRvbWF0aWNSZWZyZXNoZXMgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nRXZlbnQoRW51bXMuTG9nTGV2ZWwuSW5mbywgXCJUcmlnZ2VyaW5nIGF1dG9tYXRpYyBjYXJkIHJlZnJlc2ggbnVtYmVyIFwiICsgKGNvbnNlY3V0aXZlUmVmcmVzaGVzICsgMSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVybmFsRXhlY3V0ZUFjdGlvbih0aGlzLl9jYXJkLnJlZnJlc2guYWN0aW9uLCBBY3Rpdml0eVJlcXVlc3RUcmlnZ2VyLkF1dG9tYXRpYywgY29uc2VjdXRpdmVSZWZyZXNoZXMgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ0V2ZW50KEVudW1zLkxvZ0xldmVsLkluZm8sIFwiU2NoZWR1bGluZyBhdXRvbWF0aWMgY2FyZCByZWZyZXNoIG51bWJlciBcIiArIChjb25zZWN1dGl2ZVJlZnJlc2hlcyArIDEpICsgXCIgaW4gXCIgKyBHbG9iYWxTZXR0aW5ncy5hcHBsZXRzLnJlZnJlc2gudGltZUJldHdlZW5BdXRvbWF0aWNSZWZyZXNoZXMgKyBcIm1zXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWN0aW9uID0gdGhpcy5fY2FyZC5yZWZyZXNoLmFjdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWxsb3dBdXRvbWF0aWNDYXJkVXBkYXRlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWxsb3dBdXRvbWF0aWNDYXJkVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVybmFsRXhlY3V0ZUFjdGlvbihhY3Rpb24sIEFjdGl2aXR5UmVxdWVzdFRyaWdnZXIuQXV0b21hdGljLCBjb25zZWN1dGl2ZVJlZnJlc2hlcyArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHbG9iYWxTZXR0aW5ncy5hcHBsZXRzLnJlZnJlc2gudGltZUJldHdlZW5BdXRvbWF0aWNSZWZyZXNoZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChHbG9iYWxTZXR0aW5ncy5hcHBsZXRzLnJlZnJlc2gubW9kZSAhPT0gRW51bXMuUmVmcmVzaE1vZGUuRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnNlY3V0aXZlUmVmcmVzaGVzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nRXZlbnQoRW51bXMuTG9nTGV2ZWwuV2FybmluZywgXCJTdG9wcGluZyBhdXRvbWF0aWMgcmVmcmVzaGVzIGFmdGVyIFwiICsgY29uc2VjdXRpdmVSZWZyZXNoZXMgKyBcIiBjb25zZWN1dGl2ZSByZWZyZXNoZXMuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nRXZlbnQoRW51bXMuTG9nTGV2ZWwuV2FybmluZywgXCJUaGUgY2FyZCBoYXMgYSByZWZyZXNoIHNlY3Rpb24sIGJ1dCBhdXRvbWF0aWMgcmVmcmVzaGVzIGFyZSBkaXNhYmxlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoR2xvYmFsU2V0dGluZ3MuYXBwbGV0cy5yZWZyZXNoLmFsbG93TWFudWFsUmVmcmVzaGVzQWZ0ZXJBdXRvbWF0aWNSZWZyZXNoZXMgfHwgR2xvYmFsU2V0dGluZ3MuYXBwbGV0cy5yZWZyZXNoLm1vZGUgPT09IEVudW1zLlJlZnJlc2hNb2RlLk1hbnVhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nRXZlbnQoRW51bXMuTG9nTGV2ZWwuSW5mbywgXCJTaG93aW5nIG1hbnVhbCByZWZyZXNoIGJ1dHRvbi5cIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd01hbnVhbFJlZnJlc2hCdXR0b24odGhpcy5fY2FyZC5yZWZyZXNoLmFjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgYWxsIGVycm9yc1xuICAgICAgICAgICAgICAgIGxvZ0V2ZW50KEVudW1zLkxvZ0xldmVsLkVycm9yLCBcInNldENhcmQ6IFwiICsgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbnRlcm5hbEV4ZWN1dGVBY3Rpb24oYWN0aW9uOiBBY3Rpb24sIHRyaWdnZXI6IEFjdGl2aXR5UmVxdWVzdFRyaWdnZXIsIGNvbnNlY3V0aXZlUmVmcmVzaGVzOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKGFjdGlvbiBpbnN0YW5jZW9mIEV4ZWN1dGVBY3Rpb24pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYW5uZWxBZGFwdGVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlcXVlc3QgPSB0aGlzLmNyZWF0ZUFjdGl2aXR5UmVxdWVzdChhY3Rpb24sIHRyaWdnZXIsIGNvbnNlY3V0aXZlUmVmcmVzaGVzKTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QucmV0cnlBc3luYygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludGVybmFsRXhlY3V0ZUFjdGlvbjogTm8gY2hhbm5lbCBhZGFwdGVyIHNldC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vbkFjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5vbkFjdGlvbih0aGlzLCBhY3Rpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVQcm9ncmVzc092ZXJsYXkocmVxdWVzdDogQWN0aXZpdHlSZXF1ZXN0KTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAoIXRoaXMuX3Byb2dyZXNzT3ZlcmxheSkge1xuICAgICAgICAgICAgaWYgKHRoaXMub25DcmVhdGVQcm9ncmVzc092ZXJsYXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9ncmVzc092ZXJsYXkgPSB0aGlzLm9uQ3JlYXRlUHJvZ3Jlc3NPdmVybGF5KHRoaXMsIHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvZ3Jlc3NPdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9ncmVzc092ZXJsYXkuY2xhc3NOYW1lID0gXCJhYWYtcHJvZ3Jlc3Mtb3ZlcmxheVwiO1xuXG4gICAgICAgICAgICAgICAgbGV0IHNwaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIHNwaW5uZXIuY2xhc3NOYW1lID0gXCJhYWYtc3Bpbm5lclwiO1xuICAgICAgICAgICAgICAgIHNwaW5uZXIuc3R5bGUud2lkdGggPSBcIjI4cHhcIjtcbiAgICAgICAgICAgICAgICBzcGlubmVyLnN0eWxlLmhlaWdodCA9IFwiMjhweFwiO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvZ3Jlc3NPdmVybGF5LmFwcGVuZENoaWxkKHNwaW5uZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2dyZXNzT3ZlcmxheTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZVByb2dyZXNzT3ZlcmxheShyZXF1ZXN0OiBJQWN0aXZpdHlSZXF1ZXN0KSB7XG4gICAgICAgIGlmICh0aGlzLm9uUmVtb3ZlUHJvZ3Jlc3NPdmVybGF5KSB7XG4gICAgICAgICAgICB0aGlzLm9uUmVtb3ZlUHJvZ3Jlc3NPdmVybGF5KHRoaXMsIHJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5fcHJvZ3Jlc3NPdmVybGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuX3Byb2dyZXNzT3ZlcmxheSk7XG5cbiAgICAgICAgICAgIHRoaXMuX3Byb2dyZXNzT3ZlcmxheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYWN0aXZpdHlSZXF1ZXN0U3VjY2VlZGVkKHJlc3BvbnNlOiBTdWNjZXNzUmVzcG9uc2UsIHBhcnNlZENvbnRlbnQ6IHN0cmluZyB8IEFkYXB0aXZlQ2FyZCB8IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodGhpcy5vbkFjdGl2aXR5UmVxdWVzdFN1Y2NlZWRlZCkge1xuICAgICAgICAgICAgdGhpcy5vbkFjdGl2aXR5UmVxdWVzdFN1Y2NlZWRlZCh0aGlzLCByZXNwb25zZSwgcGFyc2VkQ29udGVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFjdGl2aXR5UmVxdWVzdEZhaWxlZChyZXNwb25zZTogRXJyb3JSZXNwb25zZSk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uQWN0aXZpdHlSZXF1ZXN0RmFpbGVkID8gdGhpcy5vbkFjdGl2aXR5UmVxdWVzdEZhaWxlZCh0aGlzLCByZXNwb25zZSkgOiBHbG9iYWxTZXR0aW5ncy5hcHBsZXRzLmRlZmF1bHRUaW1lQmV0d2VlblJldHJ5QXR0ZW1wdHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93QXV0aENvZGVJbnB1dERpYWxvZyhyZXF1ZXN0OiBBY3Rpdml0eVJlcXVlc3QpIHtcbiAgICAgICAgbGV0IHNob3dCdWlsdEluQXV0aENvZGVJbnB1dENhcmQgPSB0aGlzLm9uU2hvd0F1dGhDb2RlSW5wdXREaWFsb2cgPyB0aGlzLm9uU2hvd0F1dGhDb2RlSW5wdXREaWFsb2codGhpcywgcmVxdWVzdCkgOiB0cnVlO1xuXG4gICAgICAgIGlmIChzaG93QnVpbHRJbkF1dGhDb2RlSW5wdXRDYXJkKSB7XG4gICAgICAgICAgICBsZXQgYXV0aENvZGVJbnB1dENhcmQgPSB0aGlzLmNyZWF0ZU1hZ2ljQ29kZUlucHV0Q2FyZChyZXF1ZXN0LmF0dGVtcHROdW1iZXIpO1xuICAgICAgICAgICAgYXV0aENvZGVJbnB1dENhcmQucmVuZGVyKCk7XG4gICAgICAgICAgICBhdXRoQ29kZUlucHV0Q2FyZC5vbkV4ZWN1dGVBY3Rpb24gPSAoc3VibWl0TWFnaWNDb2RlQWN0aW9uOiBBY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYXJkICYmIHN1Ym1pdE1hZ2ljQ29kZUFjdGlvbiBpbnN0YW5jZW9mIFN1Ym1pdEFjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN1Ym1pdE1hZ2ljQ29kZUFjdGlvbi5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBBZGFwdGl2ZUFwcGxldC5zdWJtaXRNYWdpY0NvZGVBY3Rpb25JZDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXV0aENvZGU6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWJtaXRNYWdpY0NvZGVBY3Rpb24uZGF0YSAmJiB0eXBlb2YgKDxhbnk+c3VibWl0TWFnaWNDb2RlQWN0aW9uLmRhdGEpW1wibWFnaWNDb2RlXCJdID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhDb2RlID0gKDxhbnk+c3VibWl0TWFnaWNDb2RlQWN0aW9uLmRhdGEpW1wibWFnaWNDb2RlXCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdXRoQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlDYXJkKHRoaXMuY2FyZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5hdXRoQ29kZSA9IGF1dGhDb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnJldHJ5QXN5bmMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiUGxlYXNlIGVudGVyIHRoZSBtYWdpYyBjb2RlIHlvdSByZWNlaXZlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEFkYXB0aXZlQXBwbGV0LmNhbmNlbE1hZ2ljQ29kZUF1dGhBY3Rpb25JZDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dFdmVudChFbnVtcy5Mb2dMZXZlbC5XYXJuaW5nLCBcIkF1dGhlbnRpY2F0aW9uIGNhbmNlbGxlZCBieSB1c2VyLlwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheUNhcmQodGhpcy5jYXJkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dFdmVudChFbnVtcy5Mb2dMZXZlbC5FcnJvciwgXCJVbmVzcGVjdGVkIGFjdGlvbiB0YWtlbiBmcm9tIG1hZ2ljIGNvZGUgaW5wdXQgY2FyZCAoaWQgPSBcIiArIHN1Ym1pdE1hZ2ljQ29kZUFjdGlvbi5pZCArIFwiKVwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFN0cmluZ3MubWFnaWNDb2RlSW5wdXRDYXJkLnNvbWV0aGluZ1dlbnRXcm9uZygpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlDYXJkKGF1dGhDb2RlSW5wdXRDYXJkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgaW50ZXJuYWxTZW5kQWN0aXZpdHlSZXF1ZXN0QXN5bmMocmVxdWVzdDogQWN0aXZpdHlSZXF1ZXN0KSB7XG4gICAgICAgIGlmICghdGhpcy5jaGFubmVsQWRhcHRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW50ZXJuYWxTZW5kQWN0aXZpdHlSZXF1ZXN0QXN5bmM6IGNoYW5uZWxBZGFwdGVyIGlzIG5vdCBzZXQuXCIpXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb3ZlcmxheSA9IHRoaXMuY3JlYXRlUHJvZ3Jlc3NPdmVybGF5KHJlcXVlc3QpO1xuXG4gICAgICAgIGlmIChvdmVybGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LmFwcGVuZENoaWxkKG92ZXJsYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcblxuICAgICAgICB3aGlsZSAoIWRvbmUpIHtcbiAgICAgICAgICAgIGxldCByZXNwb25zZTogQWN0aXZpdHlSZXNwb25zZSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgaWYgKHJlcXVlc3QuYXR0ZW1wdE51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGxvZ0V2ZW50KEVudW1zLkxvZ0xldmVsLkluZm8sIFwiU2VuZGluZyBhY3Rpdml0eSByZXF1ZXN0IHRvIGNoYW5uZWwgKGF0dGVtcHQgXCIgKyByZXF1ZXN0LmF0dGVtcHROdW1iZXIgKyBcIilcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2dFdmVudChFbnVtcy5Mb2dMZXZlbC5JbmZvLCBcIlJlLXNlbmRpbmcgYWN0aXZpdHkgcmVxdWVzdCB0byBjaGFubmVsIChhdHRlbXB0IFwiICsgcmVxdWVzdC5hdHRlbXB0TnVtYmVyICsgXCIpXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jaGFubmVsQWRhcHRlci5zZW5kUmVxdWVzdEFzeW5jKHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbG9nRXZlbnQoRW51bXMuTG9nTGV2ZWwuRXJyb3IsIFwiQWN0aXZpdHkgcmVxdWVzdCBmYWlsZWQ6IFwiICsgZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVQcm9ncmVzc092ZXJsYXkocmVxdWVzdCk7XG5cbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlIGluc3RhbmNlb2YgU3VjY2Vzc1Jlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlUHJvZ3Jlc3NPdmVybGF5KHJlcXVlc3QpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yYXdDb250ZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludGVybmFsU2VuZEFjdGl2aXR5UmVxdWVzdEFzeW5jOiBBY3Rpb24uRXhlY3V0ZSByZXN1bHQgaXMgdW5kZWZpbmVkXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcnNlZENvbnRlbnQgPSByZXNwb25zZS5yYXdDb250ZW50O1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWRDb250ZW50ID0gSlNPTi5wYXJzZShyZXNwb25zZS5yYXdDb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBMZWF2ZSBwYXJzZUNvbnRlbnQgYXMgaXNcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2VkQ29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nRXZlbnQoRW51bXMuTG9nTGV2ZWwuSW5mbywgXCJUaGUgYWN0aXZpdHkgcmVxdWVzdCByZXR1cm5lZCBhIHN0cmluZyBhZnRlciBcIiArIHJlcXVlc3QuYXR0ZW1wdE51bWJlciArIFwiIGF0dGVtcHQocykuXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2aXR5UmVxdWVzdFN1Y2NlZWRlZChyZXNwb25zZSwgcGFyc2VkQ29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcnNlZENvbnRlbnQgPT09IFwib2JqZWN0XCIgJiYgcGFyc2VkQ29udGVudFtcInR5cGVcIl0gPT09IFwiQWRhcHRpdmVDYXJkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ0V2ZW50KEVudW1zLkxvZ0xldmVsLkluZm8sIFwiVGhlIGFjdGl2aXR5IHJlcXVlc3QgcmV0dXJuZWQgYW4gQWRhcHRpdmUgQ2FyZCBhZnRlciBcIiArIHJlcXVlc3QuYXR0ZW1wdE51bWJlciArIFwiIGF0dGVtcHQocykuXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVybmFsU2V0Q2FyZChwYXJzZWRDb250ZW50LCByZXF1ZXN0LmNvbnNlY3V0aXZlUmVmcmVzaGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZpdHlSZXF1ZXN0U3VjY2VlZGVkKHJlc3BvbnNlLCB0aGlzLmNhcmQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW50ZXJuYWxTZW5kQWN0aXZpdHlSZXF1ZXN0QXN5bmM6IEFjdGlvbi5FeGVjdXRlIHJlc3VsdCBpcyBvZiB1bnN1cHBvcnRlZCB0eXBlIChcIiArIHR5cGVvZiByZXNwb25zZS5yYXdDb250ZW50ICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlIGluc3RhbmNlb2YgRXJyb3JSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmV0cnlJbjogbnVtYmVyID0gdGhpcy5hY3Rpdml0eVJlcXVlc3RGYWlsZWQocmVzcG9uc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXRyeUluID49IDAgJiYgcmVxdWVzdC5hdHRlbXB0TnVtYmVyIDwgR2xvYmFsU2V0dGluZ3MuYXBwbGV0cy5tYXhpbXVtUmV0cnlBdHRlbXB0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRW51bXMuTG9nTGV2ZWwuV2FybmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgQWN0aXZpdHkgcmVxdWVzdCBmYWlsZWQ6ICR7cmVzcG9uc2UuZXJyb3IubWVzc2FnZX0uIFJldHJ5aW5nIGluICR7cmV0cnlJbn1tc2ApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmF0dGVtcHROdW1iZXIrKztcblxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IHsgcmVzb2x2ZSgpOyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlJblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbnVtcy5Mb2dMZXZlbC5FcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgQWN0aXZpdHkgcmVxdWVzdCBmYWlsZWQ6ICR7cmVzcG9uc2UuZXJyb3IubWVzc2FnZX0uIEdpdmluZyB1cCBhZnRlciAke3JlcXVlc3QuYXR0ZW1wdE51bWJlcn0gYXR0ZW1wdChzKWApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVByb2dyZXNzT3ZlcmxheShyZXF1ZXN0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2UgaW5zdGFuY2VvZiBMb2dpblJlcXVlc3RSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dFdmVudChFbnVtcy5Mb2dMZXZlbC5JbmZvLCBcIlRoZSBhY3Rpdml0eSByZXF1ZXN0IHJldHVybmVkIGEgTG9naW5SZXF1ZXN0UmVzcG9uc2UgYWZ0ZXIgXCIgKyByZXF1ZXN0LmF0dGVtcHROdW1iZXIgKyBcIiBhdHRlbXB0KHMpLlwiKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5hdHRlbXB0TnVtYmVyIDw9IEdsb2JhbFNldHRpbmdzLmFwcGxldHMubWF4aW11bVJldHJ5QXR0ZW1wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRlbXB0T0F1dGggPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UudG9rZW5FeGNoYW5nZVJlc291cmNlICYmIHRoaXMub25TU09Ub2tlbk5lZWRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gdXNlIFNTTy4gVGhlIGhvc3Qgd2lsbCByZXR1cm4gdHJ1ZSBpZiBpdCBjYW4gaGFuZGxlIFNTTywgaW4gd2hpY2ggY2FzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGJ5cGFzcyBPQXV0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dGVtcHRPQXV0aCA9ICF0aGlzLm9uU1NPVG9rZW5OZWVkZWQodGhpcywgcmVxdWVzdCwgcmVzcG9uc2UudG9rZW5FeGNoYW5nZVJlc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dGVtcHRPQXV0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gdXNlIE9BdXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVQcm9ncmVzc092ZXJsYXkocmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnNpZ25pbkJ1dHRvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludGVybmFsU2VuZEFjdGl2aXR5UmVxdWVzdEFzeW5jOiB0aGUgbG9naW4gcmVxdWVzdCBkb2Vzbid0IGNvbnRhaW4gYSB2YWxpZCBzaWduaW4gVVJMLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dFdmVudChFbnVtcy5Mb2dMZXZlbC5JbmZvLCBcIkxvZ2luIHJlcXVpcmVkIGF0IFwiICsgcmVzcG9uc2Uuc2lnbmluQnV0dG9uLnZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uU2hvd1NpZ25pblByb21wdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCeXBhc3MgdGhlIGJ1aWx0LWluIGF1dGggcHJvbXB0IGlmIHRoZSBob3N0IGFwcCBoYW5kbGVzIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25TaG93U2lnbmluUHJvbXB0KHRoaXMsIHJlcXVlc3QsIHJlc3BvbnNlLnNpZ25pbkJ1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dBdXRoQ29kZUlucHV0RGlhbG9nKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsZWZ0ID0gd2luZG93LnNjcmVlblggKyAod2luZG93Lm91dGVyV2lkdGggLSBHbG9iYWxTZXR0aW5ncy5hcHBsZXRzLmF1dGhQcm9tcHRXaWR0aCkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG9wID0gd2luZG93LnNjcmVlblkgKyAod2luZG93Lm91dGVySGVpZ2h0IC0gR2xvYmFsU2V0dGluZ3MuYXBwbGV0cy5hdXRoUHJvbXB0SGVpZ2h0KSAvIDI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5zaWduaW5CdXR0b24udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5zaWduaW5CdXR0b24udGl0bGUgPyByZXNwb25zZS5zaWduaW5CdXR0b24udGl0bGUgOiBcIlNpZ24gaW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB3aWR0aD0ke0dsb2JhbFNldHRpbmdzLmFwcGxldHMuYXV0aFByb21wdFdpZHRofSxoZWlnaHQ9JHtHbG9iYWxTZXR0aW5ncy5hcHBsZXRzLmF1dGhQcm9tcHRIZWlnaHR9LGxlZnQ9JHtsZWZ0fSx0b3A9JHt0b3B9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nRXZlbnQoRW51bXMuTG9nTGV2ZWwuRXJyb3IsIFwiQXV0aGVudGljYXRpb24gZmFpbGVkLiBHaXZpbmcgdXAgYWZ0ZXIgXCIgKyByZXF1ZXN0LmF0dGVtcHROdW1iZXIgKyBcIiBhdHRlbXB0KHMpXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChTdHJpbmdzLm1hZ2ljQ29kZUlucHV0Q2FyZC5hdXRoZW50aWNhdGlvbkZhaWxlZCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4aXQgdGhlIGxvb3AuIEFmdGVyIGEgTG9naW5SZXF1ZXN0UmVzcG9uc2UsIHRoZSBob3N0IGFwcCBpcyByZXNwb25zaWJsZSBmb3IgcmV0cnlpbmcgdGhlIHJlcXVlc3RcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmhhbmRsZWQgcmVzcG9uc2UgdHlwZTogXCIgKyByZXNwb25zZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWFkb25seSByZW5kZXJlZEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gICAgaG9zdENvbmZpZz86IEhvc3RDb25maWc7XG4gICAgY2hhbm5lbEFkYXB0ZXI/OiBDaGFubmVsQWRhcHRlcjtcblxuICAgIG9uQ2FyZENoYW5naW5nPzogKHNlbmRlcjogQWRhcHRpdmVBcHBsZXQsIGNhcmQ6IGFueSkgPT4gYm9vbGVhbjtcbiAgICBvbkNhcmRDaGFuZ2VkPzogKHNlbmRlcjogQWRhcHRpdmVBcHBsZXQpID0+IHZvaWQ7XG4gICAgb25QcmVmZXRjaFNTT1Rva2VuPzogKHNlbmRlcjogQWRhcHRpdmVBcHBsZXQsIHRva2VuRXhjaGFuZ2VSZXNvdXJjZTogVG9rZW5FeGNoYW5nZVJlc291cmNlKSA9PiB2b2lkO1xuICAgIG9uU1NPVG9rZW5OZWVkZWQ/OiAoc2VuZGVyOiBBZGFwdGl2ZUFwcGxldCwgcmVxdWVzdDogSUFjdGl2aXR5UmVxdWVzdCwgdG9rZW5FeGNoYW5nZVJlc291cmNlOiBUb2tlbkV4Y2hhbmdlUmVzb3VyY2UpID0+IGJvb2xlYW47XG4gICAgb25QcmVwYXJlQWN0aXZpdHlSZXF1ZXN0PzogKHNlbmRlcjogQWRhcHRpdmVBcHBsZXQsIHJlcXVlc3Q6IElBY3Rpdml0eVJlcXVlc3QsIGFjdGlvbjogRXhlY3V0ZUFjdGlvbikgPT4gYm9vbGVhbjtcbiAgICBvbkFjdGl2aXR5UmVxdWVzdFN1Y2NlZWRlZD86IChzZW5kZXI6IEFkYXB0aXZlQXBwbGV0LCByZXNwb25zZTogU3VjY2Vzc1Jlc3BvbnNlLCBwYXJzZWRDb250ZW50OiBzdHJpbmcgfCBBZGFwdGl2ZUNhcmQgfCB1bmRlZmluZWQpID0+IHZvaWQ7XG4gICAgb25BY3Rpdml0eVJlcXVlc3RGYWlsZWQ/OiAoc2VuZGVyOiBBZGFwdGl2ZUFwcGxldCwgcmVzcG9uc2U6IEVycm9yUmVzcG9uc2UpID0+IG51bWJlcjtcbiAgICBvbkNyZWF0ZVNlcmlhbGl6YXRpb25Db250ZXh0PzogKHNlbmRlcjogQWRhcHRpdmVBcHBsZXQpID0+IFNlcmlhbGl6YXRpb25Db250ZXh0O1xuICAgIG9uQ3JlYXRlUHJvZ3Jlc3NPdmVybGF5PzogKHNlbmRlcjogQWRhcHRpdmVBcHBsZXQsIHJlcXVlc3Q6IElBY3Rpdml0eVJlcXVlc3QpID0+IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuICAgIG9uUmVtb3ZlUHJvZ3Jlc3NPdmVybGF5PzogKHNlbmRlcjogQWRhcHRpdmVBcHBsZXQsIHJlcXVlc3Q6IElBY3Rpdml0eVJlcXVlc3QpID0+IHZvaWQ7XG4gICAgb25SZW5kZXJNYW51YWxSZWZyZXNoQnV0dG9uPzogKHNlbmRlcjogQWRhcHRpdmVBcHBsZXQpID0+IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuICAgIG9uQWN0aW9uPzogKHNlbmRlcjogQWRhcHRpdmVBcHBsZXQsIGFjdGlvbjogQWN0aW9uKSA9PiB2b2lkO1xuICAgIG9uU2hvd01hbnVhbFJlZnJlc2hCdXR0b24/OiAoc2VuZGVyOiBBZGFwdGl2ZUFwcGxldCkgPT4gYm9vbGVhbjtcbiAgICBvblNob3dBdXRoQ29kZUlucHV0RGlhbG9nPzogKHNlbmRlcjogQWRhcHRpdmVBcHBsZXQsIHJlcXVlc3Q6IElBY3Rpdml0eVJlcXVlc3QpID0+IGJvb2xlYW47XG4gICAgb25TaG93U2lnbmluUHJvbXB0PzogKHNlbmRlcjogQWRhcHRpdmVBcHBsZXQsIHJlcXVlc3Q6IElBY3Rpdml0eVJlcXVlc3QsIHNpZ25pbkJ1dHRvbjogQXV0aENhcmRCdXR0b24pID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5jbGFzc05hbWUgPSBcImFhZi1jYXJkSG9zdFwiXG4gICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LnN0eWxlLmZsZXhEaXJlY3Rpb24gPSBcImNvbHVtblwiO1xuXG4gICAgICAgIHRoaXMuX2NhcmRIb3N0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICAgICAgdGhpcy5fcmVmcmVzaEJ1dHRvbkhvc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaEJ1dHRvbkhvc3RFbGVtZW50LmNsYXNzTmFtZSA9IFwiYWFmLXJlZnJlc2hCdXR0b25Ib3N0XCI7ICAgIFxuICAgICAgICB0aGlzLl9yZWZyZXNoQnV0dG9uSG9zdEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG4gICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2NhcmRIb3N0RWxlbWVudCk7XG4gICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX3JlZnJlc2hCdXR0b25Ib3N0RWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmVmcmVzaENhcmQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jYXJkICYmIHRoaXMuX2NhcmQucmVmcmVzaCkge1xuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbEV4ZWN1dGVBY3Rpb24odGhpcy5fY2FyZC5yZWZyZXNoLmFjdGlvbiwgQWN0aXZpdHlSZXF1ZXN0VHJpZ2dlci5NYW51YWwsIDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0Q2FyZChwYXlsb2FkOiBhbnkpIHtcbiAgICAgICAgdGhpcy5pbnRlcm5hbFNldENhcmQocGF5bG9hZCwgMCk7XG4gICAgfVxuXG4gICAgZ2V0IGNhcmQoKTogQWRhcHRpdmVDYXJkIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhcmQ7XG4gICAgfVxufSIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuZXhwb3J0ICogZnJvbSBcIi4vc3RyaW5nc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZW51bXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NoYXJlZFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXRpbHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NlcmlhbGl6YXRpb25cIjtcbmV4cG9ydCAqIGZyb20gXCIuL2hvc3QtY2FwYWJpbGl0aWVzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ob3N0LWNvbmZpZ1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcmVnaXN0cnlcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NhcmQtb2JqZWN0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jYXJkLWVsZW1lbnRzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90YWJsZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY2hhbm5lbC1hZGFwdGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9hY3Rpdml0eS1yZXF1ZXN0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9hZGFwdGl2ZS1hcHBsZXRcIjtcblxuZXhwb3J0IHsgSUFkYXB0aXZlQ2FyZCwgSUNhcmRFbGVtZW50IH0gZnJvbSBcIi4vc2NoZW1hXCI7IiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgKiBhcyBFbnVtcyBmcm9tIFwiLi9lbnVtc1wiO1xuaW1wb3J0IHsgUGFkZGluZ0RlZmluaXRpb24sIEdsb2JhbFNldHRpbmdzLCBTaXplQW5kVW5pdCxTcGFjaW5nRGVmaW5pdGlvbiwgSVNlcGFyYXRpb25EZWZpbml0aW9uLFxuICAgIERpY3Rpb25hcnksIFN0cmluZ1dpdGhTdWJzdGl0dXRpb25zLCBDb250ZW50VHlwZXMsIElJbnB1dCwgSVJlc291cmNlSW5mb3JtYXRpb24gfSBmcm9tIFwiLi9zaGFyZWRcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBIb3N0Q29uZmlnLCBkZWZhdWx0SG9zdENvbmZpZywgQmFzZVRleHREZWZpbml0aW9uLCBGb250VHlwZURlZmluaXRpb24sIENvbG9yU2V0RGVmaW5pdGlvbiwgVGV4dENvbG9yRGVmaW5pdGlvbiwgQ29udGFpbmVyU3R5bGVEZWZpbml0aW9uLCBUZXh0U3R5bGVEZWZpbml0aW9uIH0gZnJvbSBcIi4vaG9zdC1jb25maWdcIjtcbmltcG9ydCAqIGFzIFRleHRGb3JtYXR0ZXJzIGZyb20gXCIuL3RleHQtZm9ybWF0dGVyc1wiO1xuaW1wb3J0IHsgQ2FyZE9iamVjdCwgVmFsaWRhdGlvblJlc3VsdHMgfSBmcm9tIFwiLi9jYXJkLW9iamVjdFwiO1xuaW1wb3J0IHsgVmVyc2lvbnMsIFZlcnNpb24sIHByb3BlcnR5LCBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQsIFNlcmlhbGl6YWJsZU9iamVjdCwgU2VyaWFsaXphYmxlT2JqZWN0U2NoZW1hLCBTdHJpbmdQcm9wZXJ0eSxcbiAgICBCb29sUHJvcGVydHksIFZhbHVlU2V0UHJvcGVydHksIEVudW1Qcm9wZXJ0eSwgU2VyaWFsaXphYmxlT2JqZWN0Q29sbGVjdGlvblByb3BlcnR5LCBTZXJpYWxpemFibGVPYmplY3RQcm9wZXJ0eSwgUGl4ZWxTaXplUHJvcGVydHksXG4gICAgTnVtUHJvcGVydHksIFByb3BlcnR5QmFnLCBDdXN0b21Qcm9wZXJ0eSwgUHJvcGVydHlEZWZpbml0aW9uLCBTdHJpbmdBcnJheVByb3BlcnR5IH0gZnJvbSBcIi4vc2VyaWFsaXphdGlvblwiO1xuaW1wb3J0IHsgQ2FyZE9iamVjdFJlZ2lzdHJ5LCBHbG9iYWxSZWdpc3RyeSB9IGZyb20gXCIuL3JlZ2lzdHJ5XCI7XG5pbXBvcnQgeyBTdHJpbmdzIH0gZnJvbSBcIi4vc3RyaW5nc1wiO1xuaW1wb3J0IHsgTWVudUl0ZW0sIFBvcHVwTWVudSB9IGZyb20gXCIuL2NvbnRyb2xzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTZXBhcmF0aW9uKGhvc3RDb25maWc6IEhvc3RDb25maWcsIHNlcGFyYXRpb25EZWZpbml0aW9uOiBJU2VwYXJhdGlvbkRlZmluaXRpb24sIG9yaWVudGF0aW9uOiBFbnVtcy5PcmllbnRhdGlvbik6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoc2VwYXJhdGlvbkRlZmluaXRpb24uc3BhY2luZyA+IDAgfHwgKHNlcGFyYXRpb25EZWZpbml0aW9uLmxpbmVUaGlja25lc3MgJiYgc2VwYXJhdGlvbkRlZmluaXRpb24ubGluZVRoaWNrbmVzcyA+IDApKSB7XG4gICAgICAgIGxldCBzZXBhcmF0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBzZXBhcmF0b3IuY2xhc3NOYW1lID0gaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiYWMtXCIgKyAob3JpZW50YXRpb24gPT0gRW51bXMuT3JpZW50YXRpb24uSG9yaXpvbnRhbCA/IFwiaG9yaXpvbnRhbFwiIDogXCJ2ZXJ0aWNhbFwiKSArIFwiLXNlcGFyYXRvclwiKTtcbiAgICAgICAgc2VwYXJhdG9yLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcblxuICAgICAgICBsZXQgY29sb3IgPSBzZXBhcmF0aW9uRGVmaW5pdGlvbi5saW5lQ29sb3IgPyBVdGlscy5zdHJpbmdUb0Nzc0NvbG9yKHNlcGFyYXRpb25EZWZpbml0aW9uLmxpbmVDb2xvcikgOiBcIlwiO1xuXG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PSBFbnVtcy5PcmllbnRhdGlvbi5Ib3Jpem9udGFsKSB7XG4gICAgICAgICAgICBpZiAoc2VwYXJhdGlvbkRlZmluaXRpb24ubGluZVRoaWNrbmVzcykge1xuICAgICAgICAgICAgICAgIHNlcGFyYXRvci5zdHlsZS5wYWRkaW5nVG9wID0gKHNlcGFyYXRpb25EZWZpbml0aW9uLnNwYWNpbmcgLyAyKSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3Iuc3R5bGUubWFyZ2luQm90dG9tID0gKHNlcGFyYXRpb25EZWZpbml0aW9uLnNwYWNpbmcgLyAyKSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3Iuc3R5bGUuYm9yZGVyQm90dG9tID0gc2VwYXJhdGlvbkRlZmluaXRpb24ubGluZVRoaWNrbmVzcyArIFwicHggc29saWQgXCIgKyBjb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlcGFyYXRvci5zdHlsZS5oZWlnaHQgPSBzZXBhcmF0aW9uRGVmaW5pdGlvbi5zcGFjaW5nICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNlcGFyYXRpb25EZWZpbml0aW9uLmxpbmVUaGlja25lc3MpIHtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3Iuc3R5bGUucGFkZGluZ0xlZnQgPSAoc2VwYXJhdGlvbkRlZmluaXRpb24uc3BhY2luZyAvIDIpICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIHNlcGFyYXRvci5zdHlsZS5tYXJnaW5SaWdodCA9IChzZXBhcmF0aW9uRGVmaW5pdGlvbi5zcGFjaW5nIC8gMikgKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yLnN0eWxlLmJvcmRlclJpZ2h0ID0gc2VwYXJhdGlvbkRlZmluaXRpb24ubGluZVRoaWNrbmVzcyArIFwicHggc29saWQgXCIgKyBjb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlcGFyYXRvci5zdHlsZS53aWR0aCA9IHNlcGFyYXRpb25EZWZpbml0aW9uLnNwYWNpbmcgKyBcInB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzZXBhcmF0b3Iuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgICAgICBzZXBhcmF0b3Iuc3R5bGUuZmxleCA9IFwiMCAwIGF1dG9cIjtcblxuICAgICAgICByZXR1cm4gc2VwYXJhdG9yO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG5cbmV4cG9ydCB0eXBlIENhcmRFbGVtZW50SGVpZ2h0ID0gXCJhdXRvXCIgfCBcInN0cmV0Y2hcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhcmRFbGVtZW50IGV4dGVuZHMgQ2FyZE9iamVjdCB7XG4gICAgLy8jcmVnaW9uIFNjaGVtYVxuXG4gICAgc3RhdGljIHJlYWRvbmx5IGxhbmdQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8xLCBcImxhbmdcIiwgdHJ1ZSwgL15bYS16XXsyLDN9JC9pZyk7XG4gICAgc3RhdGljIHJlYWRvbmx5IGlzVmlzaWJsZVByb3BlcnR5ID0gbmV3IEJvb2xQcm9wZXJ0eShWZXJzaW9ucy52MV8yLCBcImlzVmlzaWJsZVwiLCB0cnVlKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgc2VwYXJhdG9yUHJvcGVydHkgPSBuZXcgQm9vbFByb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwic2VwYXJhdG9yXCIsIGZhbHNlKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgaGVpZ2h0UHJvcGVydHkgPSBuZXcgVmFsdWVTZXRQcm9wZXJ0eShcbiAgICAgICAgVmVyc2lvbnMudjFfMSxcbiAgICAgICAgXCJoZWlnaHRcIixcbiAgICAgICAgW1xuICAgICAgICAgICAgeyB2YWx1ZTogXCJhdXRvXCIgfSxcbiAgICAgICAgICAgIHsgdmFsdWU6IFwic3RyZXRjaFwiIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJhdXRvXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBob3Jpem9udGFsQWxpZ25tZW50UHJvcGVydHkgPSBuZXcgRW51bVByb3BlcnR5KFxuICAgICAgICBWZXJzaW9ucy52MV8wLFxuICAgICAgICBcImhvcml6b250YWxBbGlnbm1lbnRcIixcbiAgICAgICAgRW51bXMuSG9yaXpvbnRhbEFsaWdubWVudCk7XG4gICAgc3RhdGljIHJlYWRvbmx5IHNwYWNpbmdQcm9wZXJ0eSA9IG5ldyBFbnVtUHJvcGVydHkoXG4gICAgICAgIFZlcnNpb25zLnYxXzAsXG4gICAgICAgIFwic3BhY2luZ1wiLFxuICAgICAgICBFbnVtcy5TcGFjaW5nLFxuICAgICAgICBFbnVtcy5TcGFjaW5nLkRlZmF1bHQpO1xuXG4gICAgQHByb3BlcnR5KENhcmRFbGVtZW50Lmhvcml6b250YWxBbGlnbm1lbnRQcm9wZXJ0eSlcbiAgICBob3Jpem9udGFsQWxpZ25tZW50PzogRW51bXMuSG9yaXpvbnRhbEFsaWdubWVudDtcblxuICAgIEBwcm9wZXJ0eShDYXJkRWxlbWVudC5zcGFjaW5nUHJvcGVydHkpXG4gICAgc3BhY2luZzogRW51bXMuU3BhY2luZztcblxuICAgIEBwcm9wZXJ0eShDYXJkRWxlbWVudC5zZXBhcmF0b3JQcm9wZXJ0eSlcbiAgICBzZXBhcmF0b3I6IGJvb2xlYW47XG5cbiAgICBAcHJvcGVydHkoQ2FyZEVsZW1lbnQuaGVpZ2h0UHJvcGVydHkpXG4gICAgaGVpZ2h0OiBDYXJkRWxlbWVudEhlaWdodDtcblxuICAgIEBwcm9wZXJ0eShDYXJkRWxlbWVudC5sYW5nUHJvcGVydHkpXG4gICAgZ2V0IGxhbmcoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IGxhbmcgPSB0aGlzLmdldFZhbHVlKENhcmRFbGVtZW50LmxhbmdQcm9wZXJ0eSk7XG5cbiAgICAgICAgaWYgKGxhbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBsYW5nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Lmxhbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0IGxhbmcodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnNldFZhbHVlKENhcmRFbGVtZW50LmxhbmdQcm9wZXJ0eSwgdmFsdWUpO1xuICAgIH1cblxuICAgIEBwcm9wZXJ0eShDYXJkRWxlbWVudC5pc1Zpc2libGVQcm9wZXJ0eSlcbiAgICBnZXQgaXNWaXNpYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShDYXJkRWxlbWVudC5pc1Zpc2libGVQcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgc2V0IGlzVmlzaWJsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBnb2luZyB0byBiZSBoaWRkZW4sIHJlc2V0IGFueSBjaGFuZ2VzIHRoYXQgd2VyZSBkdWVcbiAgICAgICAgLy8gdG8gb3ZlcmZsb3cgdHJ1bmNhdGlvbiAodGhpcyBlbnN1cmVzIHRoYXQgaWYgdGhlIGVsZW1lbnQgaXMgbGF0ZXJcbiAgICAgICAgLy8gdW4taGlkZGVuIGl0IGhhcyB0aGUgcmlnaHQgY29udGVudClcbiAgICAgICAgaWYgKEdsb2JhbFNldHRpbmdzLnVzZUFkdmFuY2VkQ2FyZEJvdHRvbVRydW5jYXRpb24gJiYgIXZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnVuZG9PdmVyZmxvd1RydW5jYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUoQ2FyZEVsZW1lbnQuaXNWaXNpYmxlUHJvcGVydHksIHZhbHVlKTtcblxuICAgICAgICAgICAgdGhpcy51cGRhdGVSZW5kZXJlZEVsZW1lbnRWaXNpYmlsaXR5KCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9yZW5kZXJlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByYWlzZUVsZW1lbnRWaXNpYmlsaXR5Q2hhbmdlZEV2ZW50KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcmVkRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRFbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByaXZhdGUgX2hvc3RDb25maWc/OiBIb3N0Q29uZmlnO1xuICAgIHByaXZhdGUgX3NlcGFyYXRvckVsZW1lbnQ/OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIF90cnVuY2F0ZWREdWVUb092ZXJmbG93OiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfZGVmYXVsdFJlbmRlcmVkRWxlbWVudERpc3BsYXlNb2RlPzogc3RyaW5nO1xuICAgIHByaXZhdGUgX3BhZGRpbmc/OiBQYWRkaW5nRGVmaW5pdGlvbjtcblxuICAgIHByaXZhdGUgaW50ZXJuYWxSZW5kZXJTZXBhcmF0b3IoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgcmVuZGVyZWRTZXBhcmF0b3IgPSByZW5kZXJTZXBhcmF0aW9uKFxuICAgICAgICAgICAgdGhpcy5ob3N0Q29uZmlnLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNwYWNpbmc6IHRoaXMuaG9zdENvbmZpZy5nZXRFZmZlY3RpdmVTcGFjaW5nKHRoaXMuc3BhY2luZyksXG4gICAgICAgICAgICAgICAgbGluZVRoaWNrbmVzczogdGhpcy5zZXBhcmF0b3IgPyB0aGlzLmhvc3RDb25maWcuc2VwYXJhdG9yLmxpbmVUaGlja25lc3MgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbGluZUNvbG9yOiB0aGlzLnNlcGFyYXRvciA/IHRoaXMuaG9zdENvbmZpZy5zZXBhcmF0b3IubGluZUNvbG9yIDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpcy5zZXBhcmF0b3JPcmllbnRhdGlvbik7XG5cbiAgICAgICAgICAgIGlmIChHbG9iYWxTZXR0aW5ncy5hbHdheXNCbGVlZFNlcGFyYXRvcnMgJiYgcmVuZGVyZWRTZXBhcmF0b3IgJiYgdGhpcy5zZXBhcmF0b3JPcmllbnRhdGlvbiA9PSBFbnVtcy5PcmllbnRhdGlvbi5Ib3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRqdXN0IHNlcGFyYXRvcidzIG1hcmdpbnMgaWYgdGhlIG9wdGlvbiB0byBhbHdheXMgYmxlZWQgc2VwYXJhdG9ycyBpcyB0dXJuZWQgb25cbiAgICAgICAgICAgICAgICBsZXQgcGFyZW50Q29udGFpbmVyID0gdGhpcy5nZXRQYXJlbnRDb250YWluZXIoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRDb250YWluZXIgJiYgcGFyZW50Q29udGFpbmVyLmdldEVmZmVjdGl2ZVBhZGRpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyZW50UGh5c2ljYWxQYWRkaW5nID0gdGhpcy5ob3N0Q29uZmlnLnBhZGRpbmdEZWZpbml0aW9uVG9TcGFjaW5nRGVmaW5pdGlvbihwYXJlbnRDb250YWluZXIuZ2V0RWZmZWN0aXZlUGFkZGluZygpKTtcblxuICAgICAgICAgICAgICAgICAgICByZW5kZXJlZFNlcGFyYXRvci5zdHlsZS5tYXJnaW5MZWZ0ID0gXCItXCIgKyBwYXJlbnRQaHlzaWNhbFBhZGRpbmcubGVmdCArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWRTZXBhcmF0b3Iuc3R5bGUubWFyZ2luUmlnaHQgPSBcIi1cIiArIHBhcmVudFBoeXNpY2FsUGFkZGluZy5yaWdodCArIFwicHhcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZW5kZXJlZFNlcGFyYXRvcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVJlbmRlcmVkRWxlbWVudFZpc2liaWxpdHkoKSB7XG4gICAgICAgIGxldCBkaXNwbGF5TW9kZSA9IHRoaXMuaXNEZXNpZ25Nb2RlKCkgfHwgdGhpcy5pc1Zpc2libGUgPyB0aGlzLl9kZWZhdWx0UmVuZGVyZWRFbGVtZW50RGlzcGxheU1vZGUgOiBcIm5vbmVcIjtcblxuICAgICAgICBpZiAodGhpcy5fcmVuZGVyZWRFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoZGlzcGxheU1vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlZEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXlNb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiZGlzcGxheVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9zZXBhcmF0b3JFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuaXNGaXJzdEVsZW1lbnQodGhpcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXBhcmF0b3JFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChkaXNwbGF5TW9kZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXBhcmF0b3JFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5TW9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlcGFyYXRvckVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJkaXNwbGF5XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGlkZUVsZW1lbnREdWVUb092ZXJmbG93KCkge1xuICAgICAgICBpZiAodGhpcy5fcmVuZGVyZWRFbGVtZW50ICYmIHRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlZEVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG5cbiAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICByYWlzZUVsZW1lbnRWaXNpYmlsaXR5Q2hhbmdlZEV2ZW50KHRoaXMsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2hvd0VsZW1lbnRIaWRkZW5EdWVUb092ZXJmbG93KCkge1xuICAgICAgICBpZiAodGhpcy5fcmVuZGVyZWRFbGVtZW50ICYmICF0aGlzLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwidmlzaWJpbGl0eVwiKTtcblxuICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgcmFpc2VFbGVtZW50VmlzaWJpbGl0eUNoYW5nZWRFdmVudCh0aGlzLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNYXJrZWQgcHJpdmF0ZSB0byBlbXVsYXRlIGludGVybmFsIGFjY2Vzc1xuICAgIHByaXZhdGUgaGFuZGxlT3ZlcmZsb3cobWF4SGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlIHx8IHRoaXMuaXNIaWRkZW5EdWVUb092ZXJmbG93KCkpIHtcbiAgICAgICAgICAgIGxldCBoYW5kbGVkID0gdGhpcy50cnVuY2F0ZU92ZXJmbG93KG1heEhlaWdodCk7XG5cbiAgICAgICAgICAgIC8vIEV2ZW4gaWYgd2Ugd2VyZSB1bmFibGUgdG8gdHJ1bmNhdGUgdGhlIGVsZW1lbnQgdG8gZml0IHRoaXMgdGltZSxcbiAgICAgICAgICAgIC8vIGl0IHN0aWxsIGNvdWxkIGhhdmUgYmVlbiBwcmV2aW91c2x5IHRydW5jYXRlZFxuICAgICAgICAgICAgdGhpcy5fdHJ1bmNhdGVkRHVlVG9PdmVyZmxvdyA9IGhhbmRsZWQgfHwgdGhpcy5fdHJ1bmNhdGVkRHVlVG9PdmVyZmxvdztcblxuICAgICAgICAgICAgaWYgKCFoYW5kbGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlRWxlbWVudER1ZVRvT3ZlcmZsb3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGhhbmRsZWQgJiYgIXRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93RWxlbWVudEhpZGRlbkR1ZVRvT3ZlcmZsb3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1hcmtlZCBwcml2YXRlIHRvIGVtdWxhdGUgaW50ZXJuYWwgYWNjZXNzXG4gICAgcHJpdmF0ZSByZXNldE92ZXJmbG93KCk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgc2l6ZUNoYW5nZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5fdHJ1bmNhdGVkRHVlVG9PdmVyZmxvdykge1xuICAgICAgICAgICAgdGhpcy51bmRvT3ZlcmZsb3dUcnVuY2F0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLl90cnVuY2F0ZWREdWVUb092ZXJmbG93ID0gZmFsc2U7XG4gICAgICAgICAgICBzaXplQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc0hpZGRlbkR1ZVRvT3ZlcmZsb3coKSkge1xuICAgICAgICAgICAgdGhpcy5zaG93RWxlbWVudEhpZGRlbkR1ZVRvT3ZlcmZsb3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzaXplQ2hhbmdlZDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0RGVmYXVsdFNlcmlhbGl6YXRpb25Db250ZXh0KCk6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCB7XG4gICAgICAgIHJldHVybiBuZXcgU2VyaWFsaXphdGlvbkNvbnRleHQoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3JlYXRlUGxhY2Vob2xkZXJFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgbGV0IHN0eWxlRGVmaW5pdGlvbiA9IHRoaXMuZ2V0RWZmZWN0aXZlU3R5bGVEZWZpbml0aW9uKCk7XG4gICAgICAgIGxldCBmb3JlZ3JvdW5kQ3NzQ29sb3IgPSBVdGlscy5zdHJpbmdUb0Nzc0NvbG9yKHN0eWxlRGVmaW5pdGlvbi5mb3JlZ3JvdW5kQ29sb3JzLmRlZmF1bHQuc3VidGxlKTtcblxuICAgICAgICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuYm9yZGVyID0gXCIxcHggZGFzaGVkIFwiICsgZm9yZWdyb3VuZENzc0NvbG9yO1xuICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmcgPSBcIjRweFwiO1xuICAgICAgICBlbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9IFwiMzJweFwiO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmZvbnRTaXplID0gXCIxMHB4XCI7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuY29sb3IgPSA8c3RyaW5nPmZvcmVncm91bmRDc3NDb2xvcjtcbiAgICAgICAgZWxlbWVudC5pbm5lclRleHQgPSBcIkVtcHR5IFwiICsgdGhpcy5nZXRKc29uVHlwZU5hbWUoKTtcblxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYWRqdXN0UmVuZGVyZWRFbGVtZW50U2l6ZShyZW5kZXJlZEVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmhlaWdodCA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgICAgIHJlbmRlcmVkRWxlbWVudC5zdHlsZS5mbGV4ID0gXCIwIDAgYXV0b1wiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVuZGVyZWRFbGVtZW50LnN0eWxlLmZsZXggPSBcIjEgMSBhdXRvXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaXNEaXNwbGF5ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJlZEVsZW1lbnQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmlzVmlzaWJsZSAmJiB0aGlzLl9yZW5kZXJlZEVsZW1lbnQub2Zmc2V0SGVpZ2h0ID4gMDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgaW50ZXJuYWxSZW5kZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG5cbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGVJbnRlcm5hbFJlbmRlcigpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsUmVuZGVyKCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFwcGx5UGFkZGluZygpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VwYXJhdG9yRWxlbWVudCAmJiB0aGlzLnNlcGFyYXRvck9yaWVudGF0aW9uID09PSBFbnVtcy5PcmllbnRhdGlvbi5Ib3Jpem9udGFsKSB7XG4gICAgICAgICAgICBpZiAoR2xvYmFsU2V0dGluZ3MuYWx3YXlzQmxlZWRTZXBhcmF0b3JzICYmICF0aGlzLmlzQmxlZWRpbmcoKSkge1xuICAgICAgICAgICAgICAgIGxldCBwYWRkaW5nID0gbmV3IFBhZGRpbmdEZWZpbml0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmdldEltbWVkaWF0ZVN1cnJvdW5kaW5nUGFkZGluZyhwYWRkaW5nKTtcblxuICAgICAgICAgICAgICAgIGxldCBwaHlzaWNhbFBhZGRpbmcgPSB0aGlzLmhvc3RDb25maWcucGFkZGluZ0RlZmluaXRpb25Ub1NwYWNpbmdEZWZpbml0aW9uKHBhZGRpbmcpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXBhcmF0b3JFbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSBcIi1cIiArIHBoeXNpY2FsUGFkZGluZy5sZWZ0ICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VwYXJhdG9yRWxlbWVudC5zdHlsZS5tYXJnaW5SaWdodCA9IFwiLVwiICsgcGh5c2ljYWxQYWRkaW5nLnJpZ2h0ICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXBhcmF0b3JFbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCIwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXBhcmF0b3JFbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSBcIjBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gICAgICogQ2FsbGVkIHdoZW4gdGhpcyBlbGVtZW50IG92ZXJmbG93cyB0aGUgYm90dG9tIG9mIHRoZSBjYXJkLlxuICAgICAqIG1heEhlaWdodCB3aWxsIGJlIHRoZSBhbW91bnQgb2Ygc3BhY2Ugc3RpbGwgYXZhaWxhYmxlIG9uIHRoZSBjYXJkICgwIGlmXG4gICAgICogdGhlIGVsZW1lbnQgaXMgZnVsbHkgb2ZmIHRoZSBjYXJkKS5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdHJ1bmNhdGVPdmVyZmxvdyhtYXhIZWlnaHQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICAvLyBDaGlsZCBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIHJldHVybiB0cnVlIGlmIHRoZSBlbGVtZW50IGhhbmRsZWRcbiAgICAgICAgLy8gdGhlIHRydW5jYXRpb24gcmVxdWVzdCBzdWNoIHRoYXQgaXRzIGNvbnRlbnQgZml0cyB3aXRoaW4gbWF4SGVpZ2h0LFxuICAgICAgICAvLyBmYWxzZSBpZiB0aGUgZWxlbWVudCBzaG91bGQgZmFsbCBiYWNrIHRvIGJlaW5nIGhpZGRlblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBUaGlzIHNob3VsZCByZXZlcnNlIGFueSBjaGFuZ2VzIHBlcmZvcm1lZCBpbiB0cnVuY2F0ZU92ZXJmbG93KCkuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHVuZG9PdmVyZmxvd1RydW5jYXRpb24oKSB7IH1cblxuICAgIHByb3RlY3RlZCBnZXREZWZhdWx0UGFkZGluZygpOiBQYWRkaW5nRGVmaW5pdGlvbiB7XG4gICAgICAgIHJldHVybiBuZXcgUGFkZGluZ0RlZmluaXRpb24oKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0SGFzQmFja2dyb3VuZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRIYXNCb3JkZXIoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0UGFkZGluZygpOiBQYWRkaW5nRGVmaW5pdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYWRkaW5nO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRQYWRkaW5nKHZhbHVlOiBQYWRkaW5nRGVmaW5pdGlvbiB8IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9wYWRkaW5nID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNob3VsZFNlcmlhbGl6ZShjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gY29udGV4dC5lbGVtZW50UmVnaXN0cnkuZmluZEJ5TmFtZSh0aGlzLmdldEpzb25UeXBlTmFtZSgpKSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgdXNlRGVmYXVsdFNpemluZygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBzZXBhcmF0b3JPcmllbnRhdGlvbigpOiBFbnVtcy5PcmllbnRhdGlvbiB7XG4gICAgICAgIHJldHVybiBFbnVtcy5PcmllbnRhdGlvbi5Ib3Jpem9udGFsO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgZGVmYXVsdFN0eWxlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBFbnVtcy5Db250YWluZXJTdHlsZS5EZWZhdWx0O1xuICAgIH1cblxuICAgIGN1c3RvbUNzc1NlbGVjdG9yPzogc3RyaW5nO1xuXG4gICAgcGFyc2Uoc291cmNlOiBhbnksIGNvbnRleHQ/OiBTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBzdXBlci5wYXJzZShzb3VyY2UsIGNvbnRleHQgPyBjb250ZXh0IDogbmV3IFNlcmlhbGl6YXRpb25Db250ZXh0KCkpO1xuICAgIH1cblxuICAgIGFzU3RyaW5nKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIGlzQmxlZWRpbmcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRFZmZlY3RpdmVTdHlsZSgpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXRFZmZlY3RpdmVTdHlsZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFN0eWxlO1xuICAgIH1cblxuICAgIGdldEVmZmVjdGl2ZVN0eWxlRGVmaW5pdGlvbigpOiBDb250YWluZXJTdHlsZURlZmluaXRpb24ge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3N0Q29uZmlnLmNvbnRhaW5lclN0eWxlcy5nZXRTdHlsZUJ5TmFtZSh0aGlzLmdldEVmZmVjdGl2ZVN0eWxlKCkpO1xuICAgIH1cblxuICAgIGdldEVmZmVjdGl2ZVRleHRTdHlsZURlZmluaXRpb24oKTogVGV4dFN0eWxlRGVmaW5pdGlvbiB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmdldEVmZmVjdGl2ZVRleHRTdHlsZURlZmluaXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3RDb25maWcudGV4dFN0eWxlcy5kZWZhdWx0O1xuICAgIH1cblxuICAgIGdldEZvcmJpZGRlbkFjdGlvblR5cGVzKCk6IEFjdGlvblR5cGVbXSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBnZXRJbW1lZGlhdGVTdXJyb3VuZGluZ1BhZGRpbmcoXG4gICAgICAgIHJlc3VsdDogUGFkZGluZ0RlZmluaXRpb24sXG4gICAgICAgIHByb2Nlc3NUb3A6IGJvb2xlYW4gPSB0cnVlLFxuICAgICAgICBwcm9jZXNzUmlnaHQ6IGJvb2xlYW4gPSB0cnVlLFxuICAgICAgICBwcm9jZXNzQm90dG9tOiBib29sZWFuID0gdHJ1ZSxcbiAgICAgICAgcHJvY2Vzc0xlZnQ6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgbGV0IGRvUHJvY2Vzc1RvcCA9IHByb2Nlc3NUb3AgJiYgdGhpcy5wYXJlbnQuaXNUb3BFbGVtZW50KHRoaXMpO1xuICAgICAgICAgICAgbGV0IGRvUHJvY2Vzc1JpZ2h0ID0gcHJvY2Vzc1JpZ2h0ICYmIHRoaXMucGFyZW50LmlzUmlnaHRNb3N0RWxlbWVudCh0aGlzKTtcbiAgICAgICAgICAgIGxldCBkb1Byb2Nlc3NCb3R0b20gPSBwcm9jZXNzQm90dG9tICYmIHRoaXMucGFyZW50LmlzQm90dG9tRWxlbWVudCh0aGlzKTtcbiAgICAgICAgICAgIGxldCBkb1Byb2Nlc3NMZWZ0ID0gcHJvY2Vzc0xlZnQgJiYgdGhpcy5wYXJlbnQuaXNMZWZ0TW9zdEVsZW1lbnQodGhpcyk7XG5cbiAgICAgICAgICAgIGxldCBlZmZlY3RpdmVQYWRkaW5nID0gdGhpcy5wYXJlbnQuZ2V0RWZmZWN0aXZlUGFkZGluZygpO1xuXG4gICAgICAgICAgICBpZiAoZWZmZWN0aXZlUGFkZGluZykge1xuICAgICAgICAgICAgICAgIGlmIChkb1Byb2Nlc3NUb3AgJiYgZWZmZWN0aXZlUGFkZGluZy50b3AgIT0gRW51bXMuU3BhY2luZy5Ob25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC50b3AgPSBlZmZlY3RpdmVQYWRkaW5nLnRvcDtcblxuICAgICAgICAgICAgICAgICAgICBkb1Byb2Nlc3NUb3AgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9Qcm9jZXNzUmlnaHQgJiYgZWZmZWN0aXZlUGFkZGluZy5yaWdodCAhPSBFbnVtcy5TcGFjaW5nLk5vbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnJpZ2h0ID0gZWZmZWN0aXZlUGFkZGluZy5yaWdodDtcblxuICAgICAgICAgICAgICAgICAgICBkb1Byb2Nlc3NSaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChkb1Byb2Nlc3NCb3R0b20gJiYgZWZmZWN0aXZlUGFkZGluZy5ib3R0b20gIT0gRW51bXMuU3BhY2luZy5Ob25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ib3R0b20gPSBlZmZlY3RpdmVQYWRkaW5nLmJvdHRvbTtcblxuICAgICAgICAgICAgICAgICAgICBkb1Byb2Nlc3NCb3R0b20gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9Qcm9jZXNzTGVmdCAmJiBlZmZlY3RpdmVQYWRkaW5nLmxlZnQgIT0gRW51bXMuU3BhY2luZy5Ob25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5sZWZ0ID0gZWZmZWN0aXZlUGFkZGluZy5sZWZ0O1xuXG4gICAgICAgICAgICAgICAgICAgIGRvUHJvY2Vzc0xlZnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkb1Byb2Nlc3NUb3AgfHwgZG9Qcm9jZXNzUmlnaHQgfHwgZG9Qcm9jZXNzQm90dG9tIHx8IGRvUHJvY2Vzc0xlZnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5nZXRJbW1lZGlhdGVTdXJyb3VuZGluZ1BhZGRpbmcoXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgZG9Qcm9jZXNzVG9wLFxuICAgICAgICAgICAgICAgICAgICBkb1Byb2Nlc3NSaWdodCxcbiAgICAgICAgICAgICAgICAgICAgZG9Qcm9jZXNzQm90dG9tLFxuICAgICAgICAgICAgICAgICAgICBkb1Byb2Nlc3NMZWZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEFjdGlvbkNvdW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGdldEFjdGlvbkF0KGluZGV4OiBudW1iZXIpOiBBY3Rpb24gfCB1bmRlZmluZWQge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoU3RyaW5ncy5lcnJvcnMuaW5kZXhPdXRPZlJhbmdlKGluZGV4KSk7XG4gICAgfVxuXG4gICAgaW5kZXhPZkFjdGlvbihhY3Rpb246IEFjdGlvbik6IG51bWJlciB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5nZXRBY3Rpb25Db3VudCgpOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdldEFjdGlvbkF0KGkpID09PSBhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICByZW1vdmUoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudCBpbnN0YW5jZW9mIENhcmRFbGVtZW50Q29udGFpbmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQucmVtb3ZlSXRlbSh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZW5kZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICB0aGlzLl9yZW5kZXJlZEVsZW1lbnQgPSB0aGlzLm92ZXJyaWRlSW50ZXJuYWxSZW5kZXIoKTtcbiAgICAgICAgdGhpcy5fc2VwYXJhdG9yRWxlbWVudCA9IHRoaXMuaW50ZXJuYWxSZW5kZXJTZXBhcmF0b3IoKTtcblxuICAgICAgICBpZiAodGhpcy5fcmVuZGVyZWRFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkRWxlbWVudC5pZCA9IHRoaXMuaWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmN1c3RvbUNzc1NlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5jdXN0b21Dc3NTZWxlY3Rvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkRWxlbWVudC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcbiAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRSZW5kZXJlZEVsZW1lbnREaXNwbGF5TW9kZSA9IHRoaXMuX3JlbmRlcmVkRWxlbWVudC5zdHlsZS5kaXNwbGF5ID8gdGhpcy5fcmVuZGVyZWRFbGVtZW50LnN0eWxlLmRpc3BsYXkgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRoaXMuYWRqdXN0UmVuZGVyZWRFbGVtZW50U2l6ZSh0aGlzLl9yZW5kZXJlZEVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVMYXlvdXQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNEZXNpZ25Nb2RlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkRWxlbWVudCA9IHRoaXMuY3JlYXRlUGxhY2Vob2xkZXJFbGVtZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyZWRFbGVtZW50O1xuICAgIH1cblxuICAgIHVwZGF0ZUxheW91dChwcm9jZXNzQ2hpbGRyZW46IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlUmVuZGVyZWRFbGVtZW50VmlzaWJpbGl0eSgpO1xuICAgICAgICB0aGlzLmFwcGx5UGFkZGluZygpO1xuICAgIH1cblxuICAgIGluZGV4T2YoY2FyZEVsZW1lbnQ6IENhcmRFbGVtZW50KTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlzRGVzaWduTW9kZSgpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHJvb3RFbGVtZW50ID0gdGhpcy5nZXRSb290RWxlbWVudCgpO1xuXG4gICAgICAgIHJldHVybiByb290RWxlbWVudCBpbnN0YW5jZW9mIEFkYXB0aXZlQ2FyZCAmJiByb290RWxlbWVudC5kZXNpZ25Nb2RlO1xuICAgIH1cblxuICAgIGlzRmlyc3RFbGVtZW50KGVsZW1lbnQ6IENhcmRFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlzTGFzdEVsZW1lbnQoZWxlbWVudDogQ2FyZEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaXNBdFRoZVZlcnlMZWZ0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5pc0xlZnRNb3N0RWxlbWVudCh0aGlzKSAmJiB0aGlzLnBhcmVudC5pc0F0VGhlVmVyeUxlZnQoKSA6IHRydWU7XG4gICAgfVxuXG4gICAgaXNBdFRoZVZlcnlSaWdodCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuaXNSaWdodE1vc3RFbGVtZW50KHRoaXMpICYmIHRoaXMucGFyZW50LmlzQXRUaGVWZXJ5UmlnaHQoKSA6IHRydWU7XG4gICAgfVxuXG4gICAgaXNBdFRoZVZlcnlUb3AoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LmlzRmlyc3RFbGVtZW50KHRoaXMpICYmIHRoaXMucGFyZW50LmlzQXRUaGVWZXJ5VG9wKCkgOiB0cnVlO1xuICAgIH1cblxuICAgIGlzQXRUaGVWZXJ5Qm90dG9tKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5pc0xhc3RFbGVtZW50KHRoaXMpICYmIHRoaXMucGFyZW50LmlzQXRUaGVWZXJ5Qm90dG9tKCkgOiB0cnVlO1xuICAgIH1cblxuICAgIGlzQmxlZWRpbmdBdFRvcCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlzQmxlZWRpbmdBdEJvdHRvbSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlzTGVmdE1vc3RFbGVtZW50KGVsZW1lbnQ6IENhcmRFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlzUmlnaHRNb3N0RWxlbWVudChlbGVtZW50OiBDYXJkRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpc1RvcEVsZW1lbnQoZWxlbWVudDogQ2FyZEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNGaXJzdEVsZW1lbnQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgaXNCb3R0b21FbGVtZW50KGVsZW1lbnQ6IENhcmRFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzTGFzdEVsZW1lbnQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgaXNIaWRkZW5EdWVUb092ZXJmbG93KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyZWRFbGVtZW50ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5fcmVuZGVyZWRFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPT0gJ2hpZGRlbic7XG4gICAgfVxuXG4gICAgZ2V0Um9vdEVsZW1lbnQoKTogQ2FyZEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSb290T2JqZWN0KCkgYXMgQ2FyZEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZ2V0UGFyZW50Q29udGFpbmVyKCk6IENvbnRhaW5lciB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCBjdXJyZW50RWxlbWVudCA9IHRoaXMucGFyZW50O1xuXG4gICAgICAgIHdoaWxlIChjdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50IGluc3RhbmNlb2YgQ29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxDb250YWluZXI+Y3VycmVudEVsZW1lbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY3VycmVudEVsZW1lbnQucGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXRBbGxJbnB1dHMocHJvY2Vzc0FjdGlvbnM6IGJvb2xlYW4gPSB0cnVlKTogSW5wdXRbXSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBnZXRSZXNvdXJjZUluZm9ybWF0aW9uKCk6IElSZXNvdXJjZUluZm9ybWF0aW9uW10ge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgZ2V0RWxlbWVudEJ5SWQoaWQ6IHN0cmluZyk6IENhcmRFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQgPT09IGlkID8gdGhpcyA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXRBY3Rpb25CeUlkKGlkOiBzdHJpbmcpOiBBY3Rpb24gfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGdldEVmZmVjdGl2ZVBhZGRpbmcoKTogUGFkZGluZ0RlZmluaXRpb24ge1xuICAgICAgICBsZXQgcGFkZGluZyA9IHRoaXMuZ2V0UGFkZGluZygpO1xuXG4gICAgICAgIHJldHVybiBwYWRkaW5nID8gcGFkZGluZyA6IHRoaXMuZ2V0RGVmYXVsdFBhZGRpbmcoKTtcbiAgICB9XG5cbiAgICBnZXRFZmZlY3RpdmVIb3Jpem9udGFsQWxpZ25tZW50KCk6IEVudW1zLkhvcml6b250YWxBbGlnbm1lbnQge1xuICAgICAgICBpZiAodGhpcy5ob3Jpem9udGFsQWxpZ25tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvcml6b250YWxBbGlnbm1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXRFZmZlY3RpdmVIb3Jpem9udGFsQWxpZ25tZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gRW51bXMuSG9yaXpvbnRhbEFsaWdubWVudC5MZWZ0O1xuICAgIH1cblxuICAgIGdldCBob3N0Q29uZmlnKCk6IEhvc3RDb25maWcge1xuICAgICAgICBpZiAodGhpcy5faG9zdENvbmZpZykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hvc3RDb25maWc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuaG9zdENvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0SG9zdENvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldCBob3N0Q29uZmlnKHZhbHVlOiBIb3N0Q29uZmlnKSB7XG4gICAgICAgIHRoaXMuX2hvc3RDb25maWcgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgaW5kZXgoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuaW5kZXhPZih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGlzSW50ZXJhY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXQgaXNTdGFuZGFsb25lKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgaXNJbmxpbmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXQgaGFzVmlzaWJsZVNlcGFyYXRvcigpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICYmIHRoaXMuc2VwYXJhdG9yRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLnBhcmVudC5pc0ZpcnN0RWxlbWVudCh0aGlzKSAmJiAodGhpcy5pc1Zpc2libGUgfHwgdGhpcy5pc0Rlc2lnbk1vZGUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgc2VwYXJhdG9yRWxlbWVudCgpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXBhcmF0b3JFbGVtZW50O1xuICAgIH1cblxuICAgIGdldCBwYXJlbnQoKTogQ2FyZEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gPENhcmRFbGVtZW50PnRoaXMuX3BhcmVudDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25Qcm9wZXJ0eSBleHRlbmRzIFByb3BlcnR5RGVmaW5pdGlvbiB7XG4gICAgcGFyc2Uoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QsIHNvdXJjZTogUHJvcGVydHlCYWcsIGNvbnRleHQ6IFNlcmlhbGl6YXRpb25Db250ZXh0KTogQWN0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IHBhcmVudCA9IDxDYXJkRWxlbWVudD5zZW5kZXI7XG5cbiAgICAgICAgcmV0dXJuIGNvbnRleHQucGFyc2VBY3Rpb24oXG4gICAgICAgICAgICBwYXJlbnQsXG4gICAgICAgICAgICBzb3VyY2VbdGhpcy5uYW1lXSxcbiAgICAgICAgICAgIHRoaXMuZm9yYmlkZGVuQWN0aW9uVHlwZXMsXG4gICAgICAgICAgICBwYXJlbnQuaXNEZXNpZ25Nb2RlKCkpO1xuICAgIH1cblxuICAgIHRvSlNPTihzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgdGFyZ2V0OiBQcm9wZXJ0eUJhZywgdmFsdWU6IEFjdGlvbiB8IHVuZGVmaW5lZCwgY29udGV4dDogU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5zZXJpYWxpemVWYWx1ZSh0YXJnZXQsIHRoaXMubmFtZSwgdmFsdWUgPyB2YWx1ZS50b0pTT04oY29udGV4dCkgOiB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHJlYWRvbmx5IHRhcmdldFZlcnNpb246IFZlcnNpb24sXG4gICAgICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZyxcbiAgICAgICAgcmVhZG9ubHkgZm9yYmlkZGVuQWN0aW9uVHlwZXM6IHN0cmluZ1tdID0gW10pIHtcbiAgICAgICAgc3VwZXIodGFyZ2V0VmVyc2lvbiwgbmFtZSwgdW5kZWZpbmVkKTtcbiAgICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlVGV4dEJsb2NrIGV4dGVuZHMgQ2FyZEVsZW1lbnQge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSB0ZXh0UHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJ0ZXh0XCIsIHRydWUpO1xuICAgIHN0YXRpYyByZWFkb25seSBzaXplUHJvcGVydHkgPSBuZXcgRW51bVByb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwic2l6ZVwiLCBFbnVtcy5UZXh0U2l6ZSk7XG4gICAgc3RhdGljIHJlYWRvbmx5IHdlaWdodFByb3BlcnR5ID0gbmV3IEVudW1Qcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcIndlaWdodFwiLCBFbnVtcy5UZXh0V2VpZ2h0KTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgY29sb3JQcm9wZXJ0eSA9IG5ldyBFbnVtUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJjb2xvclwiLCBFbnVtcy5UZXh0Q29sb3IpO1xuICAgIHN0YXRpYyByZWFkb25seSBpc1N1YnRsZVByb3BlcnR5ID0gbmV3IEJvb2xQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcImlzU3VidGxlXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBmb250VHlwZVByb3BlcnR5ID0gbmV3IEVudW1Qcm9wZXJ0eShWZXJzaW9ucy52MV8yLCBcImZvbnRUeXBlXCIsIEVudW1zLkZvbnRUeXBlKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgc2VsZWN0QWN0aW9uUHJvcGVydHkgPSBuZXcgQWN0aW9uUHJvcGVydHkoVmVyc2lvbnMudjFfMSwgXCJzZWxlY3RBY3Rpb25cIiwgWyBcIkFjdGlvbi5TaG93Q2FyZFwiIF0pO1xuXG4gICAgcHJvdGVjdGVkIHBvcHVsYXRlU2NoZW1hKHNjaGVtYTogU2VyaWFsaXphYmxlT2JqZWN0U2NoZW1hKSB7XG4gICAgICAgIHN1cGVyLnBvcHVsYXRlU2NoZW1hKHNjaGVtYSk7XG5cbiAgICAgICAgLy8gc2VsZWN0QWN0aW9uIGlzIGRlY2xhcmVkIG9uIEJhc2VUZXh0QmxvY2sgYnV0IGlzIG9ubHkgZXhwb3NlZCBvbiBUZXh0UnVuLFxuICAgICAgICAvLyBzbyB0aGUgcHJvcGVydHkgaXMgcmVtb3ZlZCBmcm9tIHRoZSBCYXNlVGV4dEJsb2NrIHNjaGVtYS5cbiAgICAgICAgc2NoZW1hLnJlbW92ZShCYXNlVGV4dEJsb2NrLnNlbGVjdEFjdGlvblByb3BlcnR5KTtcbiAgICB9XG5cbiAgICBAcHJvcGVydHkoQmFzZVRleHRCbG9jay5zaXplUHJvcGVydHkpXG4gICAgc2l6ZT86IEVudW1zLlRleHRTaXplO1xuXG4gICAgQHByb3BlcnR5KEJhc2VUZXh0QmxvY2sud2VpZ2h0UHJvcGVydHkpXG4gICAgd2VpZ2h0PzogRW51bXMuVGV4dFdlaWdodDtcblxuICAgIEBwcm9wZXJ0eShCYXNlVGV4dEJsb2NrLmNvbG9yUHJvcGVydHkpXG4gICAgY29sb3I/OiBFbnVtcy5UZXh0Q29sb3I7XG5cbiAgICBAcHJvcGVydHkoQmFzZVRleHRCbG9jay5mb250VHlwZVByb3BlcnR5KVxuICAgIGZvbnRUeXBlPzogRW51bXMuRm9udFR5cGU7XG5cbiAgICBAcHJvcGVydHkoQmFzZVRleHRCbG9jay5pc1N1YnRsZVByb3BlcnR5KVxuICAgIGlzU3VidGxlPzogYm9vbGVhbjtcblxuICAgIEBwcm9wZXJ0eShCYXNlVGV4dEJsb2NrLnRleHRQcm9wZXJ0eSlcbiAgICBnZXQgdGV4dCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShCYXNlVGV4dEJsb2NrLnRleHRQcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgc2V0IHRleHQodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnNldFRleHQodmFsdWUpO1xuICAgIH1cblxuICAgIEBwcm9wZXJ0eShCYXNlVGV4dEJsb2NrLnNlbGVjdEFjdGlvblByb3BlcnR5KVxuICAgIHNlbGVjdEFjdGlvbj86IEFjdGlvbjtcblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgcHJvdGVjdGVkIGdldEZvbnRTaXplKGZvbnRUeXBlOiBGb250VHlwZURlZmluaXRpb24pOiBudW1iZXIge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuZWZmZWN0aXZlU2l6ZSkge1xuICAgICAgICAgICAgY2FzZSBFbnVtcy5UZXh0U2l6ZS5TbWFsbDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9udFR5cGUuZm9udFNpemVzLnNtYWxsO1xuICAgICAgICAgICAgY2FzZSBFbnVtcy5UZXh0U2l6ZS5NZWRpdW06XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvbnRUeXBlLmZvbnRTaXplcy5tZWRpdW07XG4gICAgICAgICAgICBjYXNlIEVudW1zLlRleHRTaXplLkxhcmdlOlxuICAgICAgICAgICAgICAgIHJldHVybiBmb250VHlwZS5mb250U2l6ZXMubGFyZ2U7XG4gICAgICAgICAgICBjYXNlIEVudW1zLlRleHRTaXplLkV4dHJhTGFyZ2U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvbnRUeXBlLmZvbnRTaXplcy5leHRyYUxhcmdlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9udFR5cGUuZm9udFNpemVzLmRlZmF1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0Q29sb3JEZWZpbml0aW9uKGNvbG9yU2V0OiBDb2xvclNldERlZmluaXRpb24sIGNvbG9yOiBFbnVtcy5UZXh0Q29sb3IpOiBUZXh0Q29sb3JEZWZpbml0aW9uIHtcbiAgICAgICAgc3dpdGNoIChjb2xvcikge1xuICAgICAgICAgICAgY2FzZSBFbnVtcy5UZXh0Q29sb3IuQWNjZW50OlxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvclNldC5hY2NlbnQ7XG4gICAgICAgICAgICBjYXNlIEVudW1zLlRleHRDb2xvci5EYXJrOlxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvclNldC5kYXJrO1xuICAgICAgICAgICAgY2FzZSBFbnVtcy5UZXh0Q29sb3IuTGlnaHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9yU2V0LmxpZ2h0O1xuICAgICAgICAgICAgY2FzZSBFbnVtcy5UZXh0Q29sb3IuR29vZDpcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3JTZXQuZ29vZDtcbiAgICAgICAgICAgIGNhc2UgRW51bXMuVGV4dENvbG9yLldhcm5pbmc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9yU2V0Lndhcm5pbmc7XG4gICAgICAgICAgICBjYXNlIEVudW1zLlRleHRDb2xvci5BdHRlbnRpb246XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9yU2V0LmF0dGVudGlvbjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9yU2V0LmRlZmF1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2V0VGV4dCh2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuc2V0VmFsdWUoQmFzZVRleHRCbG9jay50ZXh0UHJvcGVydHksIHZhbHVlKTtcbiAgICB9XG5cbiAgICBhcmlhSGlkZGVuOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcih0ZXh0Pzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0KHRleHREZWZpbml0aW9uOiBCYXNlVGV4dERlZmluaXRpb24pIHtcbiAgICAgICAgdGhpcy5zaXplID0gdGV4dERlZmluaXRpb24uc2l6ZTtcbiAgICAgICAgdGhpcy53ZWlnaHQgPSB0ZXh0RGVmaW5pdGlvbi53ZWlnaHQ7XG4gICAgICAgIHRoaXMuY29sb3IgPSB0ZXh0RGVmaW5pdGlvbi5jb2xvcjtcbiAgICAgICAgdGhpcy5pc1N1YnRsZSA9IHRleHREZWZpbml0aW9uLmlzU3VidGxlO1xuICAgIH1cblxuICAgIGFzU3RyaW5nKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQ7XG4gICAgfVxuXG4gICAgYXBwbHlTdHlsZXNUbyh0YXJnZXRFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBsZXQgZm9udFR5cGUgPSB0aGlzLmhvc3RDb25maWcuZ2V0Rm9udFR5cGVEZWZpbml0aW9uKHRoaXMuZWZmZWN0aXZlRm9udFR5cGUpO1xuXG4gICAgICAgIGlmIChmb250VHlwZS5mb250RmFtaWx5KSB7XG4gICAgICAgICAgICB0YXJnZXRFbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSBmb250VHlwZS5mb250RmFtaWx5O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZvbnRTaXplOiBudW1iZXI7XG5cbiAgICAgICAgc3dpdGNoICh0aGlzLmVmZmVjdGl2ZVNpemUpIHtcbiAgICAgICAgICAgIGNhc2UgRW51bXMuVGV4dFNpemUuU21hbGw6XG4gICAgICAgICAgICAgICAgZm9udFNpemUgPSBmb250VHlwZS5mb250U2l6ZXMuc21hbGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEVudW1zLlRleHRTaXplLk1lZGl1bTpcbiAgICAgICAgICAgICAgICBmb250U2l6ZSA9IGZvbnRUeXBlLmZvbnRTaXplcy5tZWRpdW07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEVudW1zLlRleHRTaXplLkxhcmdlOlxuICAgICAgICAgICAgICAgIGZvbnRTaXplID0gZm9udFR5cGUuZm9udFNpemVzLmxhcmdlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFbnVtcy5UZXh0U2l6ZS5FeHRyYUxhcmdlOlxuICAgICAgICAgICAgICAgIGZvbnRTaXplID0gZm9udFR5cGUuZm9udFNpemVzLmV4dHJhTGFyZ2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGZvbnRTaXplID0gZm9udFR5cGUuZm9udFNpemVzLmRlZmF1bHQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gZm9udFNpemUgKyBcInB4XCI7XG5cbiAgICAgICAgbGV0IGNvbG9yRGVmaW5pdGlvbiA9IHRoaXMuZ2V0Q29sb3JEZWZpbml0aW9uKHRoaXMuZ2V0RWZmZWN0aXZlU3R5bGVEZWZpbml0aW9uKCkuZm9yZWdyb3VuZENvbG9ycywgdGhpcy5lZmZlY3RpdmVDb2xvcik7XG5cbiAgICAgICAgdGFyZ2V0RWxlbWVudC5zdHlsZS5jb2xvciA9IDxzdHJpbmc+VXRpbHMuc3RyaW5nVG9Dc3NDb2xvcih0aGlzLmVmZmVjdGl2ZUlzU3VidGxlID8gY29sb3JEZWZpbml0aW9uLnN1YnRsZSA6IGNvbG9yRGVmaW5pdGlvbi5kZWZhdWx0KTtcblxuICAgICAgICBsZXQgZm9udFdlaWdodDogbnVtYmVyO1xuXG4gICAgICAgIHN3aXRjaCAodGhpcy5lZmZlY3RpdmVXZWlnaHQpIHtcbiAgICAgICAgICAgIGNhc2UgRW51bXMuVGV4dFdlaWdodC5MaWdodGVyOlxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQgPSBmb250VHlwZS5mb250V2VpZ2h0cy5saWdodGVyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFbnVtcy5UZXh0V2VpZ2h0LkJvbGRlcjpcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0ID0gZm9udFR5cGUuZm9udFdlaWdodHMuYm9sZGVyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0ID0gZm9udFR5cGUuZm9udFdlaWdodHMuZGVmYXVsdDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldEVsZW1lbnQuc3R5bGUuZm9udFdlaWdodCA9IGZvbnRXZWlnaHQudG9TdHJpbmcoKTtcblxuICAgICAgICBpZiAodGhpcy5hcmlhSGlkZGVuKSB7XG4gICAgICAgICAgICB0YXJnZXRFbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBlZmZlY3RpdmVDb2xvcigpOiBFbnVtcy5UZXh0Q29sb3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xvciAhPT0gdW5kZWZpbmVkID8gdGhpcy5jb2xvciA6IHRoaXMuZ2V0RWZmZWN0aXZlVGV4dFN0eWxlRGVmaW5pdGlvbigpLmNvbG9yO1xuICAgIH1cblxuICAgIGdldCBlZmZlY3RpdmVGb250VHlwZSgpOiBFbnVtcy5Gb250VHlwZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvbnRUeXBlICE9PSB1bmRlZmluZWQgPyB0aGlzLmZvbnRUeXBlIDogdGhpcy5nZXRFZmZlY3RpdmVUZXh0U3R5bGVEZWZpbml0aW9uKCkuZm9udFR5cGU7XG4gICAgfVxuXG4gICAgZ2V0IGVmZmVjdGl2ZUlzU3VidGxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1N1YnRsZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5pc1N1YnRsZSA6IHRoaXMuZ2V0RWZmZWN0aXZlVGV4dFN0eWxlRGVmaW5pdGlvbigpLmlzU3VidGxlO1xuICAgIH1cblxuICAgIGdldCBlZmZlY3RpdmVTaXplKCk6IEVudW1zLlRleHRTaXplIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5zaXplIDogdGhpcy5nZXRFZmZlY3RpdmVUZXh0U3R5bGVEZWZpbml0aW9uKCkuc2l6ZTtcbiAgICB9XG5cbiAgICBnZXQgZWZmZWN0aXZlV2VpZ2h0KCk6IEVudW1zLlRleHRXZWlnaHQge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWlnaHQgIT09IHVuZGVmaW5lZCA/IHRoaXMud2VpZ2h0IDogdGhpcy5nZXRFZmZlY3RpdmVUZXh0U3R5bGVEZWZpbml0aW9uKCkud2VpZ2h0O1xuICAgIH1cbn1cblxuZXhwb3J0IHR5cGUgVGV4dEJsb2NrU3R5bGUgPSBcImRlZmF1bHRcIiB8IFwiaGVhZGluZ1wiIHwgXCJjb2x1bW5IZWFkZXJcIjtcblxuZXhwb3J0IGNsYXNzIFRleHRCbG9jayBleHRlbmRzIEJhc2VUZXh0QmxvY2sge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSB3cmFwUHJvcGVydHkgPSBuZXcgQm9vbFByb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwid3JhcFwiLCBmYWxzZSk7XG4gICAgc3RhdGljIHJlYWRvbmx5IG1heExpbmVzUHJvcGVydHkgPSBuZXcgTnVtUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJtYXhMaW5lc1wiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgc3R5bGVQcm9wZXJ0eSA9IG5ldyBWYWx1ZVNldFByb3BlcnR5KFxuICAgICAgICBWZXJzaW9ucy52MV81LFxuICAgICAgICBcInN0eWxlXCIsXG4gICAgICAgIFtcbiAgICAgICAgICAgIHsgdmFsdWU6IFwiZGVmYXVsdFwiIH0sXG4gICAgICAgICAgICB7IHZhbHVlOiBcImNvbHVtbkhlYWRlclwiIH0sXG4gICAgICAgICAgICB7IHZhbHVlOiBcImhlYWRpbmdcIiB9XG4gICAgICAgIF0pO1xuXG4gICAgQHByb3BlcnR5KFRleHRCbG9jay53cmFwUHJvcGVydHkpXG4gICAgd3JhcDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgQHByb3BlcnR5KFRleHRCbG9jay5tYXhMaW5lc1Byb3BlcnR5KVxuICAgIG1heExpbmVzPzogbnVtYmVyO1xuXG4gICAgQHByb3BlcnR5KFRleHRCbG9jay5zdHlsZVByb3BlcnR5KVxuICAgIHN0eWxlPzogVGV4dEJsb2NrU3R5bGU7XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByaXZhdGUgX2NvbXB1dGVkTGluZUhlaWdodDogbnVtYmVyO1xuICAgIHByaXZhdGUgX29yaWdpbmFsSW5uZXJIdG1sOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfcHJvY2Vzc2VkVGV4dD86IHN0cmluZztcbiAgICBwcml2YXRlIF90cmVhdEFzUGxhaW5UZXh0OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIHByaXZhdGUgcmVzdG9yZU9yaWdpbmFsQ29udGVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZWRFbGVtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1heExpbmVzICYmIHRoaXMubWF4TGluZXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuc3R5bGUubWF4SGVpZ2h0ID0gdGhpcy5fY29tcHV0ZWRMaW5lSGVpZ2h0ICogdGhpcy5tYXhMaW5lcyArIFwicHhcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5fb3JpZ2luYWxJbm5lckh0bWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRydW5jYXRlSWZTdXBwb3J0ZWQobWF4SGVpZ2h0OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZWRFbGVtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIEZvciBub3csIG9ubHkgdHJ1bmNhdGUgVGV4dEJsb2NrcyB0aGF0IGNvbnRhaW4ganVzdCBhIHNpbmdsZVxuICAgICAgICAgICAgLy8gcGFyYWdyYXBoIC0tIHNpbmNlIHRoZSBtYXhMaW5lcyBjYWxjdWxhdGlvbiBkb2Vzbid0IHRha2UgaW50b1xuICAgICAgICAgICAgLy8gYWNjb3VudCBNYXJrZG93biBsaXN0c1xuICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gdGhpcy5yZW5kZXJlZEVsZW1lbnQuY2hpbGRyZW47XG4gICAgICAgICAgICBsZXQgaXNUZXh0T25seSA9ICFjaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgdHJ1bmNhdGlvblN1cHBvcnRlZCA9IGlzVGV4dE9ubHkgfHwgY2hpbGRyZW4ubGVuZ3RoID09IDEgJiYgKDxIVE1MRWxlbWVudD5jaGlsZHJlblswXSkudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09ICdwJztcblxuICAgICAgICAgICAgaWYgKHRydW5jYXRpb25TdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgZWxlbWVudCA9IGlzVGV4dE9ubHkgPyB0aGlzLnJlbmRlcmVkRWxlbWVudCA6IDxIVE1MRWxlbWVudD5jaGlsZHJlblswXTtcblxuICAgICAgICAgICAgICAgIFV0aWxzLnRydW5jYXRlKGVsZW1lbnQsIG1heEhlaWdodCwgdGhpcy5fY29tcHV0ZWRMaW5lSGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRUZXh0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIuc2V0VGV4dCh2YWx1ZSk7XG5cbiAgICAgICAgdGhpcy5fcHJvY2Vzc2VkVGV4dCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxSZW5kZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICB0aGlzLl9wcm9jZXNzZWRUZXh0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0aGlzLnRleHQpIHtcbiAgICAgICAgICAgIGxldCBwcmVQcm9jZXNzZWRUZXh0ID0gdGhpcy5wcmVQcm9jZXNzUHJvcGVydHlWYWx1ZShCYXNlVGV4dEJsb2NrLnRleHRQcm9wZXJ0eSk7XG4gICAgICAgICAgICBsZXQgaG9zdENvbmZpZyA9IHRoaXMuaG9zdENvbmZpZztcblxuICAgICAgICAgICAgbGV0IGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5mb3JFbGVtZW50SWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgbGFiZWxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICAgICAgICAgIGxhYmVsRWxlbWVudC5odG1sRm9yID0gdGhpcy5mb3JFbGVtZW50SWQ7XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gbGFiZWxFbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy10ZXh0QmxvY2tcIikpO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cbiAgICAgICAgICAgIHRoaXMuYXBwbHlTdHlsZXNUbyhlbGVtZW50KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc3R5bGUgPT09IFwiaGVhZGluZ1wiKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiaGVhZGluZ1wiKTtcblxuICAgICAgICAgICAgICAgIGxldCBoZWFkaW5nTGV2ZWwgPSB0aGlzLmhvc3RDb25maWcudGV4dEJsb2NrLmhlYWRpbmdMZXZlbDtcblxuICAgICAgICAgICAgICAgIGlmIChoZWFkaW5nTGV2ZWwgIT09IHVuZGVmaW5lZCAmJiBoZWFkaW5nTGV2ZWwgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sZXZlbFwiLCBoZWFkaW5nTGV2ZWwudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RBY3Rpb24gJiYgaG9zdENvbmZpZy5zdXBwb3J0c0ludGVyYWN0aXZpdHkpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RBY3Rpb24gJiYgdGhpcy5zZWxlY3RBY3Rpb24uaXNFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0QWN0aW9uLmV4ZWN1dGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0QWN0aW9uLnNldHVwRWxlbWVudEZvckFjY2Vzc2liaWxpdHkoZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RBY3Rpb24uaXNFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy1zZWxlY3RhYmxlXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5fcHJvY2Vzc2VkVGV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyZWF0QXNQbGFpblRleHQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgbGV0IGZvcm1hdHRlZFRleHQgPSBUZXh0Rm9ybWF0dGVycy5mb3JtYXRUZXh0KHRoaXMubGFuZywgcHJlUHJvY2Vzc2VkVGV4dCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy51c2VNYXJrZG93biAmJiBmb3JtYXR0ZWRUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChHbG9iYWxTZXR0aW5ncy5hbGxvd01hcmtGb3JUZXh0SGlnaGxpZ2h0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRUZXh0ID0gZm9ybWF0dGVkVGV4dC5yZXBsYWNlKC88bWFyaz4vZywgXCI9PT1cIikucmVwbGFjZSgvPFxcL21hcms+L2csIFwiLz09L1wiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrZG93blByb2Nlc3NpbmdSZXN1bHQgPSBBZGFwdGl2ZUNhcmQuYXBwbHlNYXJrZG93bihmb3JtYXR0ZWRUZXh0KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobWFya2Rvd25Qcm9jZXNzaW5nUmVzdWx0LmRpZFByb2Nlc3MgJiYgbWFya2Rvd25Qcm9jZXNzaW5nUmVzdWx0Lm91dHB1dEh0bWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NlZFRleHQgPSBtYXJrZG93blByb2Nlc3NpbmdSZXN1bHQub3V0cHV0SHRtbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyZWF0QXNQbGFpblRleHQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25seSBwcm9jZXNzIDxtYXJrPiB0YWcgaWYgbWFya2Rvd24gcHJvY2Vzc2luZyB3YXMgYXBwbGllZCBiZWNhdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXJrZG93biBwcm9jZXNzaW5nIGlzIGFsc28gcmVzcG9uc2libGUgZm9yIHNhbml0aXppbmcgdGhlIGlucHV0IHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEdsb2JhbFNldHRpbmdzLmFsbG93TWFya0ZvclRleHRIaWdobGlnaHRpbmcgJiYgdGhpcy5fcHJvY2Vzc2VkVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrU3R5bGU6IHN0cmluZyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVmZmVjdGl2ZVN0eWxlID0gdGhpcy5nZXRFZmZlY3RpdmVTdHlsZURlZmluaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlZmZlY3RpdmVTdHlsZS5oaWdobGlnaHRCYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya1N0eWxlICs9IFwiYmFja2dyb3VuZC1jb2xvcjogXCIgKyBlZmZlY3RpdmVTdHlsZS5oaWdobGlnaHRCYWNrZ3JvdW5kQ29sb3IgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWZmZWN0aXZlU3R5bGUuaGlnaGxpZ2h0Rm9yZWdyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtTdHlsZSArPSBcImNvbG9yOiBcIiArIGVmZmVjdGl2ZVN0eWxlLmhpZ2hsaWdodEZvcmVncm91bmRDb2xvciArIFwiO1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya1N0eWxlID0gJ3N0eWxlPVwiJyArIG1hcmtTdHlsZSArICdcIic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc2VkVGV4dCA9IHRoaXMuX3Byb2Nlc3NlZFRleHQucmVwbGFjZSgvPT09L2csIFwiPG1hcmsgXCIgKyBtYXJrU3R5bGUgKyBcIj5cIikucmVwbGFjZSgvXFwvPT1cXC8vZywgXCI8L21hcms+XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc2VkVGV4dCA9IGZvcm1hdHRlZFRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmVhdEFzUGxhaW5UZXh0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc2VkVGV4dCA9IGZvcm1hdHRlZFRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyZWF0QXNQbGFpblRleHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9wcm9jZXNzZWRUZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc2VkVGV4dCA9IFwiXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl90cmVhdEFzUGxhaW5UZXh0KSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5pbm5lclRleHQgPSB0aGlzLl9wcm9jZXNzZWRUZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLl9wcm9jZXNzZWRUZXh0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpcnN0RWxlbWVudENoaWxkID0gPEhUTUxFbGVtZW50PmVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgICAgICAgICAgZmlyc3RFbGVtZW50Q2hpbGQuc3R5bGUubWFyZ2luVG9wID0gXCIwcHhcIjtcbiAgICAgICAgICAgICAgICBmaXJzdEVsZW1lbnRDaGlsZC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndyYXApIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RFbGVtZW50Q2hpbGQuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgICAgICAgICAgICAgICAgICBmaXJzdEVsZW1lbnRDaGlsZC5zdHlsZS50ZXh0T3ZlcmZsb3cgPSBcImVsbGlwc2lzXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5sYXN0RWxlbWVudENoaWxkIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAoPEhUTUxFbGVtZW50PmVsZW1lbnQubGFzdEVsZW1lbnRDaGlsZCkuc3R5bGUubWFyZ2luQm90dG9tID0gXCIwcHhcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGFuY2hvcnMgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYVwiKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbmNob3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFuY2hvciA9IDxIVE1MQW5jaG9yRWxlbWVudD5hbmNob3JzW2ldO1xuICAgICAgICAgICAgICAgIGFuY2hvci5jbGFzc0xpc3QuYWRkKGhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLWFuY2hvclwiKSk7XG4gICAgICAgICAgICAgICAgYW5jaG9yLnRhcmdldCA9IFwiX2JsYW5rXCI7XG4gICAgICAgICAgICAgICAgYW5jaG9yLm9uY2xpY2sgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFpc2VBbmNob3JDbGlja2VkRXZlbnQodGhpcywgZS50YXJnZXQgYXMgSFRNTEFuY2hvckVsZW1lbnQsIGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYW5jaG9yLm9uY29udGV4dG1lbnUgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFpc2VBbmNob3JDbGlja2VkRXZlbnQodGhpcywgZS50YXJnZXQgYXMgSFRNTEFuY2hvckVsZW1lbnQsIGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMud3JhcCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUud29yZFdyYXAgPSBcImJyZWFrLXdvcmRcIjtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1heExpbmVzICYmIHRoaXMubWF4TGluZXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChVdGlscy5pc0ludGVybmV0RXhwbG9yZXIoKSB8fCAhR2xvYmFsU2V0dGluZ3MudXNlV2Via2l0TGluZUNsYW1wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm1heEhlaWdodCA9ICh0aGlzLl9jb21wdXRlZExpbmVIZWlnaHQgKiB0aGlzLm1heExpbmVzKSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoaWxlIG5vbiBzdGFuZGFyZCwgLS13ZWJraXQtbGluZS1jbGFtcCB3b3JrcyBpbiBldmVyeSBicm93c2VyIChleGNlcHQgSUUpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaXMgYSBncmVhdCBzb2x1dGlvbiB0byBzdXBwb3J0IHRoZSBtYXhMaW5lcyBmZWF0dXJlIHdpdGggZWxsaXBzaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRydW5jYXRpb24uIFdpdGggLS13ZWJraXQtbGluZS1jbGFtcCB0aGVyZSBpcyBuZWVkIHRvIHVzZSBleHBsaWNpdCBsaW5lIGhlaWdodHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJsaW5lLWhlaWdodFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiLXdlYmtpdC1ib3hcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUud2Via2l0Qm94T3JpZW50ID0gXCJ2ZXJ0aWNhbFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS53ZWJraXRMaW5lQ2xhbXAgPSB0aGlzLm1heExpbmVzLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLndoaXRlU3BhY2UgPSBcIm5vd3JhcFwiO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUudGV4dE92ZXJmbG93ID0gXCJlbGxpcHNpc1wiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoR2xvYmFsU2V0dGluZ3MudXNlQWR2YW5jZWRUZXh0QmxvY2tUcnVuY2F0aW9uIHx8IEdsb2JhbFNldHRpbmdzLnVzZUFkdmFuY2VkQ2FyZEJvdHRvbVRydW5jYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vcmlnaW5hbElubmVySHRtbCA9IGVsZW1lbnQuaW5uZXJIVE1MO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdHJ1bmNhdGVPdmVyZmxvdyhtYXhIZWlnaHQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAobWF4SGVpZ2h0ID49IHRoaXMuX2NvbXB1dGVkTGluZUhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJ1bmNhdGVJZlN1cHBvcnRlZChtYXhIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1bmRvT3ZlcmZsb3dUcnVuY2F0aW9uKCkge1xuICAgICAgICB0aGlzLnJlc3RvcmVPcmlnaW5hbENvbnRlbnQoKTtcblxuICAgICAgICBpZiAoR2xvYmFsU2V0dGluZ3MudXNlQWR2YW5jZWRUZXh0QmxvY2tUcnVuY2F0aW9uICYmIHRoaXMubWF4TGluZXMpIHtcbiAgICAgICAgICAgIGxldCBtYXhIZWlnaHQgPSB0aGlzLl9jb21wdXRlZExpbmVIZWlnaHQgKiB0aGlzLm1heExpbmVzO1xuXG4gICAgICAgICAgICB0aGlzLnRydW5jYXRlSWZTdXBwb3J0ZWQobWF4SGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVzZU1hcmtkb3duOiBib29sZWFuID0gdHJ1ZTtcbiAgICBmb3JFbGVtZW50SWQ/OiBzdHJpbmc7XG5cbiAgICBhcHBseVN0eWxlc1RvKHRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHN1cGVyLmFwcGx5U3R5bGVzVG8odGFyZ2V0RWxlbWVudCk7XG5cbiAgICAgICAgc3dpdGNoICh0aGlzLmdldEVmZmVjdGl2ZUhvcml6b250YWxBbGlnbm1lbnQoKSkge1xuICAgICAgICAgICAgY2FzZSBFbnVtcy5Ib3Jpem9udGFsQWxpZ25tZW50LkNlbnRlcjpcbiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEVudW1zLkhvcml6b250YWxBbGlnbm1lbnQuUmlnaHQ6XG4gICAgICAgICAgICAgICAgdGFyZ2V0RWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSBcImVuZFwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9IFwic3RhcnRcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsaW5lSGVpZ2h0cyA9IHRoaXMuaG9zdENvbmZpZy5saW5lSGVpZ2h0cztcblxuICAgICAgICBpZiAobGluZUhlaWdodHMpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5lZmZlY3RpdmVTaXplKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5UZXh0U2l6ZS5TbWFsbDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29tcHV0ZWRMaW5lSGVpZ2h0ID0gbGluZUhlaWdodHMuc21hbGw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRW51bXMuVGV4dFNpemUuTWVkaXVtOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb21wdXRlZExpbmVIZWlnaHQgPSBsaW5lSGVpZ2h0cy5tZWRpdW07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRW51bXMuVGV4dFNpemUuTGFyZ2U6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbXB1dGVkTGluZUhlaWdodCA9IGxpbmVIZWlnaHRzLmxhcmdlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVudW1zLlRleHRTaXplLkV4dHJhTGFyZ2U6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbXB1dGVkTGluZUhlaWdodCA9IGxpbmVIZWlnaHRzLmV4dHJhTGFyZ2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbXB1dGVkTGluZUhlaWdodCA9IGxpbmVIZWlnaHRzLmRlZmF1bHQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTG9va3MgbGlrZSAxLjMzIGlzIHRoZSBtYWdpYyBudW1iZXIgdG8gY29tcHV0ZSBsaW5lLWhlaWdodFxuICAgICAgICAgICAgLy8gZnJvbSBmb250IHNpemUuXG4gICAgICAgICAgICB0aGlzLl9jb21wdXRlZExpbmVIZWlnaHQgPSB0aGlzLmdldEZvbnRTaXplKHRoaXMuaG9zdENvbmZpZy5nZXRGb250VHlwZURlZmluaXRpb24odGhpcy5lZmZlY3RpdmVGb250VHlwZSkpICogMS4zMztcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldEVsZW1lbnQuc3R5bGUubGluZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVkTGluZUhlaWdodCArIFwicHhcIjtcbiAgICB9XG5cbiAgICBnZXRKc29uVHlwZU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiVGV4dEJsb2NrXCI7XG4gICAgfVxuXG4gICAgZ2V0RWZmZWN0aXZlVGV4dFN0eWxlRGVmaW5pdGlvbigpOiBUZXh0U3R5bGVEZWZpbml0aW9uIHtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3RDb25maWcudGV4dFN0eWxlcy5nZXRTdHlsZUJ5TmFtZSh0aGlzLnN0eWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFZmZlY3RpdmVUZXh0U3R5bGVEZWZpbml0aW9uKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlTGF5b3V0KHByb2Nlc3NDaGlsZHJlbjogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZUxheW91dChwcm9jZXNzQ2hpbGRyZW4pO1xuXG4gICAgICAgIGlmIChHbG9iYWxTZXR0aW5ncy51c2VBZHZhbmNlZFRleHRCbG9ja1RydW5jYXRpb24gJiYgdGhpcy5tYXhMaW5lcyAmJiB0aGlzLmlzRGlzcGxheWVkKCkpIHtcbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBlbGVtZW50J3MgaW5uZXJIVE1MIGluIGNhc2UgdGhlIGF2YWlsYWJsZSByb29tIGZvclxuICAgICAgICAgICAgLy8gY29udGVudCBoYXMgaW5jcmVhc2VkXG4gICAgICAgICAgICB0aGlzLnJlc3RvcmVPcmlnaW5hbENvbnRlbnQoKTtcbiAgICAgICAgICAgIHRoaXMudHJ1bmNhdGVJZlN1cHBvcnRlZCh0aGlzLl9jb21wdXRlZExpbmVIZWlnaHQgKiB0aGlzLm1heExpbmVzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRleHRSdW4gZXh0ZW5kcyBCYXNlVGV4dEJsb2NrIHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgaXRhbGljUHJvcGVydHkgPSBuZXcgQm9vbFByb3BlcnR5KFZlcnNpb25zLnYxXzIsIFwiaXRhbGljXCIsIGZhbHNlKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgc3RyaWtldGhyb3VnaFByb3BlcnR5ID0gbmV3IEJvb2xQcm9wZXJ0eShWZXJzaW9ucy52MV8yLCBcInN0cmlrZXRocm91Z2hcIiwgZmFsc2UpO1xuICAgIHN0YXRpYyByZWFkb25seSBoaWdobGlnaHRQcm9wZXJ0eSA9IG5ldyBCb29sUHJvcGVydHkoVmVyc2lvbnMudjFfMiwgXCJoaWdobGlnaHRcIiwgZmFsc2UpO1xuICAgIHN0YXRpYyByZWFkb25seSB1bmRlcmxpbmVQcm9wZXJ0eSA9IG5ldyBCb29sUHJvcGVydHkoVmVyc2lvbnMudjFfMywgXCJ1bmRlcmxpbmVcIiwgZmFsc2UpO1xuXG4gICAgcHJvdGVjdGVkIHBvcHVsYXRlU2NoZW1hKHNjaGVtYTogU2VyaWFsaXphYmxlT2JqZWN0U2NoZW1hKSB7XG4gICAgICAgIHN1cGVyLnBvcHVsYXRlU2NoZW1hKHNjaGVtYSk7XG5cbiAgICAgICAgc2NoZW1hLmFkZChCYXNlVGV4dEJsb2NrLnNlbGVjdEFjdGlvblByb3BlcnR5KTtcbiAgICB9XG5cbiAgICBAcHJvcGVydHkoVGV4dFJ1bi5pdGFsaWNQcm9wZXJ0eSlcbiAgICBpdGFsaWM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBwcm9wZXJ0eShUZXh0UnVuLnN0cmlrZXRocm91Z2hQcm9wZXJ0eSlcbiAgICBzdHJpa2V0aHJvdWdoOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBAcHJvcGVydHkoVGV4dFJ1bi5oaWdobGlnaHRQcm9wZXJ0eSlcbiAgICBoaWdobGlnaHQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBwcm9wZXJ0eShUZXh0UnVuLnVuZGVybGluZVByb3BlcnR5KVxuICAgIHVuZGVybGluZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxSZW5kZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAodGhpcy50ZXh0KSB7XG4gICAgICAgICAgICBsZXQgcHJlUHJvY2Vzc2VkVGV4dCA9IHRoaXMucHJlUHJvY2Vzc1Byb3BlcnR5VmFsdWUoQmFzZVRleHRCbG9jay50ZXh0UHJvcGVydHkpO1xuICAgICAgICAgICAgbGV0IGhvc3RDb25maWcgPSB0aGlzLmhvc3RDb25maWc7XG5cbiAgICAgICAgICAgIGxldCBmb3JtYXR0ZWRUZXh0ID0gVGV4dEZvcm1hdHRlcnMuZm9ybWF0VGV4dCh0aGlzLmxhbmcsIHByZVByb2Nlc3NlZFRleHQpO1xuXG4gICAgICAgICAgICBpZiAoIWZvcm1hdHRlZFRleHQpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRUZXh0ID0gXCJcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy10ZXh0UnVuXCIpKTtcblxuICAgICAgICAgICAgdGhpcy5hcHBseVN0eWxlc1RvKGVsZW1lbnQpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RBY3Rpb24gJiYgaG9zdENvbmZpZy5zdXBwb3J0c0ludGVyYWN0aXZpdHkpIHtcbiAgICAgICAgICAgICAgICBsZXQgYW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgICAgICAgICAgYW5jaG9yLmNsYXNzTGlzdC5hZGQoaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiYWMtYW5jaG9yXCIpKTtcblxuICAgICAgICAgICAgICAgIGxldCBocmVmID0gdGhpcy5zZWxlY3RBY3Rpb24uZ2V0SHJlZigpO1xuXG4gICAgICAgICAgICAgICAgYW5jaG9yLmhyZWYgPSBocmVmID8gaHJlZiA6IFwiXCI7XG4gICAgICAgICAgICAgICAgYW5jaG9yLnRhcmdldCA9IFwiX2JsYW5rXCI7XG4gICAgICAgICAgICAgICAgYW5jaG9yLm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RBY3Rpb24gJiYgdGhpcy5zZWxlY3RBY3Rpb24uaXNFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0QWN0aW9uLmV4ZWN1dGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0QWN0aW9uLnNldHVwRWxlbWVudEZvckFjY2Vzc2liaWxpdHkoYW5jaG9yKTtcblxuICAgICAgICAgICAgICAgIGFuY2hvci5pbm5lclRleHQgPSBmb3JtYXR0ZWRUZXh0O1xuXG4gICAgICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChhbmNob3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5pbm5lclRleHQgPSBmb3JtYXR0ZWRUZXh0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhcHBseVN0eWxlc1RvKHRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHN1cGVyLmFwcGx5U3R5bGVzVG8odGFyZ2V0RWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXRhbGljKSB7XG4gICAgICAgICAgICB0YXJnZXRFbGVtZW50LnN0eWxlLmZvbnRTdHlsZSA9IFwiaXRhbGljXCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdHJpa2V0aHJvdWdoKSB7XG4gICAgICAgICAgICB0YXJnZXRFbGVtZW50LnN0eWxlLnRleHREZWNvcmF0aW9uID0gXCJsaW5lLXRocm91Z2hcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhpZ2hsaWdodCkge1xuICAgICAgICAgICAgbGV0IGNvbG9yRGVmaW5pdGlvbiA9IHRoaXMuZ2V0Q29sb3JEZWZpbml0aW9uKHRoaXMuZ2V0RWZmZWN0aXZlU3R5bGVEZWZpbml0aW9uKCkuZm9yZWdyb3VuZENvbG9ycywgdGhpcy5lZmZlY3RpdmVDb2xvcik7XG5cbiAgICAgICAgICAgIHRhcmdldEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gPHN0cmluZz5VdGlscy5zdHJpbmdUb0Nzc0NvbG9yKHRoaXMuZWZmZWN0aXZlSXNTdWJ0bGUgPyBjb2xvckRlZmluaXRpb24uaGlnaGxpZ2h0Q29sb3JzLnN1YnRsZSA6IGNvbG9yRGVmaW5pdGlvbi5oaWdobGlnaHRDb2xvcnMuZGVmYXVsdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy51bmRlcmxpbmUpIHtcbiAgICAgICAgICAgIHRhcmdldEVsZW1lbnQuc3R5bGUudGV4dERlY29yYXRpb24gPSBcInVuZGVybGluZVwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0SnNvblR5cGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIlRleHRSdW5cIjtcbiAgICB9XG5cbiAgICBnZXQgaXNTdGFuZGFsb25lKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0IGlzSW5saW5lKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSaWNoVGV4dEJsb2NrIGV4dGVuZHMgQ2FyZEVsZW1lbnQge1xuICAgIHByaXZhdGUgX2lubGluZXM6IENhcmRFbGVtZW50W10gPSBbXTtcblxuICAgIHByaXZhdGUgaW50ZXJuYWxBZGRJbmxpbmUoaW5saW5lOiBDYXJkRWxlbWVudCwgZm9yY2VBZGQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBpZiAoIWlubGluZS5pc0lubGluZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFN0cmluZ3MuZXJyb3JzLmVsZW1lbnRDYW5ub3RCZVVzZWRBc0lubGluZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkb0FkZDogYm9vbGVhbiA9IGlubGluZS5wYXJlbnQgPT09IHVuZGVmaW5lZCB8fCBmb3JjZUFkZDtcblxuICAgICAgICBpZiAoIWRvQWRkICYmIGlubGluZS5wYXJlbnQgIT0gdGhpcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFN0cmluZ3MuZXJyb3JzLmlubGluZUFscmVhZHlQYXJlbnRlZCgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlubGluZS5zZXRQYXJlbnQodGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMuX2lubGluZXMucHVzaChpbmxpbmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUGFyc2Uoc291cmNlOiBhbnksIGNvbnRleHQ6IFNlcmlhbGl6YXRpb25Db250ZXh0KSB7XG4gICAgICAgIHN1cGVyLmludGVybmFsUGFyc2Uoc291cmNlLCBjb250ZXh0KTtcblxuICAgICAgICB0aGlzLl9pbmxpbmVzID0gW107XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlW1wiaW5saW5lc1wiXSkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGpzb25JbmxpbmUgb2Ygc291cmNlW1wiaW5saW5lc1wiXSkge1xuICAgICAgICAgICAgICAgIGxldCBpbmxpbmU6IENhcmRFbGVtZW50IHwgdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBqc29uSW5saW5lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0UnVuID0gbmV3IFRleHRSdW4oKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dFJ1bi50ZXh0ID0ganNvbklubGluZTtcblxuICAgICAgICAgICAgICAgICAgICBpbmxpbmUgPSB0ZXh0UnVuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm8gZmFsbGJhY2sgZm9yIGlubGluZXMgaW4gMS4yXG4gICAgICAgICAgICAgICAgICAgIGlubGluZSA9IGNvbnRleHQucGFyc2VFbGVtZW50KHRoaXMsIGpzb25JbmxpbmUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5saW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxBZGRJbmxpbmUoaW5saW5lLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxUb0pTT04odGFyZ2V0OiBQcm9wZXJ0eUJhZywgY29udGV4dDogU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgc3VwZXIuaW50ZXJuYWxUb0pTT04odGFyZ2V0LCBjb250ZXh0KTtcblxuICAgICAgICBpZiAodGhpcy5faW5saW5lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsZXQganNvbklubGluZXM6IGFueVtdID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGlubGluZSBvZiB0aGlzLl9pbmxpbmVzKSB7XG4gICAgICAgICAgICAgICAganNvbklubGluZXMucHVzaChpbmxpbmUudG9KU09OKGNvbnRleHQpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGV4dC5zZXJpYWxpemVWYWx1ZSh0YXJnZXQsIFwiaW5saW5lc1wiLCBqc29uSW5saW5lcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxSZW5kZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAodGhpcy5faW5saW5lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmZvckVsZW1lbnRJZCkge1xuICAgICAgICAgICAgICAgIGxldCBsYWJlbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgICAgICAgICAgbGFiZWxFbGVtZW50Lmh0bWxGb3IgPSB0aGlzLmZvckVsZW1lbnRJZDtcblxuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBsYWJlbEVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSB0aGlzLmhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLXJpY2hUZXh0QmxvY2tcIik7XG5cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5nZXRFZmZlY3RpdmVIb3Jpem9udGFsQWxpZ25tZW50KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkhvcml6b250YWxBbGlnbm1lbnQuQ2VudGVyOlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRW51bXMuSG9yaXpvbnRhbEFsaWdubWVudC5SaWdodDpcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSBcImVuZFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9IFwic3RhcnRcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByZW5kZXJlZElubGluZXM6IG51bWJlciA9IDA7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGlubGluZSBvZiB0aGlzLl9pbmxpbmVzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlbmRlcmVkSW5saW5lID0gaW5saW5lLnJlbmRlcigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlbmRlcmVkSW5saW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQocmVuZGVyZWRJbmxpbmUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkSW5saW5lcysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlbmRlcmVkSW5saW5lcyA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZm9yRWxlbWVudElkPzogc3RyaW5nO1xuXG4gICAgYXNTdHJpbmcoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiXCI7XG5cbiAgICAgICAgZm9yIChsZXQgaW5saW5lIG9mIHRoaXMuX2lubGluZXMpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBpbmxpbmUuYXNTdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0SnNvblR5cGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIlJpY2hUZXh0QmxvY2tcIjtcbiAgICB9XG5cbiAgICBnZXRJbmxpbmVDb3VudCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5saW5lcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0SW5saW5lQXQoaW5kZXg6IG51bWJlcik6IENhcmRFbGVtZW50IHtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9pbmxpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lubGluZXNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFN0cmluZ3MuZXJyb3JzLmluZGV4T3V0T2ZSYW5nZShpbmRleCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkSW5saW5lKGlubGluZTogQ2FyZEVsZW1lbnQgfCBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbmxpbmUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxBZGRJbmxpbmUobmV3IFRleHRSdW4oaW5saW5lKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmludGVybmFsQWRkSW5saW5lKGlubGluZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVJbmxpbmUoaW5saW5lOiBDYXJkRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLl9pbmxpbmVzLmluZGV4T2YoaW5saW5lKTtcblxuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5faW5saW5lc1tpbmRleF0uc2V0UGFyZW50KHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB0aGlzLl9pbmxpbmVzLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZhY3QgZXh0ZW5kcyBTZXJpYWxpemFibGVPYmplY3Qge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSB0aXRsZVByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwidGl0bGVcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IHZhbHVlUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJ2YWx1ZVwiKTtcblxuICAgIC8vIEZvciBoaXN0b3JpYyByZWFzb25zLCB0aGUgXCJ0aXRsZVwiIHNjaGVtYSBwcm9wZXJ0eSBpcyBleHBvc2VkIGFzIFwibmFtZVwiIGluIHRoZSBPTS5cbiAgICBAcHJvcGVydHkoRmFjdC50aXRsZVByb3BlcnR5KVxuICAgIG5hbWU/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoRmFjdC52YWx1ZVByb3BlcnR5KVxuICAgIHZhbHVlPzogc3RyaW5nO1xuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICBwcm90ZWN0ZWQgZ2V0U2NoZW1hS2V5KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIkZhY3RcIjtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lPzogc3RyaW5nLCB2YWx1ZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGYWN0U2V0IGV4dGVuZHMgQ2FyZEVsZW1lbnQge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSBmYWN0c1Byb3BlcnR5ID0gbmV3IFNlcmlhbGl6YWJsZU9iamVjdENvbGxlY3Rpb25Qcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcImZhY3RzXCIsIEZhY3QpO1xuXG4gICAgQHByb3BlcnR5KEZhY3RTZXQuZmFjdHNQcm9wZXJ0eSlcbiAgICBmYWN0czogRmFjdFtdO1xuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHVzZURlZmF1bHRTaXppbmcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxSZW5kZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgZWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBob3N0Q29uZmlnID0gdGhpcy5ob3N0Q29uZmlnO1xuXG4gICAgICAgIGlmICh0aGlzLmZhY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGFibGVcIik7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmJvcmRlcldpZHRoID0gXCIwcHhcIjtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuYm9yZGVyU3BhY2luZyA9IFwiMHB4XCI7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmJvcmRlclN0eWxlID0gXCJub25lXCI7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmJvcmRlckNvbGxhcHNlID0gXCJjb2xsYXBzZVwiO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiYWMtZmFjdHNldFwiKSk7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJwcmVzZW50YXRpb25cIik7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mYWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCB0ckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG5cbiAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdHJFbGVtZW50LnN0eWxlLm1hcmdpblRvcCA9IGhvc3RDb25maWcuZmFjdFNldC5zcGFjaW5nICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFRpdGxlIGNvbHVtblxuICAgICAgICAgICAgICAgIGxldCB0ZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgICAgICAgICAgdGRFbGVtZW50LnN0eWxlLnBhZGRpbmcgPSBcIjBcIjtcbiAgICAgICAgICAgICAgICB0ZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy1mYWN0LXRpdGxlXCIpKTtcblxuICAgICAgICAgICAgICAgIGlmIChob3N0Q29uZmlnLmZhY3RTZXQudGl0bGUubWF4V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGRFbGVtZW50LnN0eWxlLm1heFdpZHRoID0gaG9zdENvbmZpZy5mYWN0U2V0LnRpdGxlLm1heFdpZHRoICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRkRWxlbWVudC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gXCJ0b3BcIjtcblxuICAgICAgICAgICAgICAgIGxldCB0ZXh0QmxvY2sgPSBuZXcgVGV4dEJsb2NrKCk7XG4gICAgICAgICAgICAgICAgdGV4dEJsb2NrLnNldFBhcmVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICB0ZXh0QmxvY2sudGV4dCA9ICghdGhpcy5mYWN0c1tpXS5uYW1lICYmIHRoaXMuaXNEZXNpZ25Nb2RlKCkpID8gXCJUaXRsZVwiIDogdGhpcy5mYWN0c1tpXS5uYW1lO1xuICAgICAgICAgICAgICAgIHRleHRCbG9jay5zaXplID0gaG9zdENvbmZpZy5mYWN0U2V0LnRpdGxlLnNpemU7XG4gICAgICAgICAgICAgICAgdGV4dEJsb2NrLmNvbG9yID0gaG9zdENvbmZpZy5mYWN0U2V0LnRpdGxlLmNvbG9yO1xuICAgICAgICAgICAgICAgIHRleHRCbG9jay5pc1N1YnRsZSA9IGhvc3RDb25maWcuZmFjdFNldC50aXRsZS5pc1N1YnRsZTtcbiAgICAgICAgICAgICAgICB0ZXh0QmxvY2sud2VpZ2h0ID0gaG9zdENvbmZpZy5mYWN0U2V0LnRpdGxlLndlaWdodDtcbiAgICAgICAgICAgICAgICB0ZXh0QmxvY2sud3JhcCA9IGhvc3RDb25maWcuZmFjdFNldC50aXRsZS53cmFwO1xuICAgICAgICAgICAgICAgIHRleHRCbG9jay5zcGFjaW5nID0gRW51bXMuU3BhY2luZy5Ob25lO1xuXG4gICAgICAgICAgICAgICAgVXRpbHMuYXBwZW5kQ2hpbGQodGRFbGVtZW50LCB0ZXh0QmxvY2sucmVuZGVyKCkpO1xuICAgICAgICAgICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKHRyRWxlbWVudCwgdGRFbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIC8vIFNwYWNlciBjb2x1bW5cbiAgICAgICAgICAgICAgICB0ZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgICAgICAgICAgdGRFbGVtZW50LnN0eWxlLndpZHRoID0gXCIxMHB4XCI7XG5cbiAgICAgICAgICAgICAgICBVdGlscy5hcHBlbmRDaGlsZCh0ckVsZW1lbnQsIHRkRWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAvLyBWYWx1ZSBjb2x1bW5cbiAgICAgICAgICAgICAgICB0ZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgICAgICAgICAgdGRFbGVtZW50LnN0eWxlLnBhZGRpbmcgPSBcIjBcIjtcbiAgICAgICAgICAgICAgICB0ZEVsZW1lbnQuc3R5bGUudmVydGljYWxBbGlnbiA9IFwidG9wXCI7XG4gICAgICAgICAgICAgICAgdGRFbGVtZW50LmNsYXNzTGlzdC5hZGQoaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiYWMtZmFjdC12YWx1ZVwiKSk7XG5cbiAgICAgICAgICAgICAgICB0ZXh0QmxvY2sgPSBuZXcgVGV4dEJsb2NrKCk7XG4gICAgICAgICAgICAgICAgdGV4dEJsb2NrLnNldFBhcmVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICB0ZXh0QmxvY2sudGV4dCA9IHRoaXMuZmFjdHNbaV0udmFsdWU7XG4gICAgICAgICAgICAgICAgdGV4dEJsb2NrLnNpemUgPSBob3N0Q29uZmlnLmZhY3RTZXQudmFsdWUuc2l6ZTtcbiAgICAgICAgICAgICAgICB0ZXh0QmxvY2suY29sb3IgPSBob3N0Q29uZmlnLmZhY3RTZXQudmFsdWUuY29sb3I7XG4gICAgICAgICAgICAgICAgdGV4dEJsb2NrLmlzU3VidGxlID0gaG9zdENvbmZpZy5mYWN0U2V0LnZhbHVlLmlzU3VidGxlO1xuICAgICAgICAgICAgICAgIHRleHRCbG9jay53ZWlnaHQgPSBob3N0Q29uZmlnLmZhY3RTZXQudmFsdWUud2VpZ2h0O1xuICAgICAgICAgICAgICAgIHRleHRCbG9jay53cmFwID0gaG9zdENvbmZpZy5mYWN0U2V0LnZhbHVlLndyYXA7XG4gICAgICAgICAgICAgICAgdGV4dEJsb2NrLnNwYWNpbmcgPSBFbnVtcy5TcGFjaW5nLk5vbmU7XG5cbiAgICAgICAgICAgICAgICBVdGlscy5hcHBlbmRDaGlsZCh0ZEVsZW1lbnQsIHRleHRCbG9jay5yZW5kZXIoKSk7XG4gICAgICAgICAgICAgICAgVXRpbHMuYXBwZW5kQ2hpbGQodHJFbGVtZW50LCB0ZEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKGVsZW1lbnQsIHRyRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICBnZXRKc29uVHlwZU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiRmFjdFNldFwiO1xuICAgIH1cbn1cblxuY2xhc3MgSW1hZ2VEaW1lbnNpb25Qcm9wZXJ0eSBleHRlbmRzIFByb3BlcnR5RGVmaW5pdGlvbiB7XG4gICAgZ2V0SW50ZXJuYWxOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTmFtZTtcbiAgICB9XG5cbiAgICBwYXJzZShzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgc291cmNlOiBQcm9wZXJ0eUJhZywgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IHJlc3VsdDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgc291cmNlVmFsdWUgPSBzb3VyY2VbdGhpcy5uYW1lXTtcblxuICAgICAgICBpZiAoc291cmNlVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZVZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBzaXplID0gU2l6ZUFuZFVuaXQucGFyc2Uoc291cmNlVmFsdWUsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNpemUudW5pdCA9PSBFbnVtcy5TaXplVW5pdC5QaXhlbCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzaXplLnBoeXNpY2FsU2l6ZTtcblxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgLy8gU3dhbGxvdyB0aGUgZXhjZXB0aW9uXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBzb3VyY2UgdmFsdWUgaXNuJ3QgdmFsaWQgcGVyIHRoaXMgcHJvcGVydHkgZGVmaW5pdGlvbixcbiAgICAgICAgICAgIC8vIGNoZWNrIGl0cyB2YWxpZGl0eSBwZXIgdGhlIGZhbGxiYWNrIHByb3BlcnR5LCBpZiBzcGVjaWZpZWRcbiAgICAgICAgICAgIGlmICghaXNWYWxpZCAmJiB0aGlzLmZhbGxiYWNrUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdGhpcy5mYWxsYmFja1Byb3BlcnR5LmlzVmFsaWRWYWx1ZShzb3VyY2VWYWx1ZSwgY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICAgIGNvbnRleHQubG9nUGFyc2VFdmVudChcbiAgICAgICAgICAgICAgICBzZW5kZXIsXG4gICAgICAgICAgICAgICAgRW51bXMuVmFsaWRhdGlvbkV2ZW50LkludmFsaWRQcm9wZXJ0eVZhbHVlLFxuICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLmludmFsaWRQcm9wZXJ0eVZhbHVlKHNvdXJjZVZhbHVlLCB0aGlzLm5hbWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdG9KU09OKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCB0YXJnZXQ6IFByb3BlcnR5QmFnLCB2YWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5zZXJpYWxpemVWYWx1ZShcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIHRoaXMubmFtZSxcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4odmFsdWUpID8gdmFsdWUgKyBcInB4XCIgOiB1bmRlZmluZWQpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICByZWFkb25seSB0YXJnZXRWZXJzaW9uOiBWZXJzaW9uLFxuICAgICAgICByZWFkb25seSBuYW1lOiBzdHJpbmcsXG4gICAgICAgIHJlYWRvbmx5IGludGVybmFsTmFtZTogc3RyaW5nLFxuICAgICAgICByZWFkb25seSBmYWxsYmFja1Byb3BlcnR5PzogVmFsdWVTZXRQcm9wZXJ0eSkge1xuICAgICAgICBzdXBlcih0YXJnZXRWZXJzaW9uLCBuYW1lKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbWFnZSBleHRlbmRzIENhcmRFbGVtZW50IHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgdXJsUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJ1cmxcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IGFsdFRleHRQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcImFsdFRleHRcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IGJhY2tncm91bmRDb2xvclByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzEsIFwiYmFja2dyb3VuZENvbG9yXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBzdHlsZVByb3BlcnR5ID0gbmV3IEVudW1Qcm9wZXJ0eShcbiAgICAgICAgVmVyc2lvbnMudjFfMCxcbiAgICAgICAgXCJzdHlsZVwiLFxuICAgICAgICBFbnVtcy5JbWFnZVN0eWxlLFxuICAgICAgICBFbnVtcy5JbWFnZVN0eWxlLkRlZmF1bHQpO1xuICAgIHN0YXRpYyByZWFkb25seSBzaXplUHJvcGVydHkgPSBuZXcgRW51bVByb3BlcnR5KFxuICAgICAgICBWZXJzaW9ucy52MV8wLFxuICAgICAgICBcInNpemVcIixcbiAgICAgICAgRW51bXMuU2l6ZSxcbiAgICAgICAgRW51bXMuU2l6ZS5BdXRvKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgcGl4ZWxXaWR0aFByb3BlcnR5ID0gbmV3IEltYWdlRGltZW5zaW9uUHJvcGVydHkoVmVyc2lvbnMudjFfMSwgXCJ3aWR0aFwiLCBcInBpeGVsV2lkdGhcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IHBpeGVsSGVpZ2h0UHJvcGVydHkgPSBuZXcgSW1hZ2VEaW1lbnNpb25Qcm9wZXJ0eShWZXJzaW9ucy52MV8xLCBcImhlaWdodFwiLCBcInBpeGVsSGVpZ2h0XCIsIENhcmRFbGVtZW50LmhlaWdodFByb3BlcnR5KTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgc2VsZWN0QWN0aW9uUHJvcGVydHkgPSBuZXcgQWN0aW9uUHJvcGVydHkoVmVyc2lvbnMudjFfMSwgXCJzZWxlY3RBY3Rpb25cIiwgWyBcIkFjdGlvbi5TaG93Q2FyZFwiIF0pO1xuXG4gICAgcHJvdGVjdGVkIHBvcHVsYXRlU2NoZW1hKHNjaGVtYTogU2VyaWFsaXphYmxlT2JqZWN0U2NoZW1hKSB7XG4gICAgICAgIHN1cGVyLnBvcHVsYXRlU2NoZW1hKHNjaGVtYSk7XG5cbiAgICAgICAgc2NoZW1hLnJlbW92ZShDYXJkRWxlbWVudC5oZWlnaHRQcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgQHByb3BlcnR5KEltYWdlLnVybFByb3BlcnR5KVxuICAgIHVybD86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShJbWFnZS5hbHRUZXh0UHJvcGVydHkpXG4gICAgYWx0VGV4dD86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShJbWFnZS5iYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSlcbiAgICBiYWNrZ3JvdW5kQ29sb3I/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoSW1hZ2Uuc2l6ZVByb3BlcnR5KVxuICAgIHNpemU6IEVudW1zLlNpemUgPSBFbnVtcy5TaXplLkF1dG87XG5cbiAgICBAcHJvcGVydHkoSW1hZ2Uuc3R5bGVQcm9wZXJ0eSlcbiAgICBzdHlsZTogRW51bXMuSW1hZ2VTdHlsZSA9IEVudW1zLkltYWdlU3R5bGUuRGVmYXVsdDtcblxuICAgIEBwcm9wZXJ0eShJbWFnZS5waXhlbFdpZHRoUHJvcGVydHkpXG4gICAgcGl4ZWxXaWR0aD86IG51bWJlcjtcblxuICAgIEBwcm9wZXJ0eShJbWFnZS5waXhlbEhlaWdodFByb3BlcnR5KVxuICAgIHBpeGVsSGVpZ2h0PzogbnVtYmVyO1xuXG4gICAgQHByb3BlcnR5KEltYWdlLnNlbGVjdEFjdGlvblByb3BlcnR5KVxuICAgIHNlbGVjdEFjdGlvbj86IEFjdGlvbjtcblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgcHJpdmF0ZSBhcHBseVNpemUoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMucGl4ZWxXaWR0aCB8fCB0aGlzLnBpeGVsSGVpZ2h0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5waXhlbFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMucGl4ZWxXaWR0aCArIFwicHhcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMucGl4ZWxIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMucGl4ZWxIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tYXhIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgaW1hZ2UgaXMgY29uc3RyYWluZWQgaW4gaGVpZ2h0LCB3ZSBzZXQgaXRzIGhlaWdodCBwcm9wZXJ0eSBhbmRcbiAgICAgICAgICAgICAgICAvLyBhdXRvIGFuZCBzdHJldGNoIGFyZSBpZ25vcmVkIChkZWZhdWx0IHRvIG1lZGl1bSkuIFRIaXMgaXMgbmVjZXNzYXJ5IGZvclxuICAgICAgICAgICAgICAgIC8vIEltYWdlU2V0IHdoaWNoIHVzZXMgYSBtYXhpbXVtIGltYWdlIGhlaWdodCBhcyBvcHBvc2VkIHRvIHRoZSBjYXJkcyB3aWR0aFxuICAgICAgICAgICAgICAgIC8vIGFzIGEgY29uc3RyYWluaW5nIGRpbWVuc2lvblxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRW51bXMuU2l6ZS5TbWFsbDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gdGhpcy5ob3N0Q29uZmlnLmltYWdlU2l6ZXMuc21hbGwgKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5TaXplLkxhcmdlOlxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLmhvc3RDb25maWcuaW1hZ2VTaXplcy5sYXJnZSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLmhvc3RDb25maWcuaW1hZ2VTaXplcy5tZWRpdW0gKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm1heEhlaWdodCA9IHRoaXMubWF4SGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5TaXplLlN0cmV0Y2g6XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5TaXplLkF1dG86XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm1heFdpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5TaXplLlNtYWxsOlxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMuaG9zdENvbmZpZy5pbWFnZVNpemVzLnNtYWxsICsgXCJweFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRW51bXMuU2l6ZS5MYXJnZTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSB0aGlzLmhvc3RDb25maWcuaW1hZ2VTaXplcy5sYXJnZSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEVudW1zLlNpemUuTWVkaXVtOlxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMuaG9zdENvbmZpZy5pbWFnZVNpemVzLm1lZGl1bSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUubWF4SGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHVzZURlZmF1bHRTaXppbmcoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxSZW5kZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgZWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHRoaXMudXJsKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5hbGlnbkl0ZW1zID0gXCJmbGV4LXN0YXJ0XCI7XG5cbiAgICAgICAgICAgIC8vIENhY2hlIGhvc3RDb25maWcgdG8gYXZvaWQgd2Fsa2luZyB0aGUgcGFyZW50IGhpZXJhcmNoeSBtdWx0aXBsZSB0aW1lc1xuICAgICAgICAgICAgbGV0IGhvc3RDb25maWcgPSB0aGlzLmhvc3RDb25maWc7XG5cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5nZXRFZmZlY3RpdmVIb3Jpem9udGFsQWxpZ25tZW50KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkhvcml6b250YWxBbGlnbm1lbnQuQ2VudGVyOlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5Ib3Jpem9udGFsQWxpZ25tZW50LlJpZ2h0OlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJmbGV4LWVuZFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJmbGV4LXN0YXJ0XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgaW1hZ2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgICAgIGltYWdlRWxlbWVudC5vbmxvYWQgPSAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICByYWlzZUltYWdlTG9hZGVkRXZlbnQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbWFnZUVsZW1lbnQub25lcnJvciA9IChlOiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbmRlcmVkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2FyZCA9IHRoaXMuZ2V0Um9vdEVsZW1lbnQoKSBhcyBBZGFwdGl2ZUNhcmQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZCAmJiBjYXJkLmRlc2lnbk1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlcnJvckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yRWxlbWVudC5zdHlsZS5hbGlnbkl0ZW1zID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yRWxlbWVudC5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwiY2VudGVyXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjRUVFRUVFXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckVsZW1lbnQuc3R5bGUuY29sb3IgPSBcImJsYWNrXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckVsZW1lbnQuaW5uZXJUZXh0ID0gXCI6LShcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yRWxlbWVudC5zdHlsZS5wYWRkaW5nID0gXCIxMHB4XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlTaXplKGVycm9yRWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LmFwcGVuZENoaWxkKGVycm9yRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByYWlzZUltYWdlTG9hZGVkRXZlbnQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbWFnZUVsZW1lbnQuc3R5bGUubWluV2lkdGggPSBcIjBcIjtcbiAgICAgICAgICAgIGltYWdlRWxlbWVudC5jbGFzc0xpc3QuYWRkKGhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLWltYWdlXCIpKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0QWN0aW9uICYmIGhvc3RDb25maWcuc3VwcG9ydHNJbnRlcmFjdGl2aXR5KSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50Lm9ua2V5cHJlc3MgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RBY3Rpb24gJiYgdGhpcy5zZWxlY3RBY3Rpb24uaXNFbmFibGVkICYmIChlLmNvZGUgPT0gXCJFbnRlclwiIHx8IGUuY29kZSA9PSBcIlNwYWNlXCIpKSB7IC8vIGVudGVyIG9yIHNwYWNlIHByZXNzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY2FuY2VsQnViYmxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RBY3Rpb24uZXhlY3V0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50Lm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RBY3Rpb24gJiYgdGhpcy5zZWxlY3RBY3Rpb24uaXNFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0QWN0aW9uLmV4ZWN1dGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0QWN0aW9uLnNldHVwRWxlbWVudEZvckFjY2Vzc2liaWxpdHkoaW1hZ2VFbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdEFjdGlvbi5pc0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiYWMtc2VsZWN0YWJsZVwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFwcGx5U2l6ZShpbWFnZUVsZW1lbnQpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zdHlsZSA9PT0gRW51bXMuSW1hZ2VTdHlsZS5QZXJzb24pIHtcbiAgICAgICAgICAgICAgICBpbWFnZUVsZW1lbnQuc3R5bGUuYm9yZGVyUmFkaXVzID0gXCI1MCVcIjtcbiAgICAgICAgICAgICAgICBpbWFnZUVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uID0gXCI1MCUgNTAlXCI7XG4gICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50LnN0eWxlLmJhY2tncm91bmRSZXBlYXQgPSBcIm5vLXJlcGVhdFwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbWFnZUVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gPHN0cmluZz5VdGlscy5zdHJpbmdUb0Nzc0NvbG9yKHRoaXMuYmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgICAgIGltYWdlRWxlbWVudC5zcmMgPSA8c3RyaW5nPnRoaXMucHJlUHJvY2Vzc1Byb3BlcnR5VmFsdWUoSW1hZ2UudXJsUHJvcGVydHkpO1xuXG4gICAgICAgICAgICBjb25zdCBhbHRUZXh0UHJvcGVydHkgPSB0aGlzLnByZVByb2Nlc3NQcm9wZXJ0eVZhbHVlKEltYWdlLmFsdFRleHRQcm9wZXJ0eSk7XG4gICAgICAgICAgICBpZiAoYWx0VGV4dFByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50LmFsdCA9IDxzdHJpbmc+YWx0VGV4dFByb3BlcnR5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGltYWdlRWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICBtYXhIZWlnaHQ/OiBudW1iZXI7XG5cbiAgICBnZXRKc29uVHlwZU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiSW1hZ2VcIjtcbiAgICB9XG5cbiAgICBnZXRBY3Rpb25CeUlkKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHN1cGVyLmdldEFjdGlvbkJ5SWQoaWQpO1xuXG4gICAgICAgIGlmICghcmVzdWx0ICYmIHRoaXMuc2VsZWN0QWN0aW9uKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnNlbGVjdEFjdGlvbi5nZXRBY3Rpb25CeUlkKGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0UmVzb3VyY2VJbmZvcm1hdGlvbigpOiBJUmVzb3VyY2VJbmZvcm1hdGlvbltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJsID8gW3sgdXJsOiB0aGlzLnVybCwgbWltZVR5cGU6IFwiaW1hZ2VcIiB9XSA6IFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhcmRFbGVtZW50Q29udGFpbmVyIGV4dGVuZHMgQ2FyZEVsZW1lbnQge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSBzZWxlY3RBY3Rpb25Qcm9wZXJ0eSA9IG5ldyBBY3Rpb25Qcm9wZXJ0eShWZXJzaW9ucy52MV8xLCBcInNlbGVjdEFjdGlvblwiLCBbIFwiQWN0aW9uLlNob3dDYXJkXCIgXSk7XG5cbiAgICBwcm90ZWN0ZWQgcG9wdWxhdGVTY2hlbWEoc2NoZW1hOiBTZXJpYWxpemFibGVPYmplY3RTY2hlbWEpIHtcbiAgICAgICAgc3VwZXIucG9wdWxhdGVTY2hlbWEoc2NoZW1hKTtcblxuICAgICAgICBpZiAoIXRoaXMuaXNTZWxlY3RhYmxlKSB7XG4gICAgICAgICAgICBzY2hlbWEucmVtb3ZlKENhcmRFbGVtZW50Q29udGFpbmVyLnNlbGVjdEFjdGlvblByb3BlcnR5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBwcm9wZXJ0eShDYXJkRWxlbWVudENvbnRhaW5lci5zZWxlY3RBY3Rpb25Qcm9wZXJ0eSlcbiAgICBwcm90ZWN0ZWQgX3NlbGVjdEFjdGlvbj86IEFjdGlvbjtcblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgcHJvdGVjdGVkIGlzRWxlbWVudEFsbG93ZWQoZWxlbWVudDogQ2FyZEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdENvbmZpZy5zdXBwb3J0c0ludGVyYWN0aXZpdHkgfHwgIWVsZW1lbnQuaXNJbnRlcmFjdGl2ZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXBwbHlQYWRkaW5nKCkge1xuICAgICAgICBzdXBlci5hcHBseVBhZGRpbmcoKTtcblxuICAgICAgICBpZiAoIXRoaXMucmVuZGVyZWRFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGh5c2ljYWxQYWRkaW5nID0gbmV3IFNwYWNpbmdEZWZpbml0aW9uKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZ2V0RWZmZWN0aXZlUGFkZGluZygpKSB7XG4gICAgICAgICAgICBwaHlzaWNhbFBhZGRpbmcgPSB0aGlzLmhvc3RDb25maWcucGFkZGluZ0RlZmluaXRpb25Ub1NwYWNpbmdEZWZpbml0aW9uKHRoaXMuZ2V0RWZmZWN0aXZlUGFkZGluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSBwaHlzaWNhbFBhZGRpbmcudG9wICsgXCJweFwiO1xuICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwaHlzaWNhbFBhZGRpbmcucmlnaHQgKyBcInB4XCI7XG4gICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LnN0eWxlLnBhZGRpbmdCb3R0b20gPSBwaHlzaWNhbFBhZGRpbmcuYm90dG9tICsgXCJweFwiO1xuICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9IHBoeXNpY2FsUGFkZGluZy5sZWZ0ICsgXCJweFwiO1xuXG4gICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCIwXCI7XG4gICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSBcIjBcIjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGlzU2VsZWN0YWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGFic3RyYWN0IGdldEl0ZW1Db3VudCgpOiBudW1iZXI7XG4gICAgYWJzdHJhY3QgZ2V0SXRlbUF0KGluZGV4OiBudW1iZXIpOiBDYXJkRWxlbWVudDtcbiAgICBhYnN0cmFjdCBnZXRGaXJzdFZpc2libGVSZW5kZXJlZEl0ZW0oKTogQ2FyZEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gICAgYWJzdHJhY3QgZ2V0TGFzdFZpc2libGVSZW5kZXJlZEl0ZW0oKTogQ2FyZEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gICAgYWJzdHJhY3QgcmVtb3ZlSXRlbShpdGVtOiBDYXJkRWxlbWVudCk6IGJvb2xlYW47XG5cbiAgICBhbGxvd1ZlcnRpY2FsT3ZlcmZsb3c6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGludGVybmFsVmFsaWRhdGVQcm9wZXJ0aWVzKGNvbnRleHQ6IFZhbGlkYXRpb25SZXN1bHRzKSB7XG4gICAgICAgIHN1cGVyLmludGVybmFsVmFsaWRhdGVQcm9wZXJ0aWVzKGNvbnRleHQpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5nZXRJdGVtQ291bnQoKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaXRlbSA9IHRoaXMuZ2V0SXRlbUF0KGkpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuaG9zdENvbmZpZy5zdXBwb3J0c0ludGVyYWN0aXZpdHkgJiYgaXRlbS5pc0ludGVyYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5hZGRGYWlsdXJlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuSW50ZXJhY3Rpdml0eU5vdEFsbG93ZWQsXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLmludGVyYWN0aXZpdHlOb3RBbGxvd2VkKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNFbGVtZW50QWxsb3dlZChpdGVtKSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYWRkRmFpbHVyZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgRW51bXMuVmFsaWRhdGlvbkV2ZW50LkludGVyYWN0aXZpdHlOb3RBbGxvd2VkLFxuICAgICAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy5lbGVtZW50VHlwZU5vdEFsbG93ZWQoaXRlbS5nZXRKc29uVHlwZU5hbWUoKSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpdGVtLmludGVybmFsVmFsaWRhdGVQcm9wZXJ0aWVzKGNvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3NlbGVjdEFjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fc2VsZWN0QWN0aW9uLmludGVybmFsVmFsaWRhdGVQcm9wZXJ0aWVzKGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCk6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBzdXBlci5yZW5kZXIoKTtcblxuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgbGV0IGhvc3RDb25maWcgPSB0aGlzLmhvc3RDb25maWc7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFsbG93VmVydGljYWxPdmVyZmxvdykge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUub3ZlcmZsb3dYID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm92ZXJmbG93WSA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZWxlbWVudCAmJiB0aGlzLmlzU2VsZWN0YWJsZSAmJiB0aGlzLl9zZWxlY3RBY3Rpb24gJiYgaG9zdENvbmZpZy5zdXBwb3J0c0ludGVyYWN0aXZpdHkpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2VsZWN0QWN0aW9uICYmIHRoaXMuX3NlbGVjdEFjdGlvbi5pc0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY2FuY2VsQnViYmxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0QWN0aW9uLmV4ZWN1dGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsZW1lbnQub25rZXlwcmVzcyA9IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zZWxlY3RBY3Rpb24gJiYgdGhpcy5fc2VsZWN0QWN0aW9uLmlzRW5hYmxlZCAmJiAoZS5jb2RlID09IFwiRW50ZXJcIiB8fCBlLmNvZGUgPT0gXCJTcGFjZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW50ZXIgb3Igc3BhY2UgcHJlc3NlZFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3RBY3Rpb24uZXhlY3V0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0QWN0aW9uLnNldHVwRWxlbWVudEZvckFjY2Vzc2liaWxpdHkoZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2VsZWN0QWN0aW9uLmlzRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiYWMtc2VsZWN0YWJsZVwiKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICB1cGRhdGVMYXlvdXQocHJvY2Vzc0NoaWxkcmVuOiBib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlci51cGRhdGVMYXlvdXQocHJvY2Vzc0NoaWxkcmVuKTtcblxuICAgICAgICBpZiAocHJvY2Vzc0NoaWxkcmVuKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ2V0SXRlbUNvdW50KCk7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0SXRlbUF0KGkpLnVwZGF0ZUxheW91dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0QWxsSW5wdXRzKHByb2Nlc3NBY3Rpb25zOiBib29sZWFuID0gdHJ1ZSk6IElucHV0W10ge1xuICAgICAgICBsZXQgcmVzdWx0OiBJbnB1dFtdID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdldEl0ZW1Db3VudCgpOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodGhpcy5nZXRJdGVtQXQoaSkuZ2V0QWxsSW5wdXRzKHByb2Nlc3NBY3Rpb25zKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGdldFJlc291cmNlSW5mb3JtYXRpb24oKTogSVJlc291cmNlSW5mb3JtYXRpb25bXSB7XG4gICAgICAgIGxldCByZXN1bHQ6IElSZXNvdXJjZUluZm9ybWF0aW9uW10gPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ2V0SXRlbUNvdW50KCk7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdCh0aGlzLmdldEl0ZW1BdChpKS5nZXRSZXNvdXJjZUluZm9ybWF0aW9uKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBnZXRFbGVtZW50QnlJZChpZDogc3RyaW5nKTogQ2FyZEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3VwZXIuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ2V0SXRlbUNvdW50KCk7IGkrKykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZ2V0SXRlbUF0KGkpLmdldEVsZW1lbnRCeUlkKGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAqL1xuICAgIGZpbmRET01Ob2RlT3duZXIobm9kZTogTm9kZSk6IENhcmRPYmplY3QgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgdGFyZ2V0OiBDYXJkT2JqZWN0IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5nZXRJdGVtQ291bnQoKTsgaSsrKSB7XG4gICAgICAgICAgICAvLyByZWN1ciB0aHJvdWdoIGNoaWxkIGVsZW1lbnRzXG4gICAgICAgICAgICB0YXJnZXQgPSB0aGlzLmdldEl0ZW1BdChpKS5maW5kRE9NTm9kZU93bmVyKG5vZGUpO1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vdCBmb3VuZCBpbiBjaGlsZHJlbiwgZGVmZXIgdG8gcGFyZW50IGltcGxlbWVudGF0aW9uXG4gICAgICAgIHJldHVybiBzdXBlci5maW5kRE9NTm9kZU93bmVyKG5vZGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEltYWdlU2V0IGV4dGVuZHMgQ2FyZEVsZW1lbnRDb250YWluZXIge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSBpbWFnZXNQcm9wZXJ0eSA9IG5ldyBTZXJpYWxpemFibGVPYmplY3RDb2xsZWN0aW9uUHJvcGVydHkoXG4gICAgICAgIFZlcnNpb25zLnYxXzAsXG4gICAgICAgIFwiaW1hZ2VzXCIsXG4gICAgICAgIEltYWdlLFxuICAgICAgICAoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QsIGl0ZW06IEltYWdlKSA9PiB7IGl0ZW0uc2V0UGFyZW50KDxDYXJkRWxlbWVudD5zZW5kZXIpOyB9KTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgaW1hZ2VTaXplUHJvcGVydHkgPSBuZXcgRW51bVByb3BlcnR5KFxuICAgICAgICBWZXJzaW9ucy52MV8wLFxuICAgICAgICBcImltYWdlU2l6ZVwiLFxuICAgICAgICBFbnVtcy5JbWFnZVNpemUsXG4gICAgICAgIEVudW1zLkltYWdlU2l6ZS5NZWRpdW0pO1xuXG4gICAgQHByb3BlcnR5KEltYWdlU2V0LmltYWdlc1Byb3BlcnR5KVxuICAgIHByaXZhdGUgX2ltYWdlczogSW1hZ2VbXSA9IFtdO1xuXG4gICAgQHByb3BlcnR5KEltYWdlU2V0LmltYWdlU2l6ZVByb3BlcnR5KVxuICAgIGltYWdlU2l6ZTogRW51bXMuSW1hZ2VTaXplID0gRW51bXMuSW1hZ2VTaXplLk1lZGl1bTtcblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUmVuZGVyKCk6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0aGlzLl9pbWFnZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZmxleFdyYXAgPSBcIndyYXBcIjtcblxuICAgICAgICAgICAgZm9yIChsZXQgaW1hZ2Ugb2YgdGhpcy5faW1hZ2VzKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmltYWdlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkltYWdlU2l6ZS5TbWFsbDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLnNpemUgPSBFbnVtcy5TaXplLlNtYWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRW51bXMuSW1hZ2VTaXplLkxhcmdlOlxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2Uuc2l6ZSA9IEVudW1zLlNpemUuTGFyZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLnNpemUgPSBFbnVtcy5TaXplLk1lZGl1bTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGltYWdlLm1heEhlaWdodCA9IHRoaXMuaG9zdENvbmZpZy5pbWFnZVNldC5tYXhJbWFnZUhlaWdodDtcblxuICAgICAgICAgICAgICAgIGxldCByZW5kZXJlZEltYWdlID0gaW1hZ2UucmVuZGVyKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVuZGVyZWRJbWFnZSkge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJlZEltYWdlLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1mbGV4XCI7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkSW1hZ2Uuc3R5bGUubWFyZ2luID0gXCIwcHhcIjtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWRJbWFnZS5zdHlsZS5tYXJnaW5SaWdodCA9IFwiMTBweFwiO1xuXG4gICAgICAgICAgICAgICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKGVsZW1lbnQsIHJlbmRlcmVkSW1hZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGdldEl0ZW1Db3VudCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5faW1hZ2VzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBnZXRJdGVtQXQoaW5kZXg6IG51bWJlcik6IENhcmRFbGVtZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlc1tpbmRleF07XG4gICAgfVxuXG4gICAgZ2V0Rmlyc3RWaXNpYmxlUmVuZGVyZWRJdGVtKCk6IENhcmRFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlcyAmJiB0aGlzLl9pbWFnZXMubGVuZ3RoID4gMCA/IHRoaXMuX2ltYWdlc1swXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXRMYXN0VmlzaWJsZVJlbmRlcmVkSXRlbSgpOiBDYXJkRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbWFnZXMgJiYgdGhpcy5faW1hZ2VzLmxlbmd0aCA+IDAgPyB0aGlzLl9pbWFnZXNbdGhpcy5faW1hZ2VzLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJlbW92ZUl0ZW0oaXRlbTogQ2FyZEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBJbWFnZSkge1xuICAgICAgICAgICAgbGV0IGl0ZW1JbmRleCA9IHRoaXMuX2ltYWdlcy5pbmRleE9mKGl0ZW0pO1xuXG4gICAgICAgICAgICBpZiAoaXRlbUluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbWFnZXMuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICBpdGVtLnNldFBhcmVudCh1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVMYXlvdXQoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGdldEpzb25UeXBlTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJJbWFnZVNldFwiO1xuICAgIH1cblxuICAgIGFkZEltYWdlKGltYWdlOiBJbWFnZSkge1xuICAgICAgICBpZiAoIWltYWdlLnBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5faW1hZ2VzLnB1c2goaW1hZ2UpO1xuXG4gICAgICAgICAgICBpbWFnZS5zZXRQYXJlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGltYWdlIGFscmVhZHkgYmVsb25ncyB0byBhbm90aGVyIEltYWdlU2V0XCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5kZXhPZihjYXJkRWxlbWVudDogQ2FyZEVsZW1lbnQpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gY2FyZEVsZW1lbnQgaW5zdGFuY2VvZiBJbWFnZSA/IHRoaXMuX2ltYWdlcy5pbmRleE9mKGNhcmRFbGVtZW50KSA6IC0xO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1lZGlhU291cmNlIGV4dGVuZHMgU2VyaWFsaXphYmxlT2JqZWN0IHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgbWltZVR5cGVQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8xLCBcIm1pbWVUeXBlXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSB1cmxQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8xLCBcInVybFwiKTtcblxuICAgIEBwcm9wZXJ0eShNZWRpYVNvdXJjZS5taW1lVHlwZVByb3BlcnR5KVxuICAgIG1pbWVUeXBlPzogc3RyaW5nO1xuXG4gICAgQHByb3BlcnR5KE1lZGlhU291cmNlLnVybFByb3BlcnR5KVxuICAgIHVybD86IHN0cmluZztcblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgcHJvdGVjdGVkIGdldFNjaGVtYUtleSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJNZWRpYVNvdXJjZVwiO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHVybD86IHN0cmluZywgbWltZVR5cGU/OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5taW1lVHlwZSA9IG1pbWVUeXBlO1xuICAgIH1cblxuICAgIGlzVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbWVUeXBlICYmIHRoaXMudXJsID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIHJlbmRlcigpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCByZXN1bHQ6IEhUTUxTb3VyY2VFbGVtZW50IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNvdXJjZVwiKTtcbiAgICAgICAgICAgIHJlc3VsdC5zcmMgPSA8c3RyaW5nPnRoaXMudXJsO1xuICAgICAgICAgICAgcmVzdWx0LnR5cGUgPSA8c3RyaW5nPnRoaXMubWltZVR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1lZGlhIGV4dGVuZHMgQ2FyZEVsZW1lbnQge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSBzb3VyY2VzUHJvcGVydHkgPSBuZXcgU2VyaWFsaXphYmxlT2JqZWN0Q29sbGVjdGlvblByb3BlcnR5KFZlcnNpb25zLnYxXzEsIFwic291cmNlc1wiLCBNZWRpYVNvdXJjZSk7XG4gICAgc3RhdGljIHJlYWRvbmx5IHBvc3RlclByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzEsIFwicG9zdGVyXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBhbHRUZXh0UHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfMSwgXCJhbHRUZXh0XCIpO1xuXG4gICAgQHByb3BlcnR5KE1lZGlhLnNvdXJjZXNQcm9wZXJ0eSlcbiAgICBzb3VyY2VzOiBNZWRpYVNvdXJjZVtdID0gW107XG5cbiAgICBAcHJvcGVydHkoTWVkaWEucG9zdGVyUHJvcGVydHkpXG4gICAgcG9zdGVyPzogc3RyaW5nO1xuXG4gICAgQHByb3BlcnR5KE1lZGlhLmFsdFRleHRQcm9wZXJ0eSlcbiAgICBhbHRUZXh0Pzogc3RyaW5nO1xuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgc3VwcG9ydGVkTWVkaWFUeXBlcyA9IFtcImF1ZGlvXCIsIFwidmlkZW9cIl07XG5cbiAgICBwcml2YXRlIF9zZWxlY3RlZE1lZGlhVHlwZT86IHN0cmluZztcbiAgICBwcml2YXRlIF9zZWxlY3RlZFNvdXJjZXM6IE1lZGlhU291cmNlW107XG5cbiAgICBwcml2YXRlIGdldFBvc3RlclVybCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3N0ZXIgPyB0aGlzLnBvc3RlciA6IHRoaXMuaG9zdENvbmZpZy5tZWRpYS5kZWZhdWx0UG9zdGVyO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJvY2Vzc1NvdXJjZXMoKSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdGVkU291cmNlcyA9IFtdO1xuICAgICAgICB0aGlzLl9zZWxlY3RlZE1lZGlhVHlwZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2YgdGhpcy5zb3VyY2VzKSB7XG4gICAgICAgICAgICBsZXQgbWltZUNvbXBvbmVudHMgPSBzb3VyY2UubWltZVR5cGUgPyBzb3VyY2UubWltZVR5cGUuc3BsaXQoJy8nKSA6IFtdO1xuXG4gICAgICAgICAgICBpZiAobWltZUNvbXBvbmVudHMubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3NlbGVjdGVkTWVkaWFUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IE1lZGlhLnN1cHBvcnRlZE1lZGlhVHlwZXMuaW5kZXhPZihtaW1lQ29tcG9uZW50c1swXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkTWVkaWFUeXBlID0gTWVkaWEuc3VwcG9ydGVkTWVkaWFUeXBlc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1pbWVDb21wb25lbnRzWzBdID09IHRoaXMuX3NlbGVjdGVkTWVkaWFUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkU291cmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVQbGF5QnV0dG9uSW52b2tlKGV2ZW50OiBVSUV2ZW50KSA6IHZvaWRcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLmhvc3RDb25maWcubWVkaWEuYWxsb3dJbmxpbmVQbGF5YmFjaykge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnJlbmRlcmVkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGxldCBtZWRpYVBsYXllckVsZW1lbnQgPSB0aGlzLnJlbmRlck1lZGlhUGxheWVyKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LmFwcGVuZENoaWxkKG1lZGlhUGxheWVyRWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICBtZWRpYVBsYXllckVsZW1lbnQucGxheSgpO1xuICAgICAgICAgICAgICAgIG1lZGlhUGxheWVyRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKE1lZGlhLm9uUGxheSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIE1lZGlhLm9uUGxheSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyUG9zdGVyKCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgcGxheUJ1dHRvbkFycm93V2lkdGggPSAxMjtcbiAgICAgICAgY29uc3QgcGxheUJ1dHRvbkFycm93SGVpZ2h0ID0gMTU7XG5cbiAgICAgICAgbGV0IHBvc3RlclJvb3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgcG9zdGVyUm9vdEVsZW1lbnQuY2xhc3NOYW1lID0gdGhpcy5ob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy1tZWRpYS1wb3N0ZXJcIik7XG4gICAgICAgIHBvc3RlclJvb3RFbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJjb250ZW50aW5mb1wiKTtcbiAgICAgICAgcG9zdGVyUm9vdEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB0aGlzLmFsdFRleHQgPyB0aGlzLmFsdFRleHQgOiBTdHJpbmdzLmRlZmF1bHRzLm1lZGlhUGxheWVyQXJpYUxhYmVsKCkpO1xuICAgICAgICBwb3N0ZXJSb290RWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICAgICAgcG9zdGVyUm9vdEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuXG4gICAgICAgIGxldCBwb3N0ZXJVcmwgPSB0aGlzLmdldFBvc3RlclVybCgpO1xuXG4gICAgICAgIGlmIChwb3N0ZXJVcmwpIHtcbiAgICAgICAgICAgIGxldCBwb3N0ZXJJbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICAgICAgcG9zdGVySW1hZ2VFbGVtZW50LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgICAgICBwb3N0ZXJJbWFnZUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgICAgICBwb3N0ZXJJbWFnZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInByZXNlbnRhdGlvblwiKTtcblxuICAgICAgICAgICAgcG9zdGVySW1hZ2VFbGVtZW50Lm9uZXJyb3IgPSAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocG9zdGVySW1hZ2VFbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zdGVySW1hZ2VFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocG9zdGVySW1hZ2VFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwb3N0ZXJSb290RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZW1wdHlcIik7XG4gICAgICAgICAgICAgICAgcG9zdGVyUm9vdEVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gXCIxNTBweFwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwb3N0ZXJJbWFnZUVsZW1lbnQuc3JjID0gcG9zdGVyVXJsO1xuXG4gICAgICAgICAgICBwb3N0ZXJSb290RWxlbWVudC5hcHBlbmRDaGlsZChwb3N0ZXJJbWFnZUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcG9zdGVyUm9vdEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImVtcHR5XCIpO1xuICAgICAgICAgICAgcG9zdGVyUm9vdEVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gXCIxNTBweFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaG9zdENvbmZpZy5zdXBwb3J0c0ludGVyYWN0aXZpdHkgJiYgdGhpcy5fc2VsZWN0ZWRTb3VyY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBwbGF5QnV0dG9uT3V0ZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHBsYXlCdXR0b25PdXRlckVsZW1lbnQudGFiSW5kZXggPSAwO1xuICAgICAgICAgICAgcGxheUJ1dHRvbk91dGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiYnV0dG9uXCIpO1xuICAgICAgICAgICAgcGxheUJ1dHRvbk91dGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIFN0cmluZ3MuZGVmYXVsdHMubWVkaWFQbGF5ZXJQbGF5TWVkaWEoKSk7XG4gICAgICAgICAgICBwbGF5QnV0dG9uT3V0ZXJFbGVtZW50LmNsYXNzTmFtZSA9IHRoaXMuaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiYWMtbWVkaWEtcGxheUJ1dHRvblwiKTtcbiAgICAgICAgICAgIHBsYXlCdXR0b25PdXRlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgICAgICAgICAgcGxheUJ1dHRvbk91dGVyRWxlbWVudC5zdHlsZS5hbGlnbkl0ZW1zID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICAgIHBsYXlCdXR0b25PdXRlckVsZW1lbnQuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSBcImNlbnRlclwiO1xuICAgICAgICAgICAgcGxheUJ1dHRvbk91dGVyRWxlbWVudC5vbmNsaWNrID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVBsYXlCdXR0b25JbnZva2UoZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBsYXlCdXR0b25PdXRlckVsZW1lbnQub25rZXlwcmVzcyA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGUuY29kZSA9PSBcIkVudGVyXCIgfHwgZS5jb2RlID09IFwiU3BhY2VcIikgeyAvLyBzcGFjZSBvciBlbnRlclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVBsYXlCdXR0b25JbnZva2UoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgcGxheUJ1dHRvbklubmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBwbGF5QnV0dG9uSW5uZXJFbGVtZW50LmNsYXNzTmFtZSA9IHRoaXMuaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiYWMtbWVkaWEtcGxheUJ1dHRvbi1hcnJvd1wiKTtcbiAgICAgICAgICAgIHBsYXlCdXR0b25Jbm5lckVsZW1lbnQuc3R5bGUud2lkdGggPSBwbGF5QnV0dG9uQXJyb3dXaWR0aCArIFwicHhcIjtcbiAgICAgICAgICAgIHBsYXlCdXR0b25Jbm5lckVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gcGxheUJ1dHRvbkFycm93SGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICAgICAgcGxheUJ1dHRvbklubmVyRWxlbWVudC5zdHlsZS5ib3JkZXJUb3BXaWR0aCA9IChwbGF5QnV0dG9uQXJyb3dIZWlnaHQgLyAyKSArIFwicHhcIjtcbiAgICAgICAgICAgIHBsYXlCdXR0b25Jbm5lckVsZW1lbnQuc3R5bGUuYm9yZGVyQm90dG9tV2lkdGggPSAocGxheUJ1dHRvbkFycm93SGVpZ2h0IC8gMikgKyBcInB4XCI7XG4gICAgICAgICAgICBwbGF5QnV0dG9uSW5uZXJFbGVtZW50LnN0eWxlLmJvcmRlckxlZnRXaWR0aCA9IHBsYXlCdXR0b25BcnJvd1dpZHRoICsgXCJweFwiO1xuICAgICAgICAgICAgcGxheUJ1dHRvbklubmVyRWxlbWVudC5zdHlsZS5ib3JkZXJSaWdodFdpZHRoID0gXCIwXCI7XG4gICAgICAgICAgICBwbGF5QnV0dG9uSW5uZXJFbGVtZW50LnN0eWxlLmJvcmRlclN0eWxlID0gXCJzb2xpZFwiO1xuICAgICAgICAgICAgcGxheUJ1dHRvbklubmVyRWxlbWVudC5zdHlsZS5ib3JkZXJUb3BDb2xvciA9IFwidHJhbnNwYXJlbnRcIjtcbiAgICAgICAgICAgIHBsYXlCdXR0b25Jbm5lckVsZW1lbnQuc3R5bGUuYm9yZGVyUmlnaHRDb2xvciA9IFwidHJhbnNwYXJlbnRcIjtcbiAgICAgICAgICAgIHBsYXlCdXR0b25Jbm5lckVsZW1lbnQuc3R5bGUuYm9yZGVyQm90dG9tQ29sb3IgPSBcInRyYW5zcGFyZW50XCI7XG4gICAgICAgICAgICBwbGF5QnV0dG9uSW5uZXJFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgKHBsYXlCdXR0b25BcnJvd1dpZHRoIC8gMTApICsgXCJweCwwcHgpXCI7XG5cbiAgICAgICAgICAgIHBsYXlCdXR0b25PdXRlckVsZW1lbnQuYXBwZW5kQ2hpbGQocGxheUJ1dHRvbklubmVyRWxlbWVudCk7XG5cbiAgICAgICAgICAgIGxldCBwbGF5QnV0dG9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHBsYXlCdXR0b25Db250YWluZXIuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICBwbGF5QnV0dG9uQ29udGFpbmVyLnN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgICAgICAgICAgIHBsYXlCdXR0b25Db250YWluZXIuc3R5bGUudG9wID0gXCIwXCI7XG4gICAgICAgICAgICBwbGF5QnV0dG9uQ29udGFpbmVyLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgICAgICBwbGF5QnV0dG9uQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuICAgICAgICAgICAgcGxheUJ1dHRvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgICAgICBwbGF5QnV0dG9uQ29udGFpbmVyLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICAgIHBsYXlCdXR0b25Db250YWluZXIuc3R5bGUuYWxpZ25JdGVtcyA9IFwiY2VudGVyXCI7XG5cbiAgICAgICAgICAgIHBsYXlCdXR0b25Db250YWluZXIuYXBwZW5kQ2hpbGQocGxheUJ1dHRvbk91dGVyRWxlbWVudCk7XG4gICAgICAgICAgICBwb3N0ZXJSb290RWxlbWVudC5hcHBlbmRDaGlsZChwbGF5QnV0dG9uQ29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwb3N0ZXJSb290RWxlbWVudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlck1lZGlhUGxheWVyKCk6IEhUTUxNZWRpYUVsZW1lbnQge1xuICAgICAgICBsZXQgbWVkaWFFbGVtZW50OiBIVE1MTWVkaWFFbGVtZW50O1xuXG4gICAgICAgIGlmICh0aGlzLl9zZWxlY3RlZE1lZGlhVHlwZSA9PSBcInZpZGVvXCIpIHtcbiAgICAgICAgICAgIGxldCB2aWRlb1BsYXllciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKTtcblxuICAgICAgICAgICAgbGV0IHBvc3RlclVybCA9IHRoaXMuZ2V0UG9zdGVyVXJsKCk7XG5cbiAgICAgICAgICAgIGlmIChwb3N0ZXJVcmwpIHtcbiAgICAgICAgICAgICAgICB2aWRlb1BsYXllci5wb3N0ZXIgPSBwb3N0ZXJVcmw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lZGlhRWxlbWVudCA9IHZpZGVvUGxheWVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWVkaWFFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImF1ZGlvXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVkaWFFbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdGhpcy5hbHRUZXh0ID8gdGhpcy5hbHRUZXh0IDogU3RyaW5ncy5kZWZhdWx0cy5tZWRpYVBsYXllckFyaWFMYWJlbCgpKTtcbiAgICAgICAgbWVkaWFFbGVtZW50LnNldEF0dHJpYnV0ZShcIndlYmtpdC1wbGF5c2lubGluZVwiLCBcIlwiKTtcbiAgICAgICAgbWVkaWFFbGVtZW50LnNldEF0dHJpYnV0ZShcInBsYXlzaW5saW5lXCIsIFwiXCIpO1xuICAgICAgICBtZWRpYUVsZW1lbnQuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICBtZWRpYUVsZW1lbnQuY29udHJvbHMgPSB0cnVlO1xuXG4gICAgICAgIGlmIChVdGlscy5pc01vYmlsZU9TKCkpIHtcbiAgICAgICAgICAgIG1lZGlhRWxlbWVudC5tdXRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBtZWRpYUVsZW1lbnQucHJlbG9hZCA9IFwibm9uZVwiO1xuICAgICAgICBtZWRpYUVsZW1lbnQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblxuICAgICAgICBmb3IgKGxldCBzb3VyY2Ugb2YgdGhpcy5zb3VyY2VzKSB7XG4gICAgICAgICAgICBsZXQgcmVuZGVyZWRTb3VyY2UgPSBzb3VyY2UucmVuZGVyKCk7XG5cbiAgICAgICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKG1lZGlhRWxlbWVudCwgcmVuZGVyZWRTb3VyY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lZGlhRWxlbWVudDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxSZW5kZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgZWxlbWVudCA9IDxIVE1MRWxlbWVudD5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IHRoaXMuaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiYWMtbWVkaWFcIik7XG5cbiAgICAgICAgdGhpcy5wcm9jZXNzU291cmNlcygpO1xuXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5yZW5kZXJQb3N0ZXIoKSk7XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgc3RhdGljIG9uUGxheT86IChzZW5kZXI6IE1lZGlhKSA9PiB2b2lkO1xuXG4gICAgZ2V0SnNvblR5cGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIk1lZGlhXCI7XG4gICAgfVxuXG4gICAgZ2V0UmVzb3VyY2VJbmZvcm1hdGlvbigpOiBJUmVzb3VyY2VJbmZvcm1hdGlvbltdIHtcbiAgICAgICAgbGV0IHJlc3VsdDogSVJlc291cmNlSW5mb3JtYXRpb25bXSA9IFtdO1xuXG4gICAgICAgIGxldCBwb3N0ZXJVcmwgPSB0aGlzLmdldFBvc3RlclVybCgpO1xuXG4gICAgICAgIGlmIChwb3N0ZXJVcmwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgdXJsOiBwb3N0ZXJVcmwsIG1pbWVUeXBlOiBcImltYWdlXCIgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBtZWRpYVNvdXJjZSBvZiB0aGlzLnNvdXJjZXMpIHtcbiAgICAgICAgICAgIGlmIChtZWRpYVNvdXJjZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiA8c3RyaW5nPm1lZGlhU291cmNlLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlOiA8c3RyaW5nPm1lZGlhU291cmNlLm1pbWVUeXBlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBnZXQgc2VsZWN0ZWRNZWRpYVR5cGUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkTWVkaWFUeXBlO1xuICAgIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIElucHV0IGV4dGVuZHMgQ2FyZEVsZW1lbnQgaW1wbGVtZW50cyBJSW5wdXQge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSBsYWJlbFByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzMsIFwibGFiZWxcIiwgdHJ1ZSk7XG4gICAgc3RhdGljIHJlYWRvbmx5IGlzUmVxdWlyZWRQcm9wZXJ0eSA9IG5ldyBCb29sUHJvcGVydHkoVmVyc2lvbnMudjFfMywgXCJpc1JlcXVpcmVkXCIsIGZhbHNlKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgZXJyb3JNZXNzYWdlUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfMywgXCJlcnJvck1lc3NhZ2VcIiwgdHJ1ZSk7XG5cbiAgICBAcHJvcGVydHkoSW5wdXQubGFiZWxQcm9wZXJ0eSlcbiAgICBsYWJlbD86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShJbnB1dC5pc1JlcXVpcmVkUHJvcGVydHkpXG4gICAgaXNSZXF1aXJlZDogYm9vbGVhbjtcblxuICAgIEBwcm9wZXJ0eShJbnB1dC5lcnJvck1lc3NhZ2VQcm9wZXJ0eSlcbiAgICBlcnJvck1lc3NhZ2U/OiBzdHJpbmc7XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByaXZhdGUgX291dGVyQ29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfaW5wdXRDb250cm9sQ29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfcmVuZGVyZWRFcnJvck1lc3NhZ2VFbGVtZW50PzogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfcmVuZGVyZWRMYWJlbEVsZW1lbnQ/OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIF9yZW5kZXJlZElucHV0Q29udHJvbEVsZW1lbnQ/OiBIVE1MRWxlbWVudDtcblxuICAgIHByb3RlY3RlZCBnZXRBbGxMYWJlbElkcygpOiBzdHJpbmdbXSB7XG4gICAgICAgIGxldCBsYWJlbElkczogc3RyaW5nW10gPSBbXTtcblxuICAgICAgICBpZiAodGhpcy5sYWJlbGxlZEJ5KSB7XG4gICAgICAgICAgICBsYWJlbElkcy5wdXNoKHRoaXMubGFiZWxsZWRCeSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fcmVuZGVyZWRMYWJlbEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGxhYmVsSWRzLnB1c2godGhpcy5fcmVuZGVyZWRMYWJlbEVsZW1lbnQuaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcmVkRXJyb3JNZXNzYWdlRWxlbWVudCkge1xuICAgICAgICAgICAgbGFiZWxJZHMucHVzaCh0aGlzLl9yZW5kZXJlZEVycm9yTWVzc2FnZUVsZW1lbnQuaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxhYmVsSWRzO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVJbnB1dENvbnRyb2xBcmlhTGFiZWxsZWRCeSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcmVkSW5wdXRDb250cm9sRWxlbWVudCkge1xuICAgICAgICAgICAgbGV0IGxhYmVsSWRzOiBzdHJpbmdbXSA9IHRoaXMuZ2V0QWxsTGFiZWxJZHMoKTtcblxuICAgICAgICAgICAgaWYgKGxhYmVsSWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlZElucHV0Q29udHJvbEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbGxlZGJ5XCIsIGxhYmVsSWRzLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkSW5wdXRDb250cm9sRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsbGVkYnlcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGlzTnVsbGFibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgcmVuZGVyZWRJbnB1dENvbnRyb2xFbGVtZW50KCk6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVkSW5wdXRDb250cm9sRWxlbWVudDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGlucHV0Q29udHJvbENvbnRhaW5lckVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5wdXRDb250cm9sQ29udGFpbmVyRWxlbWVudDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGVJbnRlcm5hbFJlbmRlcigpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCBob3N0Q29uZmlnID0gdGhpcy5ob3N0Q29uZmlnO1xuXG4gICAgICAgIHRoaXMuX291dGVyQ29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMuX291dGVyQ29udGFpbmVyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgIHRoaXMuX291dGVyQ29udGFpbmVyRWxlbWVudC5zdHlsZS5mbGV4RGlyZWN0aW9uID0gXCJjb2x1bW5cIjtcblxuICAgICAgICBsZXQgcmVuZGVyZWRJbnB1dENvbnRyb2xJZCA9IFV0aWxzLmdlbmVyYXRlVW5pcXVlSWQoKTtcblxuICAgICAgICBpZiAodGhpcy5sYWJlbCkge1xuICAgICAgICAgICAgbGV0IGxhYmVsUmljaFRleHRCbG9jayA9IG5ldyBSaWNoVGV4dEJsb2NrKCk7XG4gICAgICAgICAgICBsYWJlbFJpY2hUZXh0QmxvY2suc2V0UGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgbGFiZWxSaWNoVGV4dEJsb2NrLmZvckVsZW1lbnRJZCA9IHJlbmRlcmVkSW5wdXRDb250cm9sSWQ7XG5cbiAgICAgICAgICAgIGxldCBsYWJlbElubGluZSA9IG5ldyBUZXh0UnVuKHRoaXMubGFiZWwpO1xuICAgICAgICAgICAgbGFiZWxSaWNoVGV4dEJsb2NrLmFkZElubGluZShsYWJlbElubGluZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzUmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICBsYWJlbElubGluZS5pbml0KGhvc3RDb25maWcuaW5wdXRzLmxhYmVsLnJlcXVpcmVkSW5wdXRzKTtcblxuICAgICAgICAgICAgICAgIGxldCBpc1JlcXVpcmVkQ3VlSW5saW5lID0gbmV3IFRleHRSdW4oaG9zdENvbmZpZy5pbnB1dHMubGFiZWwucmVxdWlyZWRJbnB1dHMuc3VmZml4KTtcbiAgICAgICAgICAgICAgICBpc1JlcXVpcmVkQ3VlSW5saW5lLmNvbG9yID0gaG9zdENvbmZpZy5pbnB1dHMubGFiZWwucmVxdWlyZWRJbnB1dHMuc3VmZml4Q29sb3I7XG4gICAgICAgICAgICAgICAgaXNSZXF1aXJlZEN1ZUlubGluZS5hcmlhSGlkZGVuID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGxhYmVsUmljaFRleHRCbG9jay5hZGRJbmxpbmUoaXNSZXF1aXJlZEN1ZUlubGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsYWJlbElubGluZS5pbml0KGhvc3RDb25maWcuaW5wdXRzLmxhYmVsLm9wdGlvbmFsSW5wdXRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRMYWJlbEVsZW1lbnQgPSBsYWJlbFJpY2hUZXh0QmxvY2sucmVuZGVyKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9yZW5kZXJlZExhYmVsRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkTGFiZWxFbGVtZW50LmlkID0gVXRpbHMuZ2VuZXJhdGVVbmlxdWVJZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkTGFiZWxFbGVtZW50LnN0eWxlLm1hcmdpbkJvdHRvbSA9IGhvc3RDb25maWcuZ2V0RWZmZWN0aXZlU3BhY2luZyhob3N0Q29uZmlnLmlucHV0cy5sYWJlbC5pbnB1dFNwYWNpbmcpICsgXCJweFwiO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fb3V0ZXJDb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX3JlbmRlcmVkTGFiZWxFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2lucHV0Q29udHJvbENvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLl9pbnB1dENvbnRyb2xDb250YWluZXJFbGVtZW50LmNsYXNzTmFtZSA9IGhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLWlucHV0LWNvbnRhaW5lclwiKTtcbiAgICAgICAgdGhpcy5faW5wdXRDb250cm9sQ29udGFpbmVyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG5cbiAgICAgICAgaWYgKHRoaXMuaGVpZ2h0ID09PSBcInN0cmV0Y2hcIikge1xuICAgICAgICAgICAgdGhpcy5faW5wdXRDb250cm9sQ29udGFpbmVyRWxlbWVudC5zdHlsZS5hbGlnbkl0ZW1zID0gXCJzdHJldGNoXCI7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dENvbnRyb2xDb250YWluZXJFbGVtZW50LnN0eWxlLmZsZXggPSBcIjEgMSBhdXRvXCI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZW5kZXJlZElucHV0Q29udHJvbEVsZW1lbnQgPSB0aGlzLmludGVybmFsUmVuZGVyKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcmVkSW5wdXRDb250cm9sRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRJbnB1dENvbnRyb2xFbGVtZW50LmlkID0gcmVuZGVyZWRJbnB1dENvbnRyb2xJZDtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkSW5wdXRDb250cm9sRWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IFwiMHB4XCI7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzTnVsbGFibGUgJiYgdGhpcy5pc1JlcXVpcmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRJbnB1dENvbnRyb2xFbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtcmVxdWlyZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkSW5wdXRDb250cm9sRWxlbWVudC5jbGFzc0xpc3QuYWRkKGhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLWlucHV0LXJlcXVpcmVkXCIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5faW5wdXRDb250cm9sQ29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9yZW5kZXJlZElucHV0Q29udHJvbEVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5fb3V0ZXJDb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2lucHV0Q29udHJvbENvbnRhaW5lckVsZW1lbnQpO1xuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUlucHV0Q29udHJvbEFyaWFMYWJlbGxlZEJ5KCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vdXRlckNvbnRhaW5lckVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB2YWx1ZUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgdGhpcy5yZXNldFZhbGlkYXRpb25GYWlsdXJlQ3VlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vblZhbHVlQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlZCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJhaXNlSW5wdXRWYWx1ZUNoYW5nZWRFdmVudCh0aGlzKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVzZXRWYWxpZGF0aW9uRmFpbHVyZUN1ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZWRJbnB1dENvbnRyb2xFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkSW5wdXRDb250cm9sRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiYWMtaW5wdXQtdmFsaWRhdGlvbi1mYWlsZWRcIikpO1xuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUlucHV0Q29udHJvbEFyaWFMYWJlbGxlZEJ5KCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9yZW5kZXJlZEVycm9yTWVzc2FnZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vdXRlckNvbnRhaW5lckVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5fcmVuZGVyZWRFcnJvck1lc3NhZ2VFbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkRXJyb3JNZXNzYWdlRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBzaG93VmFsaWRhdGlvbkVycm9yTWVzc2FnZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZWRFbGVtZW50ICYmIHRoaXMuZXJyb3JNZXNzYWdlICYmIEdsb2JhbFNldHRpbmdzLmRpc3BsYXlJbnB1dFZhbGlkYXRpb25FcnJvcnMpIHtcbiAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2VUZXh0QmxvY2sgPSBuZXcgVGV4dEJsb2NrKCk7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VUZXh0QmxvY2suc2V0UGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlVGV4dEJsb2NrLnRleHQgPSB0aGlzLmVycm9yTWVzc2FnZTtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZVRleHRCbG9jay53cmFwID0gdHJ1ZTtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZVRleHRCbG9jay5pbml0KHRoaXMuaG9zdENvbmZpZy5pbnB1dHMuZXJyb3JNZXNzYWdlKTtcblxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRFcnJvck1lc3NhZ2VFbGVtZW50ID0gZXJyb3JNZXNzYWdlVGV4dEJsb2NrLnJlbmRlcigpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fcmVuZGVyZWRFcnJvck1lc3NhZ2VFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRFcnJvck1lc3NhZ2VFbGVtZW50LmlkID0gVXRpbHMuZ2VuZXJhdGVVbmlxdWVJZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX291dGVyQ29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9yZW5kZXJlZEVycm9yTWVzc2FnZUVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVJbnB1dENvbnRyb2xBcmlhTGFiZWxsZWRCeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25WYWx1ZUNoYW5nZWQ6IChzZW5kZXI6IElucHV0KSA9PiB2b2lkO1xuXG4gICAgbGFiZWxsZWRCeT86IHN0cmluZztcblxuICAgIGFic3RyYWN0IGlzU2V0KCk6IGJvb2xlYW47XG5cbiAgICBmb2N1cygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcmVkSW5wdXRDb250cm9sRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRJbnB1dENvbnRyb2xFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1ZhbGlkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0OiBWYWxpZGF0aW9uUmVzdWx0cykge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0KTtcblxuICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYWRkRmFpbHVyZShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5Qcm9wZXJ0eUNhbnRCZU51bGwsXG4gICAgICAgICAgICAgICAgU3RyaW5ncy5lcnJvcnMuaW5wdXRzTXVzdEhhdmVVbmlxdWVJZCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzUmVxdWlyZWQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYWRkRmFpbHVyZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgRW51bXMuVmFsaWRhdGlvbkV2ZW50LlJlcXVpcmVkSW5wdXRzU2hvdWxkSGF2ZUxhYmVsLFxuICAgICAgICAgICAgICAgICAgICBcIlJlcXVpcmVkIGlucHV0cyBzaG91bGQgaGF2ZSBhIGxhYmVsXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMuZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5hZGRGYWlsdXJlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuUmVxdWlyZWRJbnB1dHNTaG91bGRIYXZlRXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBcIlJlcXVpcmVkIGlucHV0cyBzaG91bGQgaGF2ZSBhbiBlcnJvciBtZXNzYWdlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFsaWRhdGVWYWx1ZSgpOiBib29sZWFuIHtcbiAgICAgICAgdGhpcy5yZXNldFZhbGlkYXRpb25GYWlsdXJlQ3VlKCk7XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuaXNSZXF1aXJlZCA/IHRoaXMuaXNTZXQoKSAmJiB0aGlzLmlzVmFsaWQoKSA6IHRoaXMuaXNWYWxpZCgpO1xuXG4gICAgICAgIGlmICghcmVzdWx0ICYmIHRoaXMucmVuZGVyZWRJbnB1dENvbnRyb2xFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkSW5wdXRDb250cm9sRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiYWMtaW5wdXQtdmFsaWRhdGlvbi1mYWlsZWRcIikpO1xuXG4gICAgICAgICAgICB0aGlzLnNob3dWYWxpZGF0aW9uRXJyb3JNZXNzYWdlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGdldEFsbElucHV0cyhwcm9jZXNzQWN0aW9uczogYm9vbGVhbiA9IHRydWUpOiBJbnB1dFtdIHtcbiAgICAgICAgcmV0dXJuIFsgdGhpcyBdO1xuICAgIH1cblxuICAgIGFic3RyYWN0IGdldCB2YWx1ZSgpOiBhbnk7XG5cbiAgICBnZXQgaXNJbnRlcmFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGV4dElucHV0IGV4dGVuZHMgSW5wdXQge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSB2YWx1ZVByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwidmFsdWVcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IG1heExlbmd0aFByb3BlcnR5ID0gbmV3IE51bVByb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwibWF4TGVuZ3RoXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBpc011bHRpbGluZVByb3BlcnR5ID0gbmV3IEJvb2xQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcImlzTXVsdGlsaW5lXCIsIGZhbHNlKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgcGxhY2Vob2xkZXJQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcInBsYWNlaG9sZGVyXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBzdHlsZVByb3BlcnR5ID0gbmV3IEVudW1Qcm9wZXJ0eShcbiAgICAgICAgVmVyc2lvbnMudjFfMCxcbiAgICAgICAgXCJzdHlsZVwiLFxuICAgICAgICBFbnVtcy5JbnB1dFRleHRTdHlsZSxcbiAgICAgICAgRW51bXMuSW5wdXRUZXh0U3R5bGUuVGV4dCxcbiAgICAgICAgW1xuICAgICAgICAgICAgeyB2YWx1ZTogRW51bXMuSW5wdXRUZXh0U3R5bGUuVGV4dCB9LFxuICAgICAgICAgICAgeyB2YWx1ZTogRW51bXMuSW5wdXRUZXh0U3R5bGUuVGVsIH0sXG4gICAgICAgICAgICB7IHZhbHVlOiBFbnVtcy5JbnB1dFRleHRTdHlsZS5VcmwgfSxcbiAgICAgICAgICAgIHsgdmFsdWU6IEVudW1zLklucHV0VGV4dFN0eWxlLkVtYWlsIH0sXG4gICAgICAgICAgICB7IHZhbHVlOiBFbnVtcy5JbnB1dFRleHRTdHlsZS5QYXNzd29yZCwgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbnMudjFfNX1cbiAgICAgICAgXVxuICAgICk7XG4gICAgc3RhdGljIHJlYWRvbmx5IGlubGluZUFjdGlvblByb3BlcnR5ID0gbmV3IEFjdGlvblByb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwiaW5saW5lQWN0aW9uXCIsIFsgXCJBY3Rpb24uU2hvd0NhcmRcIiBdKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgcmVnZXhQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8zLCBcInJlZ2V4XCIsIHRydWUpO1xuXG4gICAgQHByb3BlcnR5KFRleHRJbnB1dC52YWx1ZVByb3BlcnR5KVxuICAgIGRlZmF1bHRWYWx1ZT86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShUZXh0SW5wdXQubWF4TGVuZ3RoUHJvcGVydHkpXG4gICAgbWF4TGVuZ3RoPzogbnVtYmVyO1xuXG4gICAgQHByb3BlcnR5KFRleHRJbnB1dC5pc011bHRpbGluZVByb3BlcnR5KVxuICAgIGlzTXVsdGlsaW5lOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBAcHJvcGVydHkoVGV4dElucHV0LnBsYWNlaG9sZGVyUHJvcGVydHkpXG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoVGV4dElucHV0LnN0eWxlUHJvcGVydHkpXG4gICAgc3R5bGU6IEVudW1zLklucHV0VGV4dFN0eWxlID0gRW51bXMuSW5wdXRUZXh0U3R5bGUuVGV4dDtcblxuICAgIEBwcm9wZXJ0eShUZXh0SW5wdXQuaW5saW5lQWN0aW9uUHJvcGVydHkpXG4gICAgaW5saW5lQWN0aW9uPzogQWN0aW9uO1xuXG4gICAgQHByb3BlcnR5KFRleHRJbnB1dC5yZWdleFByb3BlcnR5KVxuICAgIHJlZ2V4Pzogc3RyaW5nO1xuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICBwcml2YXRlIHNldHVwSW5wdXQoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50KSB7XG4gICAgICAgIGlucHV0LnN0eWxlLmZsZXggPSBcIjEgMSBhdXRvXCI7XG4gICAgICAgIGlucHV0LnRhYkluZGV4ID0gMDtcblxuICAgICAgICBpZiAodGhpcy5wbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgaW5wdXQucGxhY2Vob2xkZXIgPSB0aGlzLnBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB0aGlzLnBsYWNlaG9sZGVyKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9IHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubWF4TGVuZ3RoICYmIHRoaXMubWF4TGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaW5wdXQubWF4TGVuZ3RoID0gdGhpcy5tYXhMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dC5vbmlucHV0ID0gKCkgPT4geyB0aGlzLnZhbHVlQ2hhbmdlZCgpOyB9XG4gICAgICAgIGlucHV0Lm9ua2V5cHJlc3MgPSAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gQ3RybCtFbnRlciBwcmVzc2VkXG4gICAgICAgICAgICBpZiAoZS5jdHJsS2V5ICYmIGUuY29kZSA9PT0gXCJFbnRlclwiICYmIHRoaXMuaW5saW5lQWN0aW9uICYmIHRoaXMuaW5saW5lQWN0aW9uLmlzRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5saW5lQWN0aW9uLmV4ZWN1dGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFJlbmRlcigpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCByZXN1bHQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50O1xuXG4gICAgICAgIGlmICh0aGlzLmlzTXVsdGlsaW5lICYmIHRoaXMuc3R5bGUgIT09IEVudW1zLklucHV0VGV4dFN0eWxlLlBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XG4gICAgICAgICAgICByZXN1bHQuY2xhc3NOYW1lID0gdGhpcy5ob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy1pbnB1dFwiLCBcImFjLXRleHRJbnB1dFwiLCBcImFjLW11bHRpbGluZVwiKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaGVpZ2h0ID09PSBcInN0cmV0Y2hcIikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5zdHlsZS5oZWlnaHQgPSBcImluaXRpYWxcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgIHJlc3VsdC5jbGFzc05hbWUgPSB0aGlzLmhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLWlucHV0XCIsIFwiYWMtdGV4dElucHV0XCIpO1xuICAgICAgICAgICAgcmVzdWx0LnR5cGUgPSBFbnVtcy5JbnB1dFRleHRTdHlsZVt0aGlzLnN0eWxlXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXR1cElucHV0KHJlc3VsdCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGVJbnRlcm5hbFJlbmRlcigpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCByZW5kZXJlZElucHV0Q29udHJvbCA9IHN1cGVyLm92ZXJyaWRlSW50ZXJuYWxSZW5kZXIoKTtcblxuICAgICAgICBpZiAodGhpcy5pbmxpbmVBY3Rpb24pIHtcbiAgICAgICAgICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9IHRoaXMuaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKHRoaXMuaW5saW5lQWN0aW9uLmlzRW5hYmxlZCA/IFwiYWMtaW5saW5lQWN0aW9uQnV0dG9uXCIgOiBcImFjLWlubGluZUFjdGlvbkJ1dHRvbi1kaXNhYmxlZFwiKTtcblxuICAgICAgICAgICAgYnV0dG9uLm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlubGluZUFjdGlvbiAmJiB0aGlzLmlubGluZUFjdGlvbi5pc0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmxpbmVBY3Rpb24uZXhlY3V0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlubGluZUFjdGlvbi5pY29uVXJsKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJpY29uT25seVwiKTtcblxuICAgICAgICAgICAgICAgIGxldCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgICAgICAgICBpY29uLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuICAgICAgICAgICAgICAgIGljb24uc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInByZXNlbnRhdGlvblwiKTtcblxuICAgICAgICAgICAgICAgIC8vIFRoZSBiZWxvdyB0cmljayBpcyBuZWNlc3NhcnkgYXMgYSB3b3JrYXJvdW5kIGluIENocm9tZSB3aGVyZSB0aGUgaWNvbiBpcyBpbml0aWFsbHkgZGlzcGxheWVkXG4gICAgICAgICAgICAgICAgLy8gYXQgaXRzIG5hdGl2ZSBzaXplIHRoZW4gcmVzaXplZCB0byAxMDAlIG9mIHRoZSBidXR0b24ncyBoZWlnaHQuIFRoaXMgY2ZyZWF0ZXMgYW4gdW5wbGVhc2FudFxuICAgICAgICAgICAgICAgIC8vIGZsaWNrZXIuIE9uIHRvcCBvZiB0aGF0LCBDaHJvbWUncyBmbGV4IGltcGxlbWVudGF0aW9uIGZhaWxzIHRvIHBycGVybHkgcmUtbGF5b3V0IHRoZSBidXR0b25cbiAgICAgICAgICAgICAgICAvLyBhZnRlciB0aGUgaW1hZ2UgaGFzIGxvYWRlZCBhbmQgYmVlbiBnaWN2ZW4gaXRzIGZpbmFsIHNpemUuIFRoZSBiZWxvdyB0cmljayBhbHNvIGZpeGVzIHRoYXQuXG4gICAgICAgICAgICAgICAgaWNvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgaWNvbi5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGljb24uc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJkaXNwbGF5XCIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWNvbi5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBidXR0b24ucmVtb3ZlQ2hpbGQoaWNvbik7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiaWNvbk9ubHlcIik7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwidGV4dE9ubHlcIik7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IHRoaXMuaW5saW5lQWN0aW9uICYmIHRoaXMuaW5saW5lQWN0aW9uLnRpdGxlID8gdGhpcy5pbmxpbmVBY3Rpb24udGl0bGUgOiBTdHJpbmdzLmRlZmF1bHRzLmlubGluZUFjdGlvblRpdGxlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWNvbi5zcmMgPSB0aGlzLmlubGluZUFjdGlvbi5pY29uVXJsO1xuXG4gICAgICAgICAgICAgICAgYnV0dG9uLmFwcGVuZENoaWxkKGljb24pO1xuICAgICAgICAgICAgICAgIGJ1dHRvbi50aXRsZSA9IHRoaXMuaW5saW5lQWN0aW9uLnRpdGxlID8gdGhpcy5pbmxpbmVBY3Rpb24udGl0bGUgOiBTdHJpbmdzLmRlZmF1bHRzLmlubGluZUFjdGlvblRpdGxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChcInRleHRPbmx5XCIpO1xuICAgICAgICAgICAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IHRoaXMuaW5saW5lQWN0aW9uLnRpdGxlID8gdGhpcy5pbmxpbmVBY3Rpb24udGl0bGUgOiBTdHJpbmdzLmRlZmF1bHRzLmlubGluZUFjdGlvblRpdGxlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaW5saW5lQWN0aW9uLnNldHVwRWxlbWVudEZvckFjY2Vzc2liaWxpdHkoYnV0dG9uLCB0cnVlKTtcblxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLm1hcmdpbkxlZnQgPSBcIjhweFwiO1xuXG4gICAgICAgICAgICB0aGlzLmlucHV0Q29udHJvbENvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZElucHV0Q29udHJvbDtcbiAgICB9XG5cbiAgICBnZXRKc29uVHlwZU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiSW5wdXQuVGV4dFwiO1xuICAgIH1cblxuICAgIGdldEFjdGlvbkJ5SWQoaWQ6IHN0cmluZykge1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3VwZXIuZ2V0QWN0aW9uQnlJZChpZCk7XG5cbiAgICAgICAgaWYgKCFyZXN1bHQgJiYgdGhpcy5pbmxpbmVBY3Rpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuaW5saW5lQWN0aW9uLmdldEFjdGlvbkJ5SWQoaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBpc1NldCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaXNWYWxpZCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnJlZ2V4KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh0aGlzLnJlZ2V4LCBcImdcIikudGVzdCh0aGlzLnZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGdldCB2YWx1ZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAodGhpcy5yZW5kZXJlZElucHV0Q29udHJvbEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzTXVsdGlsaW5lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICg8SFRNTFRleHRBcmVhRWxlbWVudD50aGlzLnJlbmRlcmVkSW5wdXRDb250cm9sRWxlbWVudCkudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDxIVE1MSW5wdXRFbGVtZW50PnRoaXMucmVuZGVyZWRJbnB1dENvbnRyb2xFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUb2dnbGVJbnB1dCBleHRlbmRzIElucHV0IHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgdmFsdWVQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcInZhbHVlXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSB0aXRsZVByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwidGl0bGVcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IHZhbHVlT25Qcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcInZhbHVlT25cIiwgdHJ1ZSwgdW5kZWZpbmVkLCBcInRydWVcIiwgKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0KSA9PiB7IHJldHVybiBcInRydWVcIjsgfSk7XG4gICAgc3RhdGljIHJlYWRvbmx5IHZhbHVlT2ZmUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJ2YWx1ZU9mZlwiLCB0cnVlLCB1bmRlZmluZWQsIFwiZmFsc2VcIiwgKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0KSA9PiB7IHJldHVybiBcImZhbHNlXCI7IH0pO1xuICAgIHN0YXRpYyByZWFkb25seSB3cmFwUHJvcGVydHkgPSBuZXcgQm9vbFByb3BlcnR5KFZlcnNpb25zLnYxXzIsIFwid3JhcFwiLCBmYWxzZSk7XG5cbiAgICBAcHJvcGVydHkoVG9nZ2xlSW5wdXQudmFsdWVQcm9wZXJ0eSlcbiAgICBkZWZhdWx0VmFsdWU/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoVG9nZ2xlSW5wdXQudGl0bGVQcm9wZXJ0eSlcbiAgICB0aXRsZT86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShUb2dnbGVJbnB1dC52YWx1ZU9uUHJvcGVydHkpXG4gICAgdmFsdWVPbjogc3RyaW5nID0gXCJ0cnVlXCI7XG5cbiAgICBAcHJvcGVydHkoVG9nZ2xlSW5wdXQudmFsdWVPZmZQcm9wZXJ0eSlcbiAgICB2YWx1ZU9mZjogc3RyaW5nID0gXCJmYWxzZVwiO1xuXG4gICAgQHByb3BlcnR5KFRvZ2dsZUlucHV0LndyYXBQcm9wZXJ0eSlcbiAgICB3cmFwOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByaXZhdGUgX2NoZWNrYm94SW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHByaXZhdGUgX2NoZWNrYm94SW5wdXRMYWJlbEVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZUlucHV0Q29udHJvbEFyaWFMYWJlbGxlZEJ5KCkge1xuICAgICAgICBpZiAodGhpcy5fY2hlY2tib3hJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGxldCBqb2luZWRMYWJlbElkcyA9IHRoaXMuZ2V0QWxsTGFiZWxJZHMoKS5qb2luKFwiIFwiKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2NoZWNrYm94SW5wdXRMYWJlbEVsZW1lbnQgJiYgdGhpcy5fY2hlY2tib3hJbnB1dExhYmVsRWxlbWVudC5pZCkge1xuICAgICAgICAgICAgICAgIGpvaW5lZExhYmVsSWRzICs9IFwiIFwiICsgdGhpcy5fY2hlY2tib3hJbnB1dExhYmVsRWxlbWVudC5pZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGpvaW5lZExhYmVsSWRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tib3hJbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbGxlZGJ5XCIsIGpvaW5lZExhYmVsSWRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrYm94SW5wdXRFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtbGFiZWxsZWRieVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFJlbmRlcigpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSB0aGlzLmhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLWlucHV0XCIsIFwiYWMtdG9nZ2xlSW5wdXRcIik7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuYWxpZ25JdGVtcyA9IFwiY2VudGVyXCI7XG5cbiAgICAgICAgdGhpcy5fY2hlY2tib3hJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIHRoaXMuX2NoZWNrYm94SW5wdXRFbGVtZW50LmlkID0gVXRpbHMuZ2VuZXJhdGVVbmlxdWVJZCgpO1xuICAgICAgICB0aGlzLl9jaGVja2JveElucHV0RWxlbWVudC50eXBlID0gXCJjaGVja2JveFwiO1xuICAgICAgICB0aGlzLl9jaGVja2JveElucHV0RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcbiAgICAgICAgdGhpcy5fY2hlY2tib3hJbnB1dEVsZW1lbnQuc3R5bGUudmVydGljYWxBbGlnbiA9IFwibWlkZGxlXCI7XG4gICAgICAgIHRoaXMuX2NoZWNrYm94SW5wdXRFbGVtZW50LnN0eWxlLm1hcmdpbiA9IFwiMFwiO1xuICAgICAgICB0aGlzLl9jaGVja2JveElucHV0RWxlbWVudC5zdHlsZS5mbGV4ID0gXCIwIDAgYXV0b1wiO1xuXG4gICAgICAgIGlmICh0aGlzLnRpdGxlKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja2JveElucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHRoaXMudGl0bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNSZXF1aXJlZCkge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tib3hJbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1yZXF1aXJlZFwiLCBcInRydWVcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jaGVja2JveElucHV0RWxlbWVudC50YWJJbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKHRoaXMuZGVmYXVsdFZhbHVlID09IHRoaXMudmFsdWVPbikge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tib3hJbnB1dEVsZW1lbnQuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jaGVja2JveElucHV0RWxlbWVudC5vbmNoYW5nZSA9ICgpID0+IHsgdGhpcy52YWx1ZUNoYW5nZWQoKTsgfVxuXG4gICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKGVsZW1lbnQsIHRoaXMuX2NoZWNrYm94SW5wdXRFbGVtZW50KTtcblxuICAgICAgICBpZiAodGhpcy50aXRsZSB8fCB0aGlzLmlzRGVzaWduTW9kZSgpKSB7XG4gICAgICAgICAgICBsZXQgbGFiZWwgPSBuZXcgVGV4dEJsb2NrKCk7XG4gICAgICAgICAgICBsYWJlbC5zZXRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICBsYWJlbC5mb3JFbGVtZW50SWQgPSB0aGlzLl9jaGVja2JveElucHV0RWxlbWVudC5pZDtcbiAgICAgICAgICAgIGxhYmVsLmhvc3RDb25maWcgPSB0aGlzLmhvc3RDb25maWc7XG4gICAgICAgICAgICBsYWJlbC50ZXh0ID0gIXRoaXMudGl0bGUgPyB0aGlzLmdldEpzb25UeXBlTmFtZSgpIDogdGhpcy50aXRsZTtcbiAgICAgICAgICAgIGxhYmVsLnVzZU1hcmtkb3duID0gR2xvYmFsU2V0dGluZ3MudXNlTWFya2Rvd25JblJhZGlvQnV0dG9uQW5kQ2hlY2tib3g7XG4gICAgICAgICAgICBsYWJlbC53cmFwID0gdGhpcy53cmFwO1xuXG4gICAgICAgICAgICB0aGlzLl9jaGVja2JveElucHV0TGFiZWxFbGVtZW50ID0gbGFiZWwucmVuZGVyKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9jaGVja2JveElucHV0TGFiZWxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tib3hJbnB1dExhYmVsRWxlbWVudC5pZCA9IFV0aWxzLmdlbmVyYXRlVW5pcXVlSWQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja2JveElucHV0TGFiZWxFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrYm94SW5wdXRMYWJlbEVsZW1lbnQuc3R5bGUuZmxleCA9IFwiMSAxIGF1dG9cIjtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja2JveElucHV0TGFiZWxFbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSBcIjZweFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrYm94SW5wdXRMYWJlbEVsZW1lbnQuc3R5bGUudmVydGljYWxBbGlnbiA9IFwibWlkZGxlXCI7XG5cbiAgICAgICAgICAgICAgICBsZXQgc3BhY2VyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgc3BhY2VyRWxlbWVudC5zdHlsZS53aWR0aCA9IFwiNnB4XCI7XG5cbiAgICAgICAgICAgICAgICBVdGlscy5hcHBlbmRDaGlsZChlbGVtZW50LCBzcGFjZXJFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBVdGlscy5hcHBlbmRDaGlsZChlbGVtZW50LCB0aGlzLl9jaGVja2JveElucHV0TGFiZWxFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgaXNOdWxsYWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGdldEpzb25UeXBlTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJJbnB1dC5Ub2dnbGVcIjtcbiAgICB9XG5cbiAgICBmb2N1cygpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NoZWNrYm94SW5wdXRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja2JveElucHV0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNTZXQoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVxdWlyZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSB0aGlzLnZhbHVlT247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKHRoaXMuX2NoZWNrYm94SW5wdXRFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tib3hJbnB1dEVsZW1lbnQuY2hlY2tlZCA/IHRoaXMudmFsdWVPbiA6IHRoaXMudmFsdWVPZmY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2hvaWNlIGV4dGVuZHMgU2VyaWFsaXphYmxlT2JqZWN0IHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgdGl0bGVQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcInRpdGxlXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSB2YWx1ZVByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwidmFsdWVcIik7XG5cbiAgICBAcHJvcGVydHkoQ2hvaWNlLnRpdGxlUHJvcGVydHkpXG4gICAgdGl0bGU/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoQ2hvaWNlLnZhbHVlUHJvcGVydHkpXG4gICAgdmFsdWU/OiBzdHJpbmc7XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByb3RlY3RlZCBnZXRTY2hlbWFLZXkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiQ2hvaWNlXCI7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IodGl0bGU/OiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2hvaWNlU2V0SW5wdXQgZXh0ZW5kcyBJbnB1dCB7XG4gICAgLy8jcmVnaW9uIFNjaGVtYVxuXG4gICAgc3RhdGljIHJlYWRvbmx5IHZhbHVlUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJ2YWx1ZVwiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgY2hvaWNlc1Byb3BlcnR5ID0gbmV3IFNlcmlhbGl6YWJsZU9iamVjdENvbGxlY3Rpb25Qcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcImNob2ljZXNcIiwgQ2hvaWNlKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgc3R5bGVQcm9wZXJ0eSA9IG5ldyBWYWx1ZVNldFByb3BlcnR5KFxuICAgICAgICBWZXJzaW9ucy52MV8wLFxuICAgICAgICBcInN0eWxlXCIsXG4gICAgICAgIFtcbiAgICAgICAgICAgIHsgdmFsdWU6IFwiY29tcGFjdFwiIH0sXG4gICAgICAgICAgICB7IHZhbHVlOiBcImV4cGFuZGVkXCIgfSxcbiAgICAgICAgICAgIHsgdmFsdWU6IFwiZmlsdGVyZWRcIiwgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbnMudjFfNSB9XG4gICAgICAgIF0sXG4gICAgICAgIFwiY29tcGFjdFwiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgaXNNdWx0aVNlbGVjdFByb3BlcnR5ID0gbmV3IEJvb2xQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcImlzTXVsdGlTZWxlY3RcIiwgZmFsc2UpO1xuICAgIHN0YXRpYyByZWFkb25seSBwbGFjZWhvbGRlclByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwicGxhY2Vob2xkZXJcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IHdyYXBQcm9wZXJ0eSA9IG5ldyBCb29sUHJvcGVydHkoVmVyc2lvbnMudjFfMiwgXCJ3cmFwXCIsIGZhbHNlKTtcblxuICAgIEBwcm9wZXJ0eShDaG9pY2VTZXRJbnB1dC52YWx1ZVByb3BlcnR5KVxuICAgIGRlZmF1bHRWYWx1ZT86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShDaG9pY2VTZXRJbnB1dC5zdHlsZVByb3BlcnR5KVxuICAgIHN0eWxlPzogXCJjb21wYWN0XCIgfCBcImV4cGFuZGVkXCIgfCBcImZpbHRlcmVkXCI7XG5cbiAgICBnZXQgaXNDb21wYWN0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuc3R5bGUgfHwgdGhpcy5zdHlsZSA9PT0gXCJjb21wYWN0XCI7XG4gICAgfVxuXG4gICAgc2V0IGlzQ29tcGFjdCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnN0eWxlID0gdmFsdWUgPyB1bmRlZmluZWQgOiBcImV4cGFuZGVkXCI7XG4gICAgfVxuXG4gICAgQHByb3BlcnR5KENob2ljZVNldElucHV0LmlzTXVsdGlTZWxlY3RQcm9wZXJ0eSlcbiAgICBpc011bHRpU2VsZWN0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBAcHJvcGVydHkoQ2hvaWNlU2V0SW5wdXQucGxhY2Vob2xkZXJQcm9wZXJ0eSlcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShDaG9pY2VTZXRJbnB1dC53cmFwUHJvcGVydHkpXG4gICAgd3JhcDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgQHByb3BlcnR5KENob2ljZVNldElucHV0LmNob2ljZXNQcm9wZXJ0eSlcbiAgICBjaG9pY2VzOiBDaG9pY2VbXSA9IFtdO1xuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICBwcml2YXRlIHN0YXRpYyB1bmlxdWVDYXRlZ29yeUNvdW50ZXIgPSAwO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0VW5pcXVlQ2F0ZWdvcnlOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIGxldCB1bmlxdWVDYXRlZ29yeU5hbWUgPSBcIl9fYWMtY2F0ZWdvcnlcIiArIENob2ljZVNldElucHV0LnVuaXF1ZUNhdGVnb3J5Q291bnRlcjtcblxuICAgICAgICBDaG9pY2VTZXRJbnB1dC51bmlxdWVDYXRlZ29yeUNvdW50ZXIrKztcblxuICAgICAgICByZXR1cm4gdW5pcXVlQ2F0ZWdvcnlOYW1lO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3VuaXF1ZUNhdGVnb3J5TmFtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgX3NlbGVjdEVsZW1lbnQ6IEhUTUxTZWxlY3RFbGVtZW50IHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgX3RleHRJbnB1dDogSFRNTElucHV0RWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIF90b2dnbGVJbnB1dHM6IEhUTUxJbnB1dEVsZW1lbnRbXSB8IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIF9sYWJlbHM6IEFycmF5PEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkPjtcblxuICAgIC8vIE1ha2Ugc3VyZSBgYXJpYS1jdXJyZW50YCBpcyBhcHBsaWVkIHRvIHRoZSBjdXJyZW50bHktc2VsZWN0ZWQgaXRlbVxuICAgIHByaXZhdGUgaW50ZXJuYWxBcHBseUFyaWFDdXJyZW50KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fc2VsZWN0RWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX3NlbGVjdEVsZW1lbnQub3B0aW9ucztcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNbaV0uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbaV0uc2V0QXR0cmlidXRlKFwiYXJpYS1jdXJyZW50XCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbaV0ucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1jdXJyZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJDb21wb3VuZElucHV0KGNzc0NsYXNzTmFtZTogc3RyaW5nLCB0eXBlOiBcImNoZWNrYm94XCIgfCBcInJhZGlvXCIsIGRlZmF1bHRWYWx1ZXM6IHN0cmluZ1tdIHwgdW5kZWZpbmVkKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gdGhpcy5ob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy1pbnB1dFwiLCBjc3NDbGFzc05hbWUpO1xuICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cbiAgICAgICAgdGhpcy5fdG9nZ2xlSW5wdXRzID0gW107XG4gICAgICAgIHRoaXMuX2xhYmVscyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGNob2ljZSBvZiB0aGlzLmNob2ljZXMpIHtcbiAgICAgICAgICAgIGxldCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgIGlucHV0LmlkID0gVXRpbHMuZ2VuZXJhdGVVbmlxdWVJZCgpO1xuICAgICAgICAgICAgaW5wdXQudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICBpbnB1dC5zdHlsZS5tYXJnaW4gPSBcIjBcIjtcbiAgICAgICAgICAgIGlucHV0LnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgICAgICAgICAgaW5wdXQuc3R5bGUudmVydGljYWxBbGlnbiA9IFwibWlkZGxlXCI7XG4gICAgICAgICAgICBpbnB1dC5zdHlsZS5mbGV4ID0gXCIwIDAgYXV0b1wiO1xuICAgICAgICAgICAgaW5wdXQubmFtZSA9IHRoaXMuaWQgPyB0aGlzLmlkIDogdGhpcy5fdW5pcXVlQ2F0ZWdvcnlOYW1lO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc1JlcXVpcmVkKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiYXJpYS1yZXF1aXJlZFwiLCBcInRydWVcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjaG9pY2UudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGNob2ljZS52YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNob2ljZS50aXRsZSkge1xuICAgICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgY2hvaWNlLnRpdGxlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRlZmF1bHRWYWx1ZXMgJiYgY2hvaWNlLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRWYWx1ZXMuaW5kZXhPZihjaG9pY2UudmFsdWUpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbnB1dC5vbmNoYW5nZSA9ICgpID0+IHsgdGhpcy52YWx1ZUNoYW5nZWQoKTsgfVxuXG4gICAgICAgICAgICB0aGlzLl90b2dnbGVJbnB1dHMucHVzaChpbnB1dCk7XG5cbiAgICAgICAgICAgIGxldCBjb21wb3VuZElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGNvbXBvdW5kSW5wdXQuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgICAgICAgICAgY29tcG91bmRJbnB1dC5zdHlsZS5hbGlnbkl0ZW1zID0gXCJjZW50ZXJcIjtcblxuICAgICAgICAgICAgVXRpbHMuYXBwZW5kQ2hpbGQoY29tcG91bmRJbnB1dCwgaW5wdXQpO1xuXG4gICAgICAgICAgICBsZXQgbGFiZWwgPSBuZXcgVGV4dEJsb2NrKCk7XG4gICAgICAgICAgICBsYWJlbC5zZXRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICBsYWJlbC5mb3JFbGVtZW50SWQgPSBpbnB1dC5pZDtcbiAgICAgICAgICAgIGxhYmVsLmhvc3RDb25maWcgPSB0aGlzLmhvc3RDb25maWc7XG4gICAgICAgICAgICBsYWJlbC50ZXh0ID0gY2hvaWNlLnRpdGxlID8gY2hvaWNlLnRpdGxlIDogXCJDaG9pY2UgXCIgKyB0aGlzLl90b2dnbGVJbnB1dHMubGVuZ3RoO1xuICAgICAgICAgICAgbGFiZWwudXNlTWFya2Rvd24gPSBHbG9iYWxTZXR0aW5ncy51c2VNYXJrZG93bkluUmFkaW9CdXR0b25BbmRDaGVja2JveDtcbiAgICAgICAgICAgIGxhYmVsLndyYXAgPSB0aGlzLndyYXA7XG5cbiAgICAgICAgICAgIGxldCBsYWJlbEVsZW1lbnQgPSBsYWJlbC5yZW5kZXIoKTtcblxuICAgICAgICAgICAgdGhpcy5fbGFiZWxzLnB1c2gobGFiZWxFbGVtZW50KTtcblxuICAgICAgICAgICAgaWYgKGxhYmVsRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGxhYmVsRWxlbWVudC5pZCA9IFV0aWxzLmdlbmVyYXRlVW5pcXVlSWQoKTtcbiAgICAgICAgICAgICAgICBsYWJlbEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG4gICAgICAgICAgICAgICAgbGFiZWxFbGVtZW50LnN0eWxlLmZsZXggPSBcIjEgMSBhdXRvXCI7XG4gICAgICAgICAgICAgICAgbGFiZWxFbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSBcIjZweFwiO1xuICAgICAgICAgICAgICAgIGxhYmVsRWxlbWVudC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gXCJtaWRkbGVcIjtcblxuICAgICAgICAgICAgICAgIGxldCBzcGFjZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICBzcGFjZXJFbGVtZW50LnN0eWxlLndpZHRoID0gXCI2cHhcIjtcblxuICAgICAgICAgICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKGNvbXBvdW5kSW5wdXQsIHNwYWNlckVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKGNvbXBvdW5kSW5wdXQsIGxhYmVsRWxlbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKGVsZW1lbnQsIGNvbXBvdW5kSW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZUlucHV0Q29udHJvbEFyaWFMYWJlbGxlZEJ5KCkge1xuICAgICAgICBpZiAoKHRoaXMuaXNNdWx0aVNlbGVjdCB8fCB0aGlzLnN0eWxlID09PSBcImV4cGFuZGVkXCIpICYmIHRoaXMuX3RvZ2dsZUlucHV0cyAmJiB0aGlzLl9sYWJlbHMpIHtcbiAgICAgICAgICAgIGxldCBsYWJlbElkczogc3RyaW5nW10gPSB0aGlzLmdldEFsbExhYmVsSWRzKCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdG9nZ2xlSW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGpvaW5lZExhYmVsSWRzID0gbGFiZWxJZHMuam9pbihcIiBcIik7XG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsID0gdGhpcy5fbGFiZWxzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxhYmVsICYmIGxhYmVsLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW5lZExhYmVsSWRzICs9IFwiIFwiICsgbGFiZWwuaWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGpvaW5lZExhYmVsSWRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RvZ2dsZUlucHV0c1tpXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsbGVkYnlcIiwgam9pbmVkTGFiZWxJZHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdG9nZ2xlSW5wdXRzW2ldLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtbGFiZWxsZWRieVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdXBlci51cGRhdGVJbnB1dENvbnRyb2xBcmlhTGFiZWxsZWRCeSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUmVuZGVyKCk6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgdGhpcy5fdW5pcXVlQ2F0ZWdvcnlOYW1lID0gQ2hvaWNlU2V0SW5wdXQuZ2V0VW5pcXVlQ2F0ZWdvcnlOYW1lKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNNdWx0aVNlbGVjdCkge1xuICAgICAgICAgICAgLy8gUmVuZGVyIGFzIGEgbGlzdCBvZiB0b2dnbGUgaW5wdXRzXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJDb21wb3VuZElucHV0KFxuICAgICAgICAgICAgICAgIFwiYWMtY2hvaWNlU2V0SW5wdXQtbXVsdGlTZWxlY3RcIixcbiAgICAgICAgICAgICAgICBcImNoZWNrYm94XCIsXG4gICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPyB0aGlzLmRlZmF1bHRWYWx1ZS5zcGxpdCh0aGlzLmhvc3RDb25maWcuY2hvaWNlU2V0SW5wdXRWYWx1ZVNlcGFyYXRvcikgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3R5bGUgPT09IFwiZXhwYW5kZWRcIikge1xuICAgICAgICAgICAgICAgIC8vIFJlbmRlciBhcyBhIHNlcmllcyBvZiByYWRpbyBidXR0b25zXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyQ29tcG91bmRJbnB1dChcbiAgICAgICAgICAgICAgICAgICAgXCJhYy1jaG9pY2VTZXRJbnB1dC1leHBhbmRlZFwiLFxuICAgICAgICAgICAgICAgICAgICBcInJhZGlvXCIsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID8gWyB0aGlzLmRlZmF1bHRWYWx1ZSBdIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc3R5bGUgPT09IFwiZmlsdGVyZWRcIikge1xuICAgICAgICAgICAgICAgIC8vIFJlbmRlciBhcyBhIHRleHQgaW5wdXQgY291cGxlZCB3aXRoIGEgZGF0YWxpc3RcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIGlucHV0Q29udGFpbmVyLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dElucHV0LmNsYXNzTmFtZSA9IHRoaXMuaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiYWMtaW5wdXRcIiwgXCJhYy1tdWx0aWNob2ljZUlucHV0XCIsIFwiYWMtY2hvaWNlU2V0SW5wdXQtZmlsdGVyZWRcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dElucHV0LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0SW5wdXQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0SW5wdXQub25pbnB1dCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZUNoYW5nZWQoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGV4dElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYXJpYS1sYWJlbCB3aGVuIHZhbHVlIGlzIG5vdCBlbXB0eSBzbyBuYXJyYXRpb24gc29mdHdhcmUgZG9lc24ndFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVhZCB0aGUgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGV4dElucHV0LnJlbW92ZUF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHRJbnB1dC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5wbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHRJbnB1dC5wbGFjZWhvbGRlciA9IHRoaXMucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGV4dElucHV0LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdGhpcy5wbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGV4dElucHV0LnZhbHVlID0gdGhpcy5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGxhY2Vob2xkZXIgJiYgIXRoaXMuX3RleHRJbnB1dC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0SW5wdXQucGxhY2Vob2xkZXIgPSB0aGlzLnBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0SW5wdXQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgZGF0YUxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGF0YWxpc3RcIik7XG4gICAgICAgICAgICAgICAgZGF0YUxpc3QuaWQgPSBVdGlscy5nZW5lcmF0ZVVuaXF1ZUlkKCk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaG9pY2Ugb2YgdGhpcy5jaG9pY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUbyBmaXggaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjk4ODIzNjEvc2hvdy1kYXRhbGlzdC1sYWJlbHMtYnV0LXN1Ym1pdC10aGUtYWN0dWFsLXZhbHVlXG4gICAgICAgICAgICAgICAgICAgIC8vIHZhbHVlIGlzIG1hcHBlZCB0byBjaG9pY2UudGl0bGUgb3RoZXIgdGhhbiBjaG9pY2UudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0gPHN0cmluZz5jaG9pY2UudGl0bGU7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIDxzdHJpbmc+Y2hvaWNlLnRpdGxlKTtcblxuICAgICAgICAgICAgICAgICAgICBkYXRhTGlzdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX3RleHRJbnB1dC5zZXRBdHRyaWJ1dGUoXCJsaXN0XCIsIGRhdGFMaXN0LmlkKTtcblxuICAgICAgICAgICAgICAgIGlucHV0Q29udGFpbmVyLmFwcGVuZCh0aGlzLl90ZXh0SW5wdXQsIGRhdGFMaXN0KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dENvbnRhaW5lcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFJlbmRlciBhcyBhIGNvbWJvIGJveFxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdEVsZW1lbnQuY2xhc3NOYW1lID0gdGhpcy5ob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy1pbnB1dFwiLCBcImFjLW11bHRpY2hvaWNlSW5wdXRcIiwgXCJhYy1jaG9pY2VTZXRJbnB1dC1jb21wYWN0XCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdEVsZW1lbnQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblxuICAgICAgICAgICAgICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgb3B0aW9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBvcHRpb24uaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBvcHRpb24udmFsdWUgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnRleHQgPSB0aGlzLnBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKHRoaXMuX3NlbGVjdEVsZW1lbnQsIG9wdGlvbik7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaG9pY2Ugb2YgdGhpcy5jaG9pY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb24udmFsdWUgPSA8c3RyaW5nPmNob2ljZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnRleHQgPSA8c3RyaW5nPmNob2ljZS50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgPHN0cmluZz5jaG9pY2UudGl0bGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaG9pY2UudmFsdWUgPT0gdGhpcy5kZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBVdGlscy5hcHBlbmRDaGlsZCh0aGlzLl9zZWxlY3RFbGVtZW50LCBvcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdEVsZW1lbnQub25jaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxBcHBseUFyaWFDdXJyZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hbEFwcGx5QXJpYUN1cnJlbnQoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RFbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0SnNvblR5cGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIklucHV0LkNob2ljZVNldFwiO1xuICAgIH1cblxuICAgIGZvY3VzKCkge1xuICAgICAgICBpZiAodGhpcy5fdG9nZ2xlSW5wdXRzICYmICh0aGlzLmlzTXVsdGlTZWxlY3QgfHwgdGhpcy5zdHlsZSA9PT0gXCJleHBhbmRlZFwiKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3RvZ2dsZUlucHV0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG9nZ2xlSW5wdXRzWzBdLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fdGV4dElucHV0KSB7XG4gICAgICAgICAgICB0aGlzLl90ZXh0SW5wdXQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0OiBWYWxpZGF0aW9uUmVzdWx0cykge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0KTtcblxuICAgICAgICBpZiAodGhpcy5jaG9pY2VzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBjb250ZXh0LmFkZEZhaWx1cmUoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuQ29sbGVjdGlvbkNhbnRCZUVtcHR5LFxuICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLmNob2ljZVNldE11c3RIYXZlQXRMZWFzdE9uZUNob2ljZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGNob2ljZSBvZiB0aGlzLmNob2ljZXMpIHtcbiAgICAgICAgICAgIGlmICghY2hvaWNlLnRpdGxlIHx8ICFjaG9pY2UudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmFkZEZhaWx1cmUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5Qcm9wZXJ0eUNhbnRCZU51bGwsXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLmNob2ljZVNldENob2ljZXNNdXN0SGF2ZVRpdGxlQW5kVmFsdWUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1NldCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaXNWYWxpZCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuX3RleHRJbnB1dCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IFwiXCIgfHwgdGhpcy52YWx1ZSA9PT0gdGhpcy5wbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgY2hvaWNlIG9mIHRoaXMuY2hvaWNlcykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlID09PSBjaG9pY2UudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3VwZXIuaXNWYWxpZCgpO1xuICAgIH1cblxuICAgIGdldCB2YWx1ZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAoIXRoaXMuaXNNdWx0aVNlbGVjdCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NlbGVjdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0RWxlbWVudC5zZWxlY3RlZEluZGV4ID4gMCA/IHRoaXMuX3NlbGVjdEVsZW1lbnQudmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl90ZXh0SW5wdXQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaG9pY2Ugb2YgdGhpcy5jaG9pY2VzKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNob2ljZS50aXRsZSAmJiB0aGlzLl90ZXh0SW5wdXQudmFsdWUgPT09IGNob2ljZS50aXRsZSlcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNob2ljZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dElucHV0LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fdG9nZ2xlSW5wdXRzICYmIHRoaXMuX3RvZ2dsZUlucHV0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdG9nZ2xlSW5wdXQgb2YgdGhpcy5fdG9nZ2xlSW5wdXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2dnbGVJbnB1dC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9nZ2xlSW5wdXQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3RvZ2dsZUlucHV0cyB8fCB0aGlzLl90b2dnbGVJbnB1dHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgcmVzdWx0OiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgICAgICAgICBmb3IgKGxldCB0b2dnbGVJbnB1dCBvZiB0aGlzLl90b2dnbGVJbnB1dHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9nZ2xlSW5wdXQuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLmhvc3RDb25maWcuY2hvaWNlU2V0SW5wdXRWYWx1ZVNlcGFyYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB0b2dnbGVJbnB1dC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgPyByZXN1bHQgOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOdW1iZXJJbnB1dCBleHRlbmRzIElucHV0IHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgdmFsdWVQcm9wZXJ0eSA9IG5ldyBOdW1Qcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcInZhbHVlXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBwbGFjZWhvbGRlclByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwicGxhY2Vob2xkZXJcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IG1pblByb3BlcnR5ID0gbmV3IE51bVByb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwibWluXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBtYXhQcm9wZXJ0eSA9IG5ldyBOdW1Qcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcIm1heFwiKTtcblxuICAgIEBwcm9wZXJ0eShOdW1iZXJJbnB1dC52YWx1ZVByb3BlcnR5KVxuICAgIGRlZmF1bHRWYWx1ZT86IG51bWJlcjtcblxuICAgIEBwcm9wZXJ0eShOdW1iZXJJbnB1dC5taW5Qcm9wZXJ0eSlcbiAgICBtaW4/OiBudW1iZXI7XG5cbiAgICBAcHJvcGVydHkoTnVtYmVySW5wdXQubWF4UHJvcGVydHkpXG4gICAgbWF4PzogbnVtYmVyO1xuXG4gICAgQHByb3BlcnR5KE51bWJlcklucHV0LnBsYWNlaG9sZGVyUHJvcGVydHkpXG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByaXZhdGUgX251bWJlcklucHV0RWxlbWVudDogSFRNTElucHV0RWxlbWVudDtcblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFJlbmRlcigpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHRoaXMuX251bWJlcklucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgdGhpcy5fbnVtYmVySW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJudW1iZXJcIik7XG5cbiAgICAgICAgaWYgKHRoaXMubWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX251bWJlcklucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtaW5cIiwgdGhpcy5taW4udG9TdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tYXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fbnVtYmVySW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1heFwiLCB0aGlzLm1heC50b1N0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX251bWJlcklucHV0RWxlbWVudC5jbGFzc05hbWUgPSB0aGlzLmhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLWlucHV0XCIsIFwiYWMtbnVtYmVySW5wdXRcIik7XG4gICAgICAgIHRoaXMuX251bWJlcklucHV0RWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICB0aGlzLl9udW1iZXJJbnB1dEVsZW1lbnQudGFiSW5kZXggPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9udW1iZXJJbnB1dEVsZW1lbnQudmFsdWVBc051bWJlciA9IHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX251bWJlcklucHV0RWxlbWVudC5wbGFjZWhvbGRlciA9IHRoaXMucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICB0aGlzLl9udW1iZXJJbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX251bWJlcklucHV0RWxlbWVudC5vbmlucHV0ID0gKCkgPT4geyB0aGlzLnZhbHVlQ2hhbmdlZCgpOyB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX251bWJlcklucHV0RWxlbWVudDtcbiAgICB9XG5cbiAgICBnZXRKc29uVHlwZU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiSW5wdXQuTnVtYmVyXCI7XG4gICAgfVxuXG4gICAgaXNTZXQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWlzTmFOKHRoaXMudmFsdWUpO1xuICAgIH1cblxuICAgIGlzVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc1JlcXVpcmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRoaXMubWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAmJiAodGhpcy52YWx1ZSA+PSB0aGlzLm1pbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tYXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICYmICh0aGlzLnZhbHVlIDw9IHRoaXMubWF4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9udW1iZXJJbnB1dEVsZW1lbnQgPyB0aGlzLl9udW1iZXJJbnB1dEVsZW1lbnQudmFsdWVBc051bWJlciA6IHVuZGVmaW5lZDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRlSW5wdXQgZXh0ZW5kcyBJbnB1dCB7XG4gICAgLy8jcmVnaW9uIFNjaGVtYVxuXG4gICAgc3RhdGljIHJlYWRvbmx5IHZhbHVlUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJ2YWx1ZVwiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgcGxhY2Vob2xkZXJQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcInBsYWNlaG9sZGVyXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBtaW5Qcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcIm1pblwiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgbWF4UHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJtYXhcIik7XG5cbiAgICBAcHJvcGVydHkoRGF0ZUlucHV0LnZhbHVlUHJvcGVydHkpXG4gICAgZGVmYXVsdFZhbHVlPzogc3RyaW5nO1xuXG4gICAgQHByb3BlcnR5KERhdGVJbnB1dC5taW5Qcm9wZXJ0eSlcbiAgICBtaW4/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoRGF0ZUlucHV0Lm1heFByb3BlcnR5KVxuICAgIG1heD86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShEYXRlSW5wdXQucGxhY2Vob2xkZXJQcm9wZXJ0eSlcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgcHJpdmF0ZSBfZGF0ZUlucHV0RWxlbWVudDogSFRNTElucHV0RWxlbWVudDtcblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFJlbmRlcigpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHRoaXMuX2RhdGVJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIHRoaXMuX2RhdGVJbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImRhdGVcIik7XG5cbiAgICAgICAgaWYgKHRoaXMubWluKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRlSW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1pblwiLCB0aGlzLm1pbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tYXgpIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGVJbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWF4XCIsIHRoaXMubWF4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRlSW5wdXRFbGVtZW50LnBsYWNlaG9sZGVyID0gdGhpcy5wbGFjZWhvbGRlcjtcbiAgICAgICAgICAgIHRoaXMuX2RhdGVJbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RhdGVJbnB1dEVsZW1lbnQuY2xhc3NOYW1lID0gdGhpcy5ob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy1pbnB1dFwiLCBcImFjLWRhdGVJbnB1dFwiKTtcbiAgICAgICAgdGhpcy5fZGF0ZUlucHV0RWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXG4gICAgICAgIHRoaXMuX2RhdGVJbnB1dEVsZW1lbnQub25pbnB1dCA9ICgpID0+IHsgdGhpcy52YWx1ZUNoYW5nZWQoKTsgfVxuXG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fZGF0ZUlucHV0RWxlbWVudC52YWx1ZSA9IHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGVJbnB1dEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZ2V0SnNvblR5cGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIklucHV0LkRhdGVcIjtcbiAgICB9XG5cbiAgICBpc1NldCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaXNWYWxpZCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNSZXF1aXJlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2YWx1ZUFzRGF0ZSA9IG5ldyBEYXRlKHRoaXMudmFsdWUpO1xuXG4gICAgICAgIGxldCByZXN1bHQgPSB0cnVlO1xuXG4gICAgICAgIGlmICh0aGlzLm1pbikge1xuICAgICAgICAgICAgbGV0IG1pbkRhdGUgPSBuZXcgRGF0ZSh0aGlzLm1pbik7XG5cbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAmJiAodmFsdWVBc0RhdGUgPj0gbWluRGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tYXgpIHtcbiAgICAgICAgICAgIGxldCBtYXhEYXRlID0gbmV3IERhdGUodGhpcy5tYXgpO1xuXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgJiYgKHZhbHVlQXNEYXRlIDw9IG1heERhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGVJbnB1dEVsZW1lbnQgPyB0aGlzLl9kYXRlSW5wdXRFbGVtZW50LnZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVQcm9wZXJ0eSBleHRlbmRzIEN1c3RvbVByb3BlcnR5PHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHRhcmdldFZlcnNpb246IFZlcnNpb24sIHJlYWRvbmx5IG5hbWU6IHN0cmluZykge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIHRhcmdldFZlcnNpb24sXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCBwcm9wZXJ0eTogUHJvcGVydHlEZWZpbml0aW9uLCBzb3VyY2U6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBzb3VyY2VbcHJvcGVydHkubmFtZV07XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICYmIC9eWzAtOV17Mn06WzAtOV17Mn0kLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QsIHByb3BlcnR5OiBQcm9wZXJ0eURlZmluaXRpb24sIHRhcmdldDogUHJvcGVydHlCYWcsIHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc2VyaWFsaXplVmFsdWUodGFyZ2V0LCBwcm9wZXJ0eS5uYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUaW1lSW5wdXQgZXh0ZW5kcyBJbnB1dCB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgY29udmVydFRpbWVTdHJpbmdUb0RhdGUodGltZVN0cmluZzogc3RyaW5nKTogRGF0ZSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShcIjE5NzMtMDktMDRUXCIgKyB0aW1lU3RyaW5nICsgXCI6MDBaXCIpO1xuICAgIH1cblxuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSB2YWx1ZVByb3BlcnR5ID0gbmV3IFRpbWVQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcInZhbHVlXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBwbGFjZWhvbGRlclByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwicGxhY2Vob2xkZXJcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IG1pblByb3BlcnR5ID0gbmV3IFRpbWVQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcIm1pblwiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgbWF4UHJvcGVydHkgPSBuZXcgVGltZVByb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwibWF4XCIpO1xuXG4gICAgQHByb3BlcnR5KFRpbWVJbnB1dC52YWx1ZVByb3BlcnR5KVxuICAgIGRlZmF1bHRWYWx1ZT86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShUaW1lSW5wdXQubWluUHJvcGVydHkpXG4gICAgbWluPzogc3RyaW5nO1xuXG4gICAgQHByb3BlcnR5KFRpbWVJbnB1dC5tYXhQcm9wZXJ0eSlcbiAgICBtYXg/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoVGltZUlucHV0LnBsYWNlaG9sZGVyUHJvcGVydHkpXG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByaXZhdGUgX3RpbWVJbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxSZW5kZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICB0aGlzLl90aW1lSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICB0aGlzLl90aW1lSW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0aW1lXCIpO1xuICAgICAgICB0aGlzLl90aW1lSW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1pblwiLCA8c3RyaW5nPnRoaXMubWluKTtcbiAgICAgICAgdGhpcy5fdGltZUlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtYXhcIiwgPHN0cmluZz50aGlzLm1heCk7XG4gICAgICAgIHRoaXMuX3RpbWVJbnB1dEVsZW1lbnQuY2xhc3NOYW1lID0gdGhpcy5ob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy1pbnB1dFwiLCBcImFjLXRpbWVJbnB1dFwiKTtcbiAgICAgICAgdGhpcy5fdGltZUlucHV0RWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICB0aGlzLl90aW1lSW5wdXRFbGVtZW50Lm9uaW5wdXQgPSAoKSA9PiB7IHRoaXMudmFsdWVDaGFuZ2VkKCk7IH1cblxuICAgICAgICBpZiAodGhpcy5wbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgdGhpcy5fdGltZUlucHV0RWxlbWVudC5wbGFjZWhvbGRlciA9IHRoaXMucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICB0aGlzLl90aW1lSW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdGhpcy5wbGFjZWhvbGRlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5kZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVJbnB1dEVsZW1lbnQudmFsdWUgPSB0aGlzLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl90aW1lSW5wdXRFbGVtZW50O1xuICAgIH1cblxuICAgIGdldEpzb25UeXBlTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJJbnB1dC5UaW1lXCI7XG4gICAgfVxuXG4gICAgaXNTZXQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlzVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghdGhpcy52YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLmlzUmVxdWlyZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdmFsdWVBc0RhdGUgPSBUaW1lSW5wdXQuY29udmVydFRpbWVTdHJpbmdUb0RhdGUodGhpcy52YWx1ZSk7XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRoaXMubWluKSB7XG4gICAgICAgICAgICBsZXQgbWluRGF0ZSA9IFRpbWVJbnB1dC5jb252ZXJ0VGltZVN0cmluZ1RvRGF0ZSh0aGlzLm1pbik7XG5cbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAmJiAodmFsdWVBc0RhdGUgPj0gbWluRGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tYXgpIHtcbiAgICAgICAgICAgIGxldCBtYXhEYXRlID0gVGltZUlucHV0LmNvbnZlcnRUaW1lU3RyaW5nVG9EYXRlKHRoaXMubWF4KTtcblxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICYmICh2YWx1ZUFzRGF0ZSA8PSBtYXhEYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl90aW1lSW5wdXRFbGVtZW50ID8gdGhpcy5fdGltZUlucHV0RWxlbWVudC52YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIEFjdGlvbkJ1dHRvblN0YXRlIHtcbiAgICBOb3JtYWwsXG4gICAgRXhwYW5kZWQsXG4gICAgU3ViZHVlZFxufVxuXG5leHBvcnQgdHlwZSBBY3Rpb25UeXBlID0geyBuZXcoKTogQWN0aW9uIH07XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBY3Rpb24gZXh0ZW5kcyBDYXJkT2JqZWN0IHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgdGl0bGVQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcInRpdGxlXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBpY29uVXJsUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfMSwgXCJpY29uVXJsXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBzdHlsZVByb3BlcnR5ID0gbmV3IFZhbHVlU2V0UHJvcGVydHkoXG4gICAgICAgIFZlcnNpb25zLnYxXzIsXG4gICAgICAgIFwic3R5bGVcIixcbiAgICAgICAgW1xuICAgICAgICAgICAgeyB2YWx1ZTogRW51bXMuQWN0aW9uU3R5bGUuRGVmYXVsdCB9LFxuICAgICAgICAgICAgeyB2YWx1ZTogRW51bXMuQWN0aW9uU3R5bGUuUG9zaXRpdmUgfSxcbiAgICAgICAgICAgIHsgdmFsdWU6IEVudW1zLkFjdGlvblN0eWxlLkRlc3RydWN0aXZlIH1cbiAgICAgICAgXSxcbiAgICAgICAgRW51bXMuQWN0aW9uU3R5bGUuRGVmYXVsdCk7XG4gICAgc3RhdGljIHJlYWRvbmx5IG1vZGVQcm9wZXJ0eSA9IG5ldyBWYWx1ZVNldFByb3BlcnR5KFxuICAgICAgICBWZXJzaW9ucy52MV81LFxuICAgICAgICBcIm1vZGVcIixcbiAgICAgICAgW1xuICAgICAgICAgICAgeyB2YWx1ZTogRW51bXMuQWN0aW9uTW9kZS5QcmltYXJ5IH0sXG4gICAgICAgICAgICB7IHZhbHVlOiBFbnVtcy5BY3Rpb25Nb2RlLlNlY29uZGFyeSB9XG4gICAgICAgIF0sXG4gICAgICAgIEVudW1zLkFjdGlvbk1vZGUuUHJpbWFyeSk7XG4gICAgc3RhdGljIHJlYWRvbmx5IHRvb2x0aXBQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV81LCBcInRvb2x0aXBcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IGlzRW5hYmxlZFByb3BlcnR5ID0gbmV3IEJvb2xQcm9wZXJ0eShWZXJzaW9ucy52MV81LCBcImlzRW5hYmxlZFwiLCB0cnVlKTtcblxuICAgIEBwcm9wZXJ0eShBY3Rpb24udGl0bGVQcm9wZXJ0eSlcbiAgICB0aXRsZT86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShBY3Rpb24uaWNvblVybFByb3BlcnR5KVxuICAgIGljb25Vcmw/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoQWN0aW9uLnN0eWxlUHJvcGVydHkpXG4gICAgc3R5bGU6IHN0cmluZyA9IEVudW1zLkFjdGlvblN0eWxlLkRlZmF1bHQ7XG5cbiAgICBAcHJvcGVydHkoQWN0aW9uLm1vZGVQcm9wZXJ0eSlcbiAgICBtb2RlOiBzdHJpbmcgPSBFbnVtcy5BY3Rpb25Nb2RlLlByaW1hcnk7XG5cbiAgICBAcHJvcGVydHkoQWN0aW9uLnRvb2x0aXBQcm9wZXJ0eSlcbiAgICB0b29sdGlwPzogc3RyaW5nO1xuXG4gICAgQHByb3BlcnR5KEFjdGlvbi5pc0VuYWJsZWRQcm9wZXJ0eSlcbiAgICBpc0VuYWJsZWQ6IGJvb2xlYW47XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByaXZhdGUgcmVuZGVyQnV0dG9uQ29udGVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZWRFbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBDYWNoZSBob3N0Q29uZmlnIGZvciBwZXJmXG4gICAgICAgICAgICBsZXQgaG9zdENvbmZpZyA9IHRoaXMuaG9zdENvbmZpZztcblxuICAgICAgICAgICAgbGV0IHRpdGxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB0aXRsZUVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgICAgICAgICAgdGl0bGVFbGVtZW50LnN0eWxlLnRleHRPdmVyZmxvdyA9IFwiZWxsaXBzaXNcIjtcblxuICAgICAgICAgICAgaWYgKCEoaG9zdENvbmZpZy5hY3Rpb25zLmljb25QbGFjZW1lbnQgPT0gRW51bXMuQWN0aW9uSWNvblBsYWNlbWVudC5BYm92ZVRpdGxlIHx8IGhvc3RDb25maWcuYWN0aW9ucy5hbGxvd1RpdGxlVG9XcmFwKSkge1xuICAgICAgICAgICAgICAgIHRpdGxlRWxlbWVudC5zdHlsZS53aGl0ZVNwYWNlID0gXCJub3dyYXBcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMudGl0bGUpIHtcbiAgICAgICAgICAgICAgICB0aXRsZUVsZW1lbnQuaW5uZXJUZXh0ID0gdGhpcy50aXRsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLmljb25VcmwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibm9JY29uXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LmFwcGVuZENoaWxkKHRpdGxlRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgaWNvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICAgICAgICAgIGljb25FbGVtZW50LnNyYyA9IHRoaXMuaWNvblVybDtcbiAgICAgICAgICAgICAgICBpY29uRWxlbWVudC5zdHlsZS53aWR0aCA9IGhvc3RDb25maWcuYWN0aW9ucy5pY29uU2l6ZSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICBpY29uRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBob3N0Q29uZmlnLmFjdGlvbnMuaWNvblNpemUgKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgaWNvbkVsZW1lbnQuc3R5bGUuZmxleCA9IFwiMCAwIGF1dG9cIjtcblxuICAgICAgICAgICAgICAgIGlmIChob3N0Q29uZmlnLmFjdGlvbnMuaWNvblBsYWNlbWVudCA9PSBFbnVtcy5BY3Rpb25JY29uUGxhY2VtZW50LkFib3ZlVGl0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImljb25BYm92ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuc3R5bGUuZmxleERpcmVjdGlvbiA9IFwiY29sdW1uXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGl0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25FbGVtZW50LnN0eWxlLm1hcmdpbkJvdHRvbSA9IFwiNnB4XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJpY29uTGVmdFwiKTtcblxuICAgICAgICAgICAgICAgICAgICBpY29uRWxlbWVudC5zdHlsZS5tYXhIZWlnaHQgPSBcIjEwMCVcIjtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50aXRsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbkVsZW1lbnQuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjZweFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuYXBwZW5kQ2hpbGQoaWNvbkVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LmFwcGVuZENoaWxkKHRpdGxlRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBhcmVudENvbnRhaW5lcigpOiBDb250YWluZXIgfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgaW5zdGFuY2VvZiBDb250YWluZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LmdldFBhcmVudENvbnRhaW5lcigpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3N0YXRlOiBBY3Rpb25CdXR0b25TdGF0ZSA9IEFjdGlvbkJ1dHRvblN0YXRlLk5vcm1hbDtcbiAgICBwcml2YXRlIF9hY3Rpb25Db2xsZWN0aW9uPzogQWN0aW9uQ29sbGVjdGlvbjsgLy8gaG9sZCB0aGUgcmVmZXJlbmNlIHRvIGl0cyBhY3Rpb24gY29sbGVjdGlvblxuICAgIHByaXZhdGUgX2lzRm9jdXNhYmxlOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIHByb3RlY3RlZCB1cGRhdGVDc3NDbGFzc2VzKCkge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgJiYgdGhpcy5yZW5kZXJlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGxldCBob3N0Q29uZmlnID0gdGhpcy5wYXJlbnQuaG9zdENvbmZpZztcblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuY2xhc3NOYW1lID0gaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKHRoaXMuaXNFbmFibGVkID8gXCJhYy1wdXNoQnV0dG9uXCIgOiBcImFjLXB1c2hCdXR0b24tZGlzYWJsZWRcIik7XG5cbiAgICAgICAgICAgIGxldCBwYXJlbnRDb250YWluZXIgPSB0aGlzLmdldFBhcmVudENvbnRhaW5lcigpO1xuXG4gICAgICAgICAgICBpZiAocGFyZW50Q29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhcmVudENvbnRhaW5lclN0eWxlID0gcGFyZW50Q29udGFpbmVyLmdldEVmZmVjdGl2ZVN0eWxlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocGFyZW50Q29udGFpbmVyU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInN0eWxlLVwiICsgcGFyZW50Q29udGFpbmVyU3R5bGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQudGFiSW5kZXggPSB0aGlzLmlzRm9jdXNhYmxlID8gMCA6IC0xO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX3N0YXRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25CdXR0b25TdGF0ZS5FeHBhbmRlZDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJleHBhbmRlZFwiKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uQnV0dG9uU3RhdGUuU3ViZHVlZDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJzdWJkdWVkXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnN0eWxlICYmIHRoaXMuaXNFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3R5bGUgPT09IEVudW1zLkFjdGlvblN0eWxlLlBvc2l0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LmNsYXNzTGlzdC5hZGQoLi4uaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lcyhcInByaW1hcnlcIiwgXCJzdHlsZS1wb3NpdGl2ZVwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5jbGFzc0xpc3QuYWRkKC4uLmhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZXMoXCJzdHlsZS1cIiArIHRoaXMuc3R5bGUudG9Mb3dlckNhc2UoKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXREZWZhdWx0U2VyaWFsaXphdGlvbkNvbnRleHQoKTogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXJpYWxpemF0aW9uQ29udGV4dCgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbEdldFJlZmVyZW5jZWRJbnB1dHMoKTogRGljdGlvbmFyeTxJbnB1dD4ge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUHJlcGFyZUZvckV4ZWN1dGlvbihpbnB1dHM6IERpY3Rpb25hcnk8SW5wdXQ+IHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIERvIG5vdGhpbmcgaW4gYmFzZSBpbXBsZW1lbnRhdGlvblxuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFZhbGlkYXRlSW5wdXRzKHJlZmVyZW5jZWRJbnB1dHM6IERpY3Rpb25hcnk8SW5wdXQ+IHwgdW5kZWZpbmVkKTogSW5wdXRbXSB7XG4gICAgICAgIGxldCByZXN1bHQ6IElucHV0W10gPSBbXTtcblxuICAgICAgICBpZiAocmVmZXJlbmNlZElucHV0cykge1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKHJlZmVyZW5jZWRJbnB1dHMpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlucHV0ID0gcmVmZXJlbmNlZElucHV0c1trZXldO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFpbnB1dC52YWxpZGF0ZVZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaW5wdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNob3VsZFNlcmlhbGl6ZShjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gY29udGV4dC5hY3Rpb25SZWdpc3RyeS5maW5kQnlOYW1lKHRoaXMuZ2V0SnNvblR5cGVOYW1lKCkpICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJhaXNlRXhlY3V0ZUFjdGlvbkV2ZW50KCkge1xuICAgICAgICBpZiAodGhpcy5vbkV4ZWN1dGUpIHtcbiAgICAgICAgICAgIHRoaXMub25FeGVjdXRlKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmFpc2VFeGVjdXRlQWN0aW9uRXZlbnQodGhpcyk7XG4gICAgfVxuXG4gICAgb25FeGVjdXRlOiAoc2VuZGVyOiBBY3Rpb24pID0+IHZvaWQ7XG5cbiAgICBnZXRIcmVmKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIGdldEFyaWFSb2xlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcImJ1dHRvblwiO1xuICAgIH1cblxuICAgIHNldHVwRWxlbWVudEZvckFjY2Vzc2liaWxpdHkoZWxlbWVudDogSFRNTEVsZW1lbnQsIHByb21vdGVUb29sdGlwVG9MYWJlbDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIGVsZW1lbnQudGFiSW5kZXggPSB0aGlzLmlzRW5hYmxlZCA/IDAgOiAtMTtcblxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgdGhpcy5nZXRBcmlhUm9sZSgpKTtcblxuICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gIXRoaXMuaXNFbmFibGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZCkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRpc2FibGVkXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLmhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLXNlbGVjdGFibGVcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudGl0bGUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB0aGlzLnRpdGxlKTtcbiAgICAgICAgICAgIGVsZW1lbnQudGl0bGUgPSB0aGlzLnRpdGxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudG9vbHRpcCkge1xuICAgICAgICAgICAgbGV0IHRhcmdldEFyaWFBdHRyaWJ1dGUgPSBwcm9tb3RlVG9vbHRpcFRvTGFiZWwgPyAodGhpcy50aXRsZSA/IFwiYXJpYS1kZXNjcmlwdGlvblwiIDogXCJhcmlhLWxhYmVsXCIpIDogXCJhcmlhLWRlc2NyaXB0aW9uXCI7XG5cbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHRhcmdldEFyaWFBdHRyaWJ1dGUsIHRoaXMudG9vbHRpcCk7XG4gICAgICAgICAgICBlbGVtZW50LnRpdGxlID0gdGhpcy50b29sdGlwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyc2Uoc291cmNlOiBhbnksIGNvbnRleHQ/OiBTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gc3VwZXIucGFyc2Uoc291cmNlLCBjb250ZXh0ID8gY29udGV4dCA6IG5ldyBTZXJpYWxpemF0aW9uQ29udGV4dCgpKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCBidXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgYnV0dG9uRWxlbWVudC50eXBlID0gXCJidXR0b25cIjtcbiAgICAgICAgYnV0dG9uRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuc3R5bGUuYWxpZ25JdGVtcyA9IFwiY2VudGVyXCI7XG4gICAgICAgIGJ1dHRvbkVsZW1lbnQuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSBcImNlbnRlclwiO1xuICAgICAgICBidXR0b25FbGVtZW50Lm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuY2FuY2VsQnViYmxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZXhlY3V0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX3JlbmRlcmVkRWxlbWVudCA9IGJ1dHRvbkVsZW1lbnQ7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJCdXR0b25Db250ZW50KCk7XG4gICAgICAgIHRoaXMudXBkYXRlQ3NzQ2xhc3NlcygpO1xuICAgICAgICB0aGlzLnNldHVwRWxlbWVudEZvckFjY2Vzc2liaWxpdHkoYnV0dG9uRWxlbWVudCk7XG4gICAgfVxuXG4gICAgZXhlY3V0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGlvbkNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbkNvbGxlY3Rpb24uYWN0aW9uRXhlY3V0ZWQodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJhaXNlRXhlY3V0ZUFjdGlvbkV2ZW50KCk7XG4gICAgfVxuXG4gICAgcHJlcGFyZUZvckV4ZWN1dGlvbigpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHJlZmVyZW5jZWRJbnB1dHMgPSB0aGlzLmdldFJlZmVyZW5jZWRJbnB1dHMoKTtcbiAgICAgICAgbGV0IGludmFsaWRJbnB1dHMgPSB0aGlzLmludGVybmFsVmFsaWRhdGVJbnB1dHMocmVmZXJlbmNlZElucHV0cyk7XG5cbiAgICAgICAgaWYgKGludmFsaWRJbnB1dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaW52YWxpZElucHV0c1swXS5mb2N1cygpO1xuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmludGVybmFsUHJlcGFyZUZvckV4ZWN1dGlvbihyZWZlcmVuY2VkSW5wdXRzKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmVtb3ZlKCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5fYWN0aW9uQ29sbGVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGlvbkNvbGxlY3Rpb24ucmVtb3ZlQWN0aW9uKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGdldEFsbElucHV0cyhwcm9jZXNzQWN0aW9uczogYm9vbGVhbiA9IHRydWUpOiBJbnB1dFtdIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGdldFJlc291cmNlSW5mb3JtYXRpb24oKTogSVJlc291cmNlSW5mb3JtYXRpb25bXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmljb25VcmwgPyBbeyB1cmw6IHRoaXMuaWNvblVybCwgbWltZVR5cGU6IFwiaW1hZ2VcIiB9XSA6IFtdO1xuICAgIH1cblxuICAgIGdldEFjdGlvbkJ5SWQoaWQ6IHN0cmluZyk6IEFjdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkID09PSBpZCA/IHRoaXMgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZ2V0UmVmZXJlbmNlZElucHV0cygpOiBEaWN0aW9uYXJ5PElucHV0PiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsR2V0UmVmZXJlbmNlZElucHV0cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlcyB0aGUgaW5wdXRzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGFjdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiBpbnB1dHMgdGhhdCBmYWlsZWQgdmFsaWRhdGlvbiwgb3IgYW4gZW1wdHkgYXJyYXkgaWYgbm8gaW5wdXQgZmFpbGVkIHZhbGlkYXRpb24uXG4gICAgICovXG4gICAgdmFsaWRhdGVJbnB1dHMoKTogSW5wdXRbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsVmFsaWRhdGVJbnB1dHModGhpcy5nZXRSZWZlcmVuY2VkSW5wdXRzKCkpO1xuICAgIH1cblxuICAgIGdldCBpc1ByaW1hcnkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlID09IEVudW1zLkFjdGlvblN0eWxlLlBvc2l0aXZlO1xuICAgIH1cblxuICAgIHNldCBpc1ByaW1hcnkodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlID0gRW51bXMuQWN0aW9uU3R5bGUuUG9zaXRpdmU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdHlsZSA9PSBFbnVtcy5BY3Rpb25TdHlsZS5Qb3NpdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUgPSBFbnVtcy5BY3Rpb25TdHlsZS5EZWZhdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGhvc3RDb25maWcoKTogSG9zdENvbmZpZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50Lmhvc3RDb25maWcgOiBkZWZhdWx0SG9zdENvbmZpZztcbiAgICB9XG5cbiAgICBnZXQgcGFyZW50KCk6IENhcmRFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIDxDYXJkRWxlbWVudD50aGlzLl9wYXJlbnQ7XG4gICAgfVxuXG4gICAgZ2V0IHN0YXRlKCk6IEFjdGlvbkJ1dHRvblN0YXRlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlO1xuICAgIH1cblxuICAgIHNldCBzdGF0ZSh2YWx1ZTogQWN0aW9uQnV0dG9uU3RhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgdGhpcy51cGRhdGVDc3NDbGFzc2VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgaXNGb2N1c2FibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0ZvY3VzYWJsZTtcbiAgICB9XG5cbiAgICBzZXQgaXNGb2N1c2FibGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzRm9jdXNhYmxlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5faXNGb2N1c2FibGUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgdGhpcy51cGRhdGVDc3NDbGFzc2VzKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdWJtaXRBY3Rpb25CYXNlIGV4dGVuZHMgQWN0aW9uIHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgZGF0YVByb3BlcnR5ID0gbmV3IFByb3BlcnR5RGVmaW5pdGlvbihWZXJzaW9ucy52MV8wLCBcImRhdGFcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IGFzc29jaWF0ZWRJbnB1dHNQcm9wZXJ0eSA9IG5ldyBDdXN0b21Qcm9wZXJ0eShcbiAgICAgICAgVmVyc2lvbnMudjFfMyxcbiAgICAgICAgXCJhc3NvY2lhdGVkSW5wdXRzXCIsXG4gICAgICAgIChzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgcHJvcGVydHk6IFByb3BlcnR5RGVmaW5pdGlvbiwgc291cmNlOiBQcm9wZXJ0eUJhZywgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBzb3VyY2VbcHJvcGVydHkubmFtZV07XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBcIm5vbmVcIiA/IFwibm9uZVwiIDogXCJhdXRvXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIChzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgcHJvcGVydHk6IFByb3BlcnR5RGVmaW5pdGlvbiwgdGFyZ2V0OiBQcm9wZXJ0eUJhZywgdmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCwgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgICBjb250ZXh0LnNlcmlhbGl6ZVZhbHVlKHRhcmdldCwgcHJvcGVydHkubmFtZSwgdmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgIEBwcm9wZXJ0eShTdWJtaXRBY3Rpb25CYXNlLmRhdGFQcm9wZXJ0eSlcbiAgICBwcml2YXRlIF9vcmlnaW5hbERhdGE/OiBQcm9wZXJ0eUJhZztcblxuICAgIEBwcm9wZXJ0eShTdWJtaXRBY3Rpb25CYXNlLmFzc29jaWF0ZWRJbnB1dHNQcm9wZXJ0eSlcbiAgICBhc3NvY2lhdGVkSW5wdXRzPzogXCJhdXRvXCIgfCBcIm5vbmVcIjtcblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgcHJpdmF0ZSBfaXNQcmVwYXJlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgX3Byb2Nlc3NlZERhdGE/OiBQcm9wZXJ0eUJhZztcblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbEdldFJlZmVyZW5jZWRJbnB1dHMoKTogRGljdGlvbmFyeTxJbnB1dD4ge1xuICAgICAgICBsZXQgcmVzdWx0OiBEaWN0aW9uYXJ5PElucHV0PiA9IHt9O1xuXG4gICAgICAgIGlmICh0aGlzLmFzc29jaWF0ZWRJbnB1dHMgIT09IFwibm9uZVwiKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudDogQ2FyZEVsZW1lbnQgfCB1bmRlZmluZWQgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgICAgIGxldCBpbnB1dHM6IElucHV0W10gPSBbXTtcblxuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBpbnB1dHMgPSBpbnB1dHMuY29uY2F0KGN1cnJlbnQuZ2V0QWxsSW5wdXRzKGZhbHNlKSk7XG5cbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGlucHV0IG9mIGlucHV0cykge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pZCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbaW5wdXQuaWRdID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxQcmVwYXJlRm9yRXhlY3V0aW9uKGlucHV0czogRGljdGlvbmFyeTxJbnB1dD4gfCB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuX29yaWdpbmFsRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc2VkRGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5fb3JpZ2luYWxEYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzZWREYXRhID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fcHJvY2Vzc2VkRGF0YSAmJiBpbnB1dHMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhpbnB1dHMpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlucHV0ID0gaW5wdXRzW2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaWQgJiYgaW5wdXQuaXNTZXQoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9jZXNzZWREYXRhW2lucHV0LmlkXSA9IHR5cGVvZiBpbnB1dC52YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IGlucHV0LnZhbHVlIDogaW5wdXQudmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pc1ByZXBhcmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgZGF0YSgpOiBvYmplY3QgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNQcmVwYXJlZCA/IHRoaXMuX3Byb2Nlc3NlZERhdGEgOiB0aGlzLl9vcmlnaW5hbERhdGE7XG4gICAgfVxuXG4gICAgc2V0IGRhdGEodmFsdWU6IG9iamVjdCB8IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9vcmlnaW5hbERhdGEgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5faXNQcmVwYXJlZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN1Ym1pdEFjdGlvbiBleHRlbmRzIFN1Ym1pdEFjdGlvbkJhc2Uge1xuICAgIC8vIE5vdGUgdGhlIFwid2VpcmRcIiB3YXkgdGhpcyBmaWVsZCBpcyBkZWNsYXJlZCBpcyB0byB3b3JrIGFyb3VuZCBhIGJyZWFraW5nXG4gICAgLy8gY2hhbmdlIGludHJvZHVjZWQgaW4gVFMgMy4xIHdydCBkLnRzIGdlbmVyYXRpb24uIERPIE5PVCBDSEFOR0VcbiAgICBzdGF0aWMgcmVhZG9ubHkgSnNvblR5cGVOYW1lOiBcIkFjdGlvbi5TdWJtaXRcIiA9IFwiQWN0aW9uLlN1Ym1pdFwiO1xuXG4gICAgZ2V0SnNvblR5cGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBTdWJtaXRBY3Rpb24uSnNvblR5cGVOYW1lO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEV4ZWN1dGVBY3Rpb24gZXh0ZW5kcyBTdWJtaXRBY3Rpb25CYXNlIHtcbiAgICAvLyBOb3RlIHRoZSBcIndlaXJkXCIgd2F5IHRoaXMgZmllbGQgaXMgZGVjbGFyZWQgaXMgdG8gd29yayBhcm91bmQgYSBicmVha2luZ1xuICAgIC8vIGNoYW5nZSBpbnRyb2R1Y2VkIGluIFRTIDMuMSB3cnQgZC50cyBnZW5lcmF0aW9uLiBETyBOT1QgQ0hBTkdFXG4gICAgc3RhdGljIHJlYWRvbmx5IEpzb25UeXBlTmFtZTogXCJBY3Rpb24uRXhlY3V0ZVwiID0gXCJBY3Rpb24uRXhlY3V0ZVwiO1xuXG4gICAgLy8jcmVnaW9uIFNjaGVtYVxuXG4gICAgc3RhdGljIHJlYWRvbmx5IHZlcmJQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV80LCBcInZlcmJcIik7XG5cbiAgICBAcHJvcGVydHkoRXhlY3V0ZUFjdGlvbi52ZXJiUHJvcGVydHkpXG4gICAgdmVyYjogc3RyaW5nO1xuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICBnZXRKc29uVHlwZU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIEV4ZWN1dGVBY3Rpb24uSnNvblR5cGVOYW1lO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE9wZW5VcmxBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSB1cmxQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcInVybFwiKTtcblxuICAgIEBwcm9wZXJ0eShPcGVuVXJsQWN0aW9uLnVybFByb3BlcnR5KVxuICAgIHVybD86IHN0cmluZztcblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgLy8gTm90ZSB0aGUgXCJ3ZWlyZFwiIHdheSB0aGlzIGZpZWxkIGlzIGRlY2xhcmVkIGlzIHRvIHdvcmsgYXJvdW5kIGEgYnJlYWtpbmdcbiAgICAvLyBjaGFuZ2UgaW50cm9kdWNlZCBpbiBUUyAzLjEgd3J0IGQudHMgZ2VuZXJhdGlvbi4gRE8gTk9UIENIQU5HRVxuICAgIHN0YXRpYyByZWFkb25seSBKc29uVHlwZU5hbWU6IFwiQWN0aW9uLk9wZW5VcmxcIiA9IFwiQWN0aW9uLk9wZW5VcmxcIjtcblxuICAgIGdldEpzb25UeXBlTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gT3BlblVybEFjdGlvbi5Kc29uVHlwZU5hbWU7XG4gICAgfVxuXG4gICAgZ2V0QXJpYVJvbGUoKSA6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcImxpbmtcIjtcbiAgICB9XG5cbiAgICBpbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0OiBWYWxpZGF0aW9uUmVzdWx0cykge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0KTtcblxuICAgICAgICBpZiAoIXRoaXMudXJsKSB7XG4gICAgICAgICAgICBjb250ZXh0LmFkZEZhaWx1cmUoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuUHJvcGVydHlDYW50QmVOdWxsLFxuICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLnByb3BlcnR5TXVzdEJlU2V0KFwidXJsXCIpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEhyZWYoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJsO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRvZ2dsZVZpc2liaWxpdHlBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSB0YXJnZXRFbGVtZW50c1Byb3BlcnR5ID0gbmV3IEN1c3RvbVByb3BlcnR5PFByb3BlcnR5QmFnPihcbiAgICAgICAgVmVyc2lvbnMudjFfMixcbiAgICAgICAgXCJ0YXJnZXRFbGVtZW50c1wiLFxuICAgICAgICAoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QsIHByb3BlcnR5OiBQcm9wZXJ0eURlZmluaXRpb24sIHNvdXJjZTogUHJvcGVydHlCYWcsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgbGV0IHJlc3VsdDogUHJvcGVydHlCYWcgPSB7fVxuXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzb3VyY2VbcHJvcGVydHkubmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBzb3VyY2VbcHJvcGVydHkubmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaXRlbV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbGVtZW50SWQgPSBpdGVtW1wiZWxlbWVudElkXCJdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnRJZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtZW50SWRdID0gVXRpbHMucGFyc2VCb29sKGl0ZW1bXCJpc1Zpc2libGVcIl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICAoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QsIHByb3BlcnR5OiBQcm9wZXJ0eURlZmluaXRpb24sIHRhcmdldDogUHJvcGVydHlCYWcsIHZhbHVlOiBQcm9wZXJ0eUJhZywgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgICBsZXQgdGFyZ2V0RWxlbWVudHM6IGFueVtdID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGlkIG9mIE9iamVjdC5rZXlzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVbaWRdID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50cy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRJZDogaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWaXNpYmxlOiB2YWx1ZVtpZF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnRzLnB1c2goaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGV4dC5zZXJpYWxpemVBcnJheSh0YXJnZXQsIHByb3BlcnR5Lm5hbWUsIHRhcmdldEVsZW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICAgIChzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCkgPT4geyByZXR1cm4ge307IH0pO1xuXG4gICAgQHByb3BlcnR5KFRvZ2dsZVZpc2liaWxpdHlBY3Rpb24udGFyZ2V0RWxlbWVudHNQcm9wZXJ0eSlcbiAgICB0YXJnZXRFbGVtZW50czogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICAvLyBOb3RlIHRoZSBcIndlaXJkXCIgd2F5IHRoaXMgZmllbGQgaXMgZGVjbGFyZWQgaXMgdG8gd29yayBhcm91bmQgYSBicmVha2luZ1xuICAgIC8vIGNoYW5nZSBpbnRyb2R1Y2VkIGluIFRTIDMuMSB3cnQgZC50cyBnZW5lcmF0aW9uLiBETyBOT1QgQ0hBTkdFXG4gICAgc3RhdGljIHJlYWRvbmx5IEpzb25UeXBlTmFtZTogXCJBY3Rpb24uVG9nZ2xlVmlzaWJpbGl0eVwiID0gXCJBY3Rpb24uVG9nZ2xlVmlzaWJpbGl0eVwiO1xuXG4gICAgcHJpdmF0ZSB1cGRhdGVBcmlhQ29udHJvbHNBdHRyaWJ1dGUoKSB7XG4gICAgICAgIC8vIGFwcGx5IGFyaWEgbGFiZWxzIHRvIG1ha2UgaXQgY2xlYXIgd2hpY2ggZWxlbWVudHMgdGhpcyBhY3Rpb24gd2lsbCB0b2dnbGVcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0RWxlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRJZHMgPSBPYmplY3Qua2V5cyh0aGlzLnRhcmdldEVsZW1lbnRzKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3JlbmRlcmVkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50SWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRFbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtY29udHJvbHNcIiwgZWxlbWVudElkcy5qb2luKFwiIFwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlZEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1jb250cm9sc1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0OiBWYWxpZGF0aW9uUmVzdWx0cykge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0KTtcblxuICAgICAgICBpZiAoIXRoaXMudGFyZ2V0RWxlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYWRkRmFpbHVyZShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5Qcm9wZXJ0eUNhbnRCZU51bGwsXG4gICAgICAgICAgICAgICAgU3RyaW5ncy5lcnJvcnMucHJvcGVydHlNdXN0QmVTZXQoXCJ0YXJnZXRFbGVtZW50c1wiKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRKc29uVHlwZU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFRvZ2dsZVZpc2liaWxpdHlBY3Rpb24uSnNvblR5cGVOYW1lO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgc3VwZXIucmVuZGVyKCk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVBcmlhQ29udHJvbHNBdHRyaWJ1dGUoKTtcbiAgICB9XG5cbiAgICBleGVjdXRlKCkge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGVsZW1lbnRJZCBvZiBPYmplY3Qua2V5cyh0aGlzLnRhcmdldEVsZW1lbnRzKSkge1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXRFbGVtZW50ID0gdGhpcy5wYXJlbnQuZ2V0Um9vdEVsZW1lbnQoKS5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhcmdldEVsZW1lbnRzW2VsZW1lbnRJZF0gPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LmlzVmlzaWJsZSA9IHRoaXMudGFyZ2V0RWxlbWVudHNbZWxlbWVudElkXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnQuaXNWaXNpYmxlID0gIXRhcmdldEVsZW1lbnQuaXNWaXNpYmxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkVGFyZ2V0RWxlbWVudChlbGVtZW50SWQ6IHN0cmluZywgaXNWaXNpYmxlOiBib29sZWFuIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudHNbZWxlbWVudElkXSA9IGlzVmlzaWJsZTtcbiAgICAgICAgdGhpcy51cGRhdGVBcmlhQ29udHJvbHNBdHRyaWJ1dGUoKTtcbiAgICB9XG5cbiAgICByZW1vdmVUYXJnZXRFbGVtZW50KGVsZW1lbnRJZDogc3RyaW5nKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnRhcmdldEVsZW1lbnRzW2VsZW1lbnRJZF07XG4gICAgICAgIHRoaXMudXBkYXRlQXJpYUNvbnRyb2xzQXR0cmlidXRlKCk7XG4gICAgfVxufVxuXG5jbGFzcyBTdHJpbmdXaXRoU3Vic3RpdHV0aW9uUHJvcGVydHkgZXh0ZW5kcyBQcm9wZXJ0eURlZmluaXRpb24gIHtcbiAgICBwYXJzZShzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgc291cmNlOiBQcm9wZXJ0eUJhZywgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KTogU3RyaW5nV2l0aFN1YnN0aXR1dGlvbnMge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IFN0cmluZ1dpdGhTdWJzdGl0dXRpb25zKCk7XG4gICAgICAgIHJlc3VsdC5zZXQoVXRpbHMucGFyc2VTdHJpbmcoc291cmNlW3RoaXMubmFtZV0pKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHRvSlNPTihzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgdGFyZ2V0OiBQcm9wZXJ0eUJhZywgdmFsdWU6IFN0cmluZ1dpdGhTdWJzdGl0dXRpb25zLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpOiB2b2lkIHtcbiAgICAgICAgY29udGV4dC5zZXJpYWxpemVWYWx1ZSh0YXJnZXQsIHRoaXMubmFtZSwgdmFsdWUuZ2V0T3JpZ2luYWwoKSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHJlYWRvbmx5IHRhcmdldFZlcnNpb246IFZlcnNpb24sXG4gICAgICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZykge1xuICAgICAgICBzdXBlcih0YXJnZXRWZXJzaW9uLCBuYW1lLCB1bmRlZmluZWQsICgpID0+IHsgcmV0dXJuIG5ldyBTdHJpbmdXaXRoU3Vic3RpdHV0aW9ucygpOyB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBIdHRwSGVhZGVyIGV4dGVuZHMgU2VyaWFsaXphYmxlT2JqZWN0IHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgbmFtZVByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwibmFtZVwiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgdmFsdWVQcm9wZXJ0eSA9IG5ldyBTdHJpbmdXaXRoU3Vic3RpdHV0aW9uUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJ2YWx1ZVwiKTtcblxuICAgIHByb3RlY3RlZCBnZXRTY2hlbWFLZXkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiSHR0cEhlYWRlclwiO1xuICAgIH1cblxuICAgIEBwcm9wZXJ0eShIdHRwSGVhZGVyLm5hbWVQcm9wZXJ0eSlcbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoSHR0cEhlYWRlci52YWx1ZVByb3BlcnR5KVxuICAgIHByaXZhdGUgX3ZhbHVlOiBTdHJpbmdXaXRoU3Vic3RpdHV0aW9ucztcblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nID0gXCJcIiwgdmFsdWU6IHN0cmluZyA9IFwiXCIpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0UmVmZXJlbmNlZElucHV0cyhpbnB1dHM6IElucHV0W10sIHJlZmVyZW5jZWRJbnB1dHM6IERpY3Rpb25hcnk8SW5wdXQ+KSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlLmdldFJlZmVyZW5jZWRJbnB1dHMoaW5wdXRzLCByZWZlcmVuY2VkSW5wdXRzKTtcbiAgICB9XG5cbiAgICBwcmVwYXJlRm9yRXhlY3V0aW9uKGlucHV0czogRGljdGlvbmFyeTxJbnB1dD4pIHtcbiAgICAgICAgdGhpcy5fdmFsdWUuc3Vic3RpdHV0ZUlucHV0VmFsdWVzKGlucHV0cywgQ29udGVudFR5cGVzLmFwcGxpY2F0aW9uWFd3d0Zvcm1VcmxlbmNvZGVkKTtcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmdldCgpO1xuICAgIH1cblxuICAgIHNldCB2YWx1ZShuZXdWYWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlLnNldChuZXdWYWx1ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSHR0cEFjdGlvbiBleHRlbmRzIEFjdGlvbiB7XG4gICAgLy8jcmVnaW9uIFNjaGVtYVxuXG4gICAgc3RhdGljIHJlYWRvbmx5IHVybFByb3BlcnR5ID0gbmV3IFN0cmluZ1dpdGhTdWJzdGl0dXRpb25Qcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcInVybFwiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgYm9keVByb3BlcnR5ID0gbmV3IFN0cmluZ1dpdGhTdWJzdGl0dXRpb25Qcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcImJvZHlcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IG1ldGhvZFByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwibWV0aG9kXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBoZWFkZXJzUHJvcGVydHkgPSBuZXcgU2VyaWFsaXphYmxlT2JqZWN0Q29sbGVjdGlvblByb3BlcnR5KFZlcnNpb25zLnYxXzAsIFwiaGVhZGVyc1wiLCBIdHRwSGVhZGVyKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgaWdub3JlSW5wdXRWYWxpZGF0aW9uUHJvcGVydHkgPSBuZXcgQm9vbFByb3BlcnR5KFZlcnNpb25zLnYxXzMsIFwiaWdub3JlSW5wdXRWYWxpZGF0aW9uXCIsIGZhbHNlKTtcblxuICAgIEBwcm9wZXJ0eShIdHRwQWN0aW9uLnVybFByb3BlcnR5KVxuICAgIHByaXZhdGUgX3VybDogU3RyaW5nV2l0aFN1YnN0aXR1dGlvbnM7XG5cbiAgICBAcHJvcGVydHkoSHR0cEFjdGlvbi5ib2R5UHJvcGVydHkpXG4gICAgcHJpdmF0ZSBfYm9keTogU3RyaW5nV2l0aFN1YnN0aXR1dGlvbnM7XG5cbiAgICBAcHJvcGVydHkoSHR0cEFjdGlvbi5tZXRob2RQcm9wZXJ0eSlcbiAgICBtZXRob2Q/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoSHR0cEFjdGlvbi5oZWFkZXJzUHJvcGVydHkpXG4gICAgaGVhZGVyczogSHR0cEhlYWRlcltdO1xuXG4gICAgQHByb3BlcnR5KEh0dHBBY3Rpb24uaWdub3JlSW5wdXRWYWxpZGF0aW9uUHJvcGVydHkpXG4gICAgcHJpdmF0ZSBfaWdub3JlSW5wdXRWYWxpZGF0aW9uOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIC8vIE5vdGUgdGhlIFwid2VpcmRcIiB3YXkgdGhpcyBmaWVsZCBpcyBkZWNsYXJlZCBpcyB0byB3b3JrIGFyb3VuZCBhIGJyZWFraW5nXG4gICAgLy8gY2hhbmdlIGludHJvZHVjZWQgaW4gVFMgMy4xIHdydCBkLnRzIGdlbmVyYXRpb24uIERPIE5PVCBDSEFOR0VcbiAgICBzdGF0aWMgcmVhZG9ubHkgSnNvblR5cGVOYW1lOiBcIkFjdGlvbi5IdHRwXCIgPSBcIkFjdGlvbi5IdHRwXCI7XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxHZXRSZWZlcmVuY2VkSW5wdXRzKCk6IERpY3Rpb25hcnk8SW5wdXQ+IHtcbiAgICAgICAgbGV0IGFsbElucHV0cyA9IHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuZ2V0Um9vdEVsZW1lbnQoKS5nZXRBbGxJbnB1dHMoKSA6IFtdO1xuICAgICAgICBsZXQgcmVzdWx0OiBEaWN0aW9uYXJ5PElucHV0PiA9IHt9O1xuXG4gICAgICAgIHRoaXMuX3VybC5nZXRSZWZlcmVuY2VkSW5wdXRzKGFsbElucHV0cywgcmVzdWx0KTtcblxuICAgICAgICBmb3IgKGxldCBoZWFkZXIgb2YgdGhpcy5oZWFkZXJzKSB7XG4gICAgICAgICAgICBoZWFkZXIuZ2V0UmVmZXJlbmNlZElucHV0cyhhbGxJbnB1dHMsIHJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9ib2R5LmdldFJlZmVyZW5jZWRJbnB1dHMoYWxsSW5wdXRzLCByZXN1bHQpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUHJlcGFyZUZvckV4ZWN1dGlvbihpbnB1dHM6IERpY3Rpb25hcnk8SW5wdXQ+IHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChpbnB1dHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3VybC5zdWJzdGl0dXRlSW5wdXRWYWx1ZXMoaW5wdXRzLCBDb250ZW50VHlwZXMuYXBwbGljYXRpb25YV3d3Rm9ybVVybGVuY29kZWQpO1xuXG4gICAgICAgICAgICBsZXQgY29udGVudFR5cGUgPSBDb250ZW50VHlwZXMuYXBwbGljYXRpb25Kc29uO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBoZWFkZXIgb2YgdGhpcy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyLnByZXBhcmVGb3JFeGVjdXRpb24oaW5wdXRzKTtcblxuICAgICAgICAgICAgICAgIGlmIChoZWFkZXIubmFtZSAmJiBoZWFkZXIubmFtZS50b0xvd2VyQ2FzZSgpID09IFwiY29udGVudC10eXBlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGUgPSA8c3RyaW5nPmhlYWRlci52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2JvZHkuc3Vic3RpdHV0ZUlucHV0VmFsdWVzKGlucHV0cywgY29udGVudFR5cGUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGdldEpzb25UeXBlTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gSHR0cEFjdGlvbi5Kc29uVHlwZU5hbWU7XG4gICAgfVxuXG4gICAgaW50ZXJuYWxWYWxpZGF0ZVByb3BlcnRpZXMoY29udGV4dDogVmFsaWRhdGlvblJlc3VsdHMpIHtcbiAgICAgICAgc3VwZXIuaW50ZXJuYWxWYWxpZGF0ZVByb3BlcnRpZXMoY29udGV4dCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnVybCkge1xuICAgICAgICAgICAgY29udGV4dC5hZGRGYWlsdXJlKFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgRW51bXMuVmFsaWRhdGlvbkV2ZW50LlByb3BlcnR5Q2FudEJlTnVsbCxcbiAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy5wcm9wZXJ0eU11c3RCZVNldChcInVybFwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5oZWFkZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGhlYWRlciBvZiB0aGlzLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhlYWRlci5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYWRkRmFpbHVyZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuUHJvcGVydHlDYW50QmVOdWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5ncy5lcnJvcnMuYWN0aW9uSHR0cEhlYWRlcnNNdXN0SGF2ZU5hbWVBbmRWYWx1ZSgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgaWdub3JlSW5wdXRWYWxpZGF0aW9uKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faWdub3JlSW5wdXRWYWxpZGF0aW9uO1xuICAgIH1cblxuICAgIHNldCBpZ25vcmVJbnB1dFZhbGlkYXRpb24odmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faWdub3JlSW5wdXRWYWxpZGF0aW9uID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IHVybCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5fdXJsLmdldCgpO1xuICAgIH1cblxuICAgIHNldCB1cmwodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl91cmwuc2V0KHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXQgYm9keSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5fYm9keS5nZXQoKTtcbiAgICB9XG5cbiAgICBzZXQgYm9keSh2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX2JvZHkuc2V0KHZhbHVlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTaG93Q2FyZEFjdGlvbiBleHRlbmRzIEFjdGlvbiB7XG4gICAgLy8gTm90ZSB0aGUgXCJ3ZWlyZFwiIHdheSB0aGlzIGZpZWxkIGlzIGRlY2xhcmVkIGlzIHRvIHdvcmsgYXJvdW5kIGEgYnJlYWtpbmdcbiAgICAvLyBjaGFuZ2UgaW50cm9kdWNlZCBpbiBUUyAzLjEgd3J0IGQudHMgZ2VuZXJhdGlvbi4gRE8gTk9UIENIQU5HRVxuICAgIHN0YXRpYyByZWFkb25seSBKc29uVHlwZU5hbWU6IFwiQWN0aW9uLlNob3dDYXJkXCIgPSBcIkFjdGlvbi5TaG93Q2FyZFwiO1xuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZUNzc0NsYXNzZXMoKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZUNzc0NsYXNzZXMoKTtcblxuICAgICAgICBpZiAodGhpcy5yZW5kZXJlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGxldCBlZmZlY3RpdmVIb3N0Q29uZmlnID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5ob3N0Q29uZmlnIDogZGVmYXVsdEhvc3RDb25maWc7XG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LmNsYXNzTGlzdC5hZGQoZWZmZWN0aXZlSG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKFwiZXhwYW5kYWJsZVwiKSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsICh0aGlzLnN0YXRlID09PSBBY3Rpb25CdXR0b25TdGF0ZS5FeHBhbmRlZCkudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxQYXJzZShzb3VyY2U6IGFueSwgY29udGV4dDogU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgc3VwZXIuaW50ZXJuYWxQYXJzZShzb3VyY2UsIGNvbnRleHQpO1xuXG4gICAgICAgIGxldCBqc29uQ2FyZCA9IHNvdXJjZVtcImNhcmRcIl07XG5cbiAgICAgICAgaWYgKGpzb25DYXJkKSB7XG4gICAgICAgICAgICB0aGlzLmNhcmQucGFyc2UoanNvbkNhcmQsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dC5sb2dQYXJzZUV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgRW51bXMuVmFsaWRhdGlvbkV2ZW50LlByb3BlcnR5Q2FudEJlTnVsbCxcbiAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy5zaG93Q2FyZE11c3RIYXZlQ2FyZCgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFRvSlNPTih0YXJnZXQ6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFRvSlNPTih0YXJnZXQsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmICh0aGlzLmNhcmQpIHtcbiAgICAgICAgICAgIGNvbnRleHQuc2VyaWFsaXplVmFsdWUodGFyZ2V0LCBcImNhcmRcIiwgdGhpcy5jYXJkLnRvSlNPTihjb250ZXh0KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmFpc2VFeGVjdXRlQWN0aW9uRXZlbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmhvc3RDb25maWcuYWN0aW9ucy5zaG93Q2FyZC5hY3Rpb25Nb2RlID09PSBFbnVtcy5TaG93Q2FyZEFjdGlvbk1vZGUuUG9wdXApIHtcbiAgICAgICAgICAgIC8vIE9ubHkgcmFpc2UgdGhlIGV2ZW50IGluIFBvcHVwIG1vZGUuXG4gICAgICAgICAgICBzdXBlci5yYWlzZUV4ZWN1dGVBY3Rpb25FdmVudCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVhZG9ubHkgY2FyZDogQWRhcHRpdmVDYXJkID0gbmV3IElubGluZUFkYXB0aXZlQ2FyZCgpO1xuXG4gICAgZ2V0SnNvblR5cGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBTaG93Q2FyZEFjdGlvbi5Kc29uVHlwZU5hbWU7XG4gICAgfVxuXG4gICAgaW50ZXJuYWxWYWxpZGF0ZVByb3BlcnRpZXMoY29udGV4dDogVmFsaWRhdGlvblJlc3VsdHMpIHtcbiAgICAgICAgc3VwZXIuaW50ZXJuYWxWYWxpZGF0ZVByb3BlcnRpZXMoY29udGV4dCk7XG5cbiAgICAgICAgdGhpcy5jYXJkLmludGVybmFsVmFsaWRhdGVQcm9wZXJ0aWVzKGNvbnRleHQpO1xuICAgIH1cblxuICAgIHNldFBhcmVudCh2YWx1ZTogQ2FyZEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIuc2V0UGFyZW50KHZhbHVlKTtcblxuICAgICAgICB0aGlzLmNhcmQuc2V0UGFyZW50KHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXRBbGxJbnB1dHMocHJvY2Vzc0FjdGlvbnM6IGJvb2xlYW4gPSB0cnVlKTogSW5wdXRbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhcmQuZ2V0QWxsSW5wdXRzKHByb2Nlc3NBY3Rpb25zKTtcbiAgICB9XG5cbiAgICBnZXRSZXNvdXJjZUluZm9ybWF0aW9uKCk6IElSZXNvdXJjZUluZm9ybWF0aW9uW10ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0UmVzb3VyY2VJbmZvcm1hdGlvbigpLmNvbmNhdCh0aGlzLmNhcmQuZ2V0UmVzb3VyY2VJbmZvcm1hdGlvbigpKTtcbiAgICB9XG5cbiAgICBnZXRBY3Rpb25CeUlkKGlkOiBzdHJpbmcpOiBBY3Rpb24gfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3VwZXIuZ2V0QWN0aW9uQnlJZChpZCk7XG5cbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuY2FyZC5nZXRBY3Rpb25CeUlkKGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5jbGFzcyBPdmVyZmxvd0FjdGlvbiBleHRlbmRzIEFjdGlvbiB7XG4gICAgc3RhdGljIHJlYWRvbmx5IEpzb25UeXBlTmFtZTogXCJBY3Rpb24uT3ZlcmZsb3dcIiA9IFwiQWN0aW9uLk92ZXJmbG93XCI7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjdGlvbnM6IEFjdGlvbltdKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy50aXRsZSA9IFN0cmluZ3MuZGVmYXVsdHMub3ZlcmZsb3dCdXR0b25UZXh0KCk7XG4gICAgfVxuXG4gICAgZ2V0QWN0aW9ucygpOiByZWFkb25seSBBY3Rpb25bXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbnM7XG4gICAgfVxuXG4gICAgZ2V0SnNvblR5cGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBTaG93Q2FyZEFjdGlvbi5Kc29uVHlwZU5hbWU7XG4gICAgfVxuXG4gICAgZXhlY3V0ZSgpIHtcbiAgICAgICAgY29uc3Qgc2hvdWxkRGlzcGxheVBvcHVwTWVudSA9ICFyYWlzZURpc3BsYXlPdmVyZmxvd0FjdGlvbk1lbnVFdmVudCh0aGlzLCB0aGlzLnJlbmRlcmVkRWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHNob3VsZERpc3BsYXlQb3B1cE1lbnUgJiYgdGhpcy5yZW5kZXJlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGxldCBjb250ZXh0TWVudSA9IG5ldyBQb3B1cE1lbnUoKTtcbiAgICAgICAgICAgIGNvbnRleHRNZW51Lmhvc3RDb25maWcgPSB0aGlzLmhvc3RDb25maWc7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVudUl0ZW0gPSBuZXcgTWVudUl0ZW0oaS50b1N0cmluZygpLCB0aGlzLmFjdGlvbnNbaV0udGl0bGUgPz8gXCJcIik7XG4gICAgICAgICAgICAgICAgbWVudUl0ZW0uaXNFbmFibGVkID0gdGhpcy5hY3Rpb25zW2ldLmlzRW5hYmxlZDtcbiAgICAgICAgICAgICAgICBtZW51SXRlbS5vbkNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYWN0aW9uVG9FeGVjdXRlID0gdGhpcy5hY3Rpb25zW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmNsb3NlUG9wdXAoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb25Ub0V4ZWN1dGUuaXNFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25Ub0V4ZWN1dGUuZXhlY3V0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNvbnRleHRNZW51Lml0ZW1zLmFkZChtZW51SXRlbSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb250ZXh0TWVudS5wb3B1cCh0aGlzLnJlbmRlcmVkRWxlbWVudCk7XG4gICAgICAgIH1cblx0fVxufVxuXG5jbGFzcyBBY3Rpb25Db2xsZWN0aW9uIHtcbiAgICBwcml2YXRlIF9vd25lcjogQ2FyZEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfYWN0aW9uQ2FyZENvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfZXhwYW5kZWRBY3Rpb24/OiBTaG93Q2FyZEFjdGlvbjtcbiAgICBwcml2YXRlIF9hY3Rpb25DYXJkPzogSFRNTEVsZW1lbnQ7XG5cbiAgICBwcml2YXRlIGlzQWN0aW9uQWxsb3dlZChhY3Rpb246IEFjdGlvbik6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgZm9yYmlkZGVuVHlwZXMgPSB0aGlzLl9vd25lci5nZXRGb3JiaWRkZW5BY3Rpb25UeXBlcygpO1xuXG4gICAgICAgIGlmIChmb3JiaWRkZW5UeXBlcykge1xuICAgICAgICAgICAgZm9yIChsZXQgZm9yYmlkZGVuVHlwZSBvZiBmb3JiaWRkZW5UeXBlcykge1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uY29uc3RydWN0b3IgPT09IGZvcmJpZGRlblR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVmcmVzaENvbnRhaW5lcigpIHtcbiAgICAgICAgdGhpcy5fYWN0aW9uQ2FyZENvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuXG4gICAgICAgIGlmICghdGhpcy5fYWN0aW9uQ2FyZCkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aW9uQ2FyZENvbnRhaW5lci5zdHlsZS5tYXJnaW5Ub3AgPSBcIjBweFwiO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9hY3Rpb25DYXJkQ29udGFpbmVyLnN0eWxlLm1hcmdpblRvcCA9IHRoaXMucmVuZGVyZWRBY3Rpb25Db3VudCA+IDAgPyB0aGlzLl9vd25lci5ob3N0Q29uZmlnLmFjdGlvbnMuc2hvd0NhcmQuaW5saW5lVG9wTWFyZ2luICsgXCJweFwiIDogXCIwcHhcIjtcblxuICAgICAgICBsZXQgcGFkZGluZyA9IHRoaXMuX293bmVyLmdldEVmZmVjdGl2ZVBhZGRpbmcoKTtcblxuICAgICAgICB0aGlzLl9vd25lci5nZXRJbW1lZGlhdGVTdXJyb3VuZGluZ1BhZGRpbmcocGFkZGluZyk7XG5cbiAgICAgICAgbGV0IHBoeXNpY2FsUGFkZGluZyA9IHRoaXMuX293bmVyLmhvc3RDb25maWcucGFkZGluZ0RlZmluaXRpb25Ub1NwYWNpbmdEZWZpbml0aW9uKHBhZGRpbmcpO1xuXG4gICAgICAgIGlmICh0aGlzLl9hY3Rpb25DYXJkKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3Rpb25DYXJkLnN0eWxlLnBhZGRpbmdMZWZ0ID0gcGh5c2ljYWxQYWRkaW5nLmxlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICB0aGlzLl9hY3Rpb25DYXJkLnN0eWxlLnBhZGRpbmdSaWdodCA9IHBoeXNpY2FsUGFkZGluZy5yaWdodCArIFwicHhcIjtcblxuICAgICAgICAgICAgdGhpcy5fYWN0aW9uQ2FyZC5zdHlsZS5tYXJnaW5MZWZ0ID0gXCItXCIgKyBwaHlzaWNhbFBhZGRpbmcubGVmdCArIFwicHhcIjtcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbkNhcmQuc3R5bGUubWFyZ2luUmlnaHQgPSBcIi1cIiArIHBoeXNpY2FsUGFkZGluZy5yaWdodCArIFwicHhcIjtcblxuICAgICAgICAgICAgaWYgKHBoeXNpY2FsUGFkZGluZy5ib3R0b20gIT0gMCAmJiAhdGhpcy5fb3duZXIuaXNEZXNpZ25Nb2RlKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb25DYXJkLnN0eWxlLnBhZGRpbmdCb3R0b20gPSBwaHlzaWNhbFBhZGRpbmcuYm90dG9tICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvbkNhcmQuc3R5bGUubWFyZ2luQm90dG9tID0gXCItXCIgKyBwaHlzaWNhbFBhZGRpbmcuYm90dG9tICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBVdGlscy5hcHBlbmRDaGlsZCh0aGlzLl9hY3Rpb25DYXJkQ29udGFpbmVyLCB0aGlzLl9hY3Rpb25DYXJkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgbGF5b3V0Q2hhbmdlZCgpIHtcbiAgICAgICAgdGhpcy5fb3duZXIuZ2V0Um9vdEVsZW1lbnQoKS51cGRhdGVMYXlvdXQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3dBY3Rpb25DYXJkKGFjdGlvbjogU2hvd0NhcmRBY3Rpb24sIHN1cHByZXNzU3R5bGU6IGJvb2xlYW4gPSBmYWxzZSwgcmFpc2VFdmVudDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgKDxJbmxpbmVBZGFwdGl2ZUNhcmQ+YWN0aW9uLmNhcmQpLnN1cHByZXNzU3R5bGUgPSBzdXBwcmVzc1N0eWxlO1xuXG4gICAgICAgIC8vIEFsd2F5cyByZS1yZW5kZXIgYSBTaG93Q2FyZCBhY3Rpb24gaW4gZGVzaWduIG1vZGU7IHJldXNlIGFscmVhZHkgcmVuZGVyZWQgU2hvd0NhcmQgKGlmIGF2YWlsYWJsZSkgb3RoZXJ3aXNlXG4gICAgICAgIGxldCByZW5kZXJlZENhcmQgPSBhY3Rpb24uY2FyZC5yZW5kZXJlZEVsZW1lbnQgJiYgIXRoaXMuX293bmVyLmlzRGVzaWduTW9kZSgpID8gYWN0aW9uLmNhcmQucmVuZGVyZWRFbGVtZW50IDogYWN0aW9uLmNhcmQucmVuZGVyKCk7XG5cbiAgICAgICAgdGhpcy5fYWN0aW9uQ2FyZCA9IHJlbmRlcmVkQ2FyZDtcbiAgICAgICAgdGhpcy5fZXhwYW5kZWRBY3Rpb24gPSBhY3Rpb247XG5cbiAgICAgICAgdGhpcy5yZWZyZXNoQ29udGFpbmVyKCk7XG5cbiAgICAgICAgaWYgKHJhaXNlRXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0Q2hhbmdlZCgpO1xuXG4gICAgICAgICAgICByYWlzZUlubGluZUNhcmRFeHBhbmRlZEV2ZW50KGFjdGlvbiwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbGxhcHNlRXhwYW5kZWRBY3Rpb24oKSB7XG4gICAgICAgIGZvciAobGV0IGFjdGlvbiBvZiB0aGlzLl9yZW5kZXJlZEFjdGlvbnMpIHtcbiAgICAgICAgICAgIGFjdGlvbi5zdGF0ZSA9IEFjdGlvbkJ1dHRvblN0YXRlLk5vcm1hbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwcmV2aW91c2x5RXhwYW5kZWRBY3Rpb24gPSB0aGlzLl9leHBhbmRlZEFjdGlvbjtcblxuICAgICAgICB0aGlzLl9leHBhbmRlZEFjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fYWN0aW9uQ2FyZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICB0aGlzLnJlZnJlc2hDb250YWluZXIoKTtcblxuICAgICAgICBpZiAocHJldmlvdXNseUV4cGFuZGVkQWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmxheW91dENoYW5nZWQoKTtcblxuICAgICAgICAgICAgcmFpc2VJbmxpbmVDYXJkRXhwYW5kZWRFdmVudChwcmV2aW91c2x5RXhwYW5kZWRBY3Rpb24sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZXhwYW5kU2hvd0NhcmRBY3Rpb24oYWN0aW9uOiBTaG93Q2FyZEFjdGlvbiwgcmFpc2VFdmVudDogYm9vbGVhbikge1xuICAgICAgICBsZXQgYWZ0ZXJTZWxlY3RlZEFjdGlvbiA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAobGV0IHJlbmRlcmVkQWN0aW9uIG9mIHRoaXMuX3JlbmRlcmVkQWN0aW9ucykge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGFjdGlvbnMgYWZ0ZXIgc2VsZWN0ZWQgYWN0aW9uIGZyb20gdGFiT3JkZXIsIHRvIHNraXAgZm9jdXMgZGlyZWN0bHkgdG8gZXhwYW5kZWQgY2FyZFxuICAgICAgICAgICAgaWYgKGFmdGVyU2VsZWN0ZWRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZW5kZXJlZEFjdGlvbi5pc0ZvY3VzYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVuZGVyZWRBY3Rpb24gIT09IGFjdGlvbikge1xuICAgICAgICAgICAgICAgIHJlbmRlcmVkQWN0aW9uLnN0YXRlID0gQWN0aW9uQnV0dG9uU3RhdGUuU3ViZHVlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbmRlcmVkQWN0aW9uLnN0YXRlID0gQWN0aW9uQnV0dG9uU3RhdGUuRXhwYW5kZWQ7XG5cbiAgICAgICAgICAgICAgICBhZnRlclNlbGVjdGVkQWN0aW9uID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGlmIChyZW5kZXJlZEFjdGlvbi5yZW5kZXJlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWRBY3Rpb24ucmVuZGVyZWRFbGVtZW50Lm9uYmx1ciA9IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByYSBvZiB0aGlzLl9yZW5kZXJlZEFjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYS5pc0ZvY3VzYWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNob3dBY3Rpb25DYXJkKFxuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgISh0aGlzLl9vd25lci5pc0F0VGhlVmVyeUxlZnQoKSAmJiB0aGlzLl9vd25lci5pc0F0VGhlVmVyeVJpZ2h0KCkpLFxuICAgICAgICAgICAgcmFpc2VFdmVudCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfaXRlbXM6IEFjdGlvbltdID0gW107XG4gICAgcHJpdmF0ZSBfb3ZlcmZsb3dBY3Rpb24/OiBPdmVyZmxvd0FjdGlvbjtcbiAgICBwcml2YXRlIF9yZW5kZXJlZEFjdGlvbnM6IEFjdGlvbltdID0gW107XG5cbiAgICBjb25zdHJ1Y3Rvcihvd25lcjogQ2FyZEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fb3duZXIgPSBvd25lcjtcbiAgICB9XG5cbiAgICBhY3Rpb25FeGVjdXRlZChhY3Rpb246IEFjdGlvbikge1xuICAgICAgICBpZiAoIShhY3Rpb24gaW5zdGFuY2VvZiBTaG93Q2FyZEFjdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuY29sbGFwc2VFeHBhbmRlZEFjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gdGhpcy5fZXhwYW5kZWRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNlRXhwYW5kZWRBY3Rpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX293bmVyLmhvc3RDb25maWcuYWN0aW9ucy5zaG93Q2FyZC5hY3Rpb25Nb2RlID09PSBFbnVtcy5TaG93Q2FyZEFjdGlvbk1vZGUuSW5saW5lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5leHBhbmRTaG93Q2FyZEFjdGlvbihhY3Rpb24sIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyc2Uoc291cmNlOiBhbnksIGNvbnRleHQ6IFNlcmlhbGl6YXRpb25Db250ZXh0KSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqc29uQWN0aW9uIG9mIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGxldCBhY3Rpb24gPSBjb250ZXh0LnBhcnNlQWN0aW9uKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vd25lcixcbiAgICAgICAgICAgICAgICAgICAganNvbkFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgW10sXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLl9vd25lci5pc0Rlc2lnbk1vZGUoKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQWN0aW9uKGFjdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9KU09OKHRhcmdldDogUHJvcGVydHlCYWcsIHByb3BlcnR5TmFtZTogc3RyaW5nLCBjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCk6IGFueSB7XG4gICAgICAgIGNvbnRleHQuc2VyaWFsaXplQXJyYXkodGFyZ2V0LCBwcm9wZXJ0eU5hbWUsIHRoaXMuX2l0ZW1zKTtcbiAgICB9XG5cbiAgICBnZXRBY3Rpb25BdChpZDogbnVtYmVyKTogQWN0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW2lkXTtcbiAgICB9XG5cbiAgICBnZXRBY3Rpb25Db3VudCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5faXRlbXMubGVuZ3RoO1xuICAgIH1cblxuICAgIGdldEFjdGlvbkJ5SWQoaWQ6IHN0cmluZyk6IEFjdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCByZXN1bHQ6IEFjdGlvbiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuX2l0ZW1zKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBpdGVtLmdldEFjdGlvbkJ5SWQoaWQpO1xuXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0OiBWYWxpZGF0aW9uUmVzdWx0cykge1xuICAgICAgICBpZiAodGhpcy5fb3duZXIuaG9zdENvbmZpZy5hY3Rpb25zLm1heEFjdGlvbnMgJiYgdGhpcy5faXRlbXMubGVuZ3RoID4gdGhpcy5fb3duZXIuaG9zdENvbmZpZy5hY3Rpb25zLm1heEFjdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYWRkRmFpbHVyZShcbiAgICAgICAgICAgICAgICB0aGlzLl9vd25lcixcbiAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuVG9vTWFueUFjdGlvbnMsXG4gICAgICAgICAgICAgICAgU3RyaW5ncy5lcnJvcnMudG9vTWFueUFjdGlvbnModGhpcy5fb3duZXIuaG9zdENvbmZpZy5hY3Rpb25zLm1heEFjdGlvbnMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9pdGVtcy5sZW5ndGggPiAwICYmICF0aGlzLl9vd25lci5ob3N0Q29uZmlnLnN1cHBvcnRzSW50ZXJhY3Rpdml0eSkge1xuICAgICAgICAgICAgY29udGV4dC5hZGRGYWlsdXJlKFxuICAgICAgICAgICAgICAgIHRoaXMuX293bmVyLFxuICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5JbnRlcmFjdGl2aXR5Tm90QWxsb3dlZCxcbiAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy5pbnRlcmFjdGl2aXR5Tm90QWxsb3dlZCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5faXRlbXMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0FjdGlvbkFsbG93ZWQoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmFkZEZhaWx1cmUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX293bmVyLFxuICAgICAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuQWN0aW9uVHlwZU5vdEFsbG93ZWQsXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLmFjdGlvblR5cGVOb3RBbGxvd2VkKGl0ZW0uZ2V0SnNvblR5cGVOYW1lKCkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbS5pbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcihvcmllbnRhdGlvbjogRW51bXMuT3JpZW50YXRpb24sIGlzRGVzaWduTW9kZTogYm9vbGVhbik6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgLy8gQ2FjaGUgaG9zdENvbmZpZyBmb3IgYmV0dGVyIHBlcmZcbiAgICAgICAgbGV0IGhvc3RDb25maWcgPSB0aGlzLl9vd25lci5ob3N0Q29uZmlnO1xuXG4gICAgICAgIGlmICghaG9zdENvbmZpZy5zdXBwb3J0c0ludGVyYWN0aXZpdHkpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGxldCBtYXhBY3Rpb25zID0gaG9zdENvbmZpZy5hY3Rpb25zLm1heEFjdGlvbnMgPyBNYXRoLm1pbihob3N0Q29uZmlnLmFjdGlvbnMubWF4QWN0aW9ucywgdGhpcy5faXRlbXMubGVuZ3RoKSA6IHRoaXMuX2l0ZW1zLmxlbmd0aDtcblxuICAgICAgICB0aGlzLl9hY3Rpb25DYXJkQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyZWRBY3Rpb25zID0gW107XG5cbiAgICAgICAgaWYgKGhvc3RDb25maWcuYWN0aW9ucy5wcmVFeHBhbmRTaW5nbGVTaG93Q2FyZEFjdGlvbiAmJiBtYXhBY3Rpb25zID09IDEgJiYgdGhpcy5faXRlbXNbMF0gaW5zdGFuY2VvZiBTaG93Q2FyZEFjdGlvbiAmJiB0aGlzLmlzQWN0aW9uQWxsb3dlZCh0aGlzLl9pdGVtc1swXSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0FjdGlvbkNhcmQoPFNob3dDYXJkQWN0aW9uPnRoaXMuX2l0ZW1zWzBdLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkQWN0aW9ucy5wdXNoKHRoaXMuX2l0ZW1zWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBidXR0b25TdHJpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBidXR0b25TdHJpcC5jbGFzc05hbWUgPSBob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy1hY3Rpb25TZXRcIik7XG4gICAgICAgICAgICBidXR0b25TdHJpcC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgICAgICBidXR0b25TdHJpcC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwibWVudWJhclwiKTtcblxuICAgICAgICAgICAgaWYgKG9yaWVudGF0aW9uID09IEVudW1zLk9yaWVudGF0aW9uLkhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBidXR0b25TdHJpcC5zdHlsZS5mbGV4RGlyZWN0aW9uID0gXCJyb3dcIjtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vd25lci5ob3Jpem9udGFsQWxpZ25tZW50ICYmIGhvc3RDb25maWcuYWN0aW9ucy5hY3Rpb25BbGlnbm1lbnQgIT0gRW51bXMuQWN0aW9uQWxpZ25tZW50LlN0cmV0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9vd25lci5ob3Jpem9udGFsQWxpZ25tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkhvcml6b250YWxBbGlnbm1lbnQuQ2VudGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblN0cmlwLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRW51bXMuSG9yaXpvbnRhbEFsaWdubWVudC5SaWdodDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25TdHJpcC5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwiZmxleC1lbmRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uU3RyaXAuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSBcImZsZXgtc3RhcnRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChob3N0Q29uZmlnLmFjdGlvbnMuYWN0aW9uQWxpZ25tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkFjdGlvbkFsaWdubWVudC5DZW50ZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uU3RyaXAuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSBcImNlbnRlclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5BY3Rpb25BbGlnbm1lbnQuUmlnaHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uU3RyaXAuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSBcImZsZXgtZW5kXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblN0cmlwLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJmbGV4LXN0YXJ0XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBidXR0b25TdHJpcC5zdHlsZS5mbGV4RGlyZWN0aW9uID0gXCJjb2x1bW5cIjtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vd25lci5ob3Jpem9udGFsQWxpZ25tZW50ICYmIGhvc3RDb25maWcuYWN0aW9ucy5hY3Rpb25BbGlnbm1lbnQgIT0gRW51bXMuQWN0aW9uQWxpZ25tZW50LlN0cmV0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9vd25lci5ob3Jpem9udGFsQWxpZ25tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkhvcml6b250YWxBbGlnbm1lbnQuQ2VudGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblN0cmlwLnN0eWxlLmFsaWduSXRlbXMgPSBcImNlbnRlclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5Ib3Jpem9udGFsQWxpZ25tZW50LlJpZ2h0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblN0cmlwLnN0eWxlLmFsaWduSXRlbXMgPSBcImZsZXgtZW5kXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblN0cmlwLnN0eWxlLmFsaWduSXRlbXMgPSBcImZsZXgtc3RhcnRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChob3N0Q29uZmlnLmFjdGlvbnMuYWN0aW9uQWxpZ25tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkFjdGlvbkFsaWdubWVudC5DZW50ZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uU3RyaXAuc3R5bGUuYWxpZ25JdGVtcyA9IFwiY2VudGVyXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkFjdGlvbkFsaWdubWVudC5SaWdodDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25TdHJpcC5zdHlsZS5hbGlnbkl0ZW1zID0gXCJmbGV4LWVuZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5BY3Rpb25BbGlnbm1lbnQuU3RyZXRjaDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25TdHJpcC5zdHlsZS5hbGlnbkl0ZW1zID0gXCJzdHJldGNoXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblN0cmlwLnN0eWxlLmFsaWduSXRlbXMgPSBcImZsZXgtc3RhcnRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYWxsb3dlZEFjdGlvbnMgPSB0aGlzLl9pdGVtcy5maWx0ZXIodGhpcy5pc0FjdGlvbkFsbG93ZWQuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgIGxldCBwcmltYXJ5QWN0aW9uczogQWN0aW9uW10gPSBbXTtcbiAgICAgICAgICAgIGxldCBzZWNvbmRhcnlBY3Rpb25zOiBBY3Rpb25bXSA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuX293bmVyLmlzRGVzaWduTW9kZSgpKSB7XG4gICAgICAgICAgICAgICAgYWxsb3dlZEFjdGlvbnMuZm9yRWFjaChhY3Rpb24gPT4gYWN0aW9uLm1vZGUgPT09IEVudW1zLkFjdGlvbk1vZGUuU2Vjb25kYXJ5ID8gc2Vjb25kYXJ5QWN0aW9ucy5wdXNoKGFjdGlvbikgOiBwcmltYXJ5QWN0aW9ucy5wdXNoKGFjdGlvbikpO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgcHJpbWFyeUFjdGlvbnMubGVuZ3RoID4gbWF4QWN0aW9ucywgZXh0cmEgYWN0aW9ucyBhcmUgbW92ZWQgdG8gb3ZlcmZsb3dcbiAgICAgICAgICAgICAgICBjb25zdCBvdmVyZmxvd1ByaW1hcnlBY3Rpb25zID0gcHJpbWFyeUFjdGlvbnMuc3BsaWNlKGhvc3RDb25maWcuYWN0aW9ucy5tYXhBY3Rpb25zKTtcblxuICAgICAgICAgICAgICAgIGlmIChHbG9iYWxTZXR0aW5ncy5hbGxvd01vcmVUaGFuTWF4QWN0aW9uc0luT3ZlcmZsb3dNZW51KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeUFjdGlvbnMucHVzaCguLi5vdmVyZmxvd1ByaW1hcnlBY3Rpb25zKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgc2hvdWxkUmVuZGVyT3ZlcmZsb3dBY3Rpb25CdXR0b24gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNlY29uZGFyeUFjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX292ZXJmbG93QWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vdmVyZmxvd0FjdGlvbiA9IG5ldyBPdmVyZmxvd0FjdGlvbihzZWNvbmRhcnlBY3Rpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX292ZXJmbG93QWN0aW9uLnNldFBhcmVudCh0aGlzLl9vd25lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vdmVyZmxvd0FjdGlvbltcIl9hY3Rpb25Db2xsZWN0aW9uXCJdID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBpc1Jvb3RBY3Rpb24gPSB0aGlzLl9vd25lciBpbnN0YW5jZW9mIEFkYXB0aXZlQ2FyZCAmJiAhdGhpcy5fb3duZXIucGFyZW50O1xuICAgICAgICAgICAgICAgICAgICBzaG91bGRSZW5kZXJPdmVyZmxvd0FjdGlvbkJ1dHRvbiA9ICFyYWlzZVJlbmRlck92ZXJmbG93QWN0aW9uc0V2ZW50KHRoaXMuX292ZXJmbG93QWN0aW9uLCBpc1Jvb3RBY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vdmVyZmxvd0FjdGlvbiAmJiBzaG91bGRSZW5kZXJPdmVyZmxvd0FjdGlvbkJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5QWN0aW9ucy5wdXNoKHRoaXMuX292ZXJmbG93QWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcmltYXJ5QWN0aW9ucyA9IGFsbG93ZWRBY3Rpb25zO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByaW1hcnlBY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFjdGlvbiA9IHByaW1hcnlBY3Rpb25zW2ldO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5yZW5kZXIoKTtcblxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24ucmVuZGVyZWRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmltYXJ5QWN0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ucmVuZGVyZWRFbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtcG9zaW5zZXRcIiwgKGkgKyAxKS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5yZW5kZXJlZEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1zZXRzaXplXCIsIHByaW1hcnlBY3Rpb25zLmxlbmd0aC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5yZW5kZXJlZEVsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcIm1lbnVpdGVtXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGhvc3RDb25maWcuYWN0aW9ucy5hY3Rpb25zT3JpZW50YXRpb24gPT0gRW51bXMuT3JpZW50YXRpb24uSG9yaXpvbnRhbCAmJiBob3N0Q29uZmlnLmFjdGlvbnMuYWN0aW9uQWxpZ25tZW50ID09IEVudW1zLkFjdGlvbkFsaWdubWVudC5TdHJldGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ucmVuZGVyZWRFbGVtZW50LnN0eWxlLmZsZXggPSBcIjAgMSAxMDAlXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ucmVuZGVyZWRFbGVtZW50LnN0eWxlLmZsZXggPSBcIjAgMSBhdXRvXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBidXR0b25TdHJpcC5hcHBlbmRDaGlsZChhY3Rpb24ucmVuZGVyZWRFbGVtZW50KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlZEFjdGlvbnMucHVzaChhY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpIDwgcHJpbWFyeUFjdGlvbnMubGVuZ3RoIC0gMSAmJiBob3N0Q29uZmlnLmFjdGlvbnMuYnV0dG9uU3BhY2luZyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzcGFjZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JpZW50YXRpb24gPT09IEVudW1zLk9yaWVudGF0aW9uLkhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFjZXIuc3R5bGUuZmxleCA9IFwiMCAwIGF1dG9cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFjZXIuc3R5bGUud2lkdGggPSBob3N0Q29uZmlnLmFjdGlvbnMuYnV0dG9uU3BhY2luZyArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlci5zdHlsZS5oZWlnaHQgPSBob3N0Q29uZmlnLmFjdGlvbnMuYnV0dG9uU3BhY2luZyArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHMuYXBwZW5kQ2hpbGQoYnV0dG9uU3RyaXAsIHNwYWNlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBidXR0b25TdHJpcENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBidXR0b25TdHJpcENvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICBidXR0b25TdHJpcENvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b25TdHJpcCk7XG5cbiAgICAgICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKGVsZW1lbnQsIGJ1dHRvblN0cmlwQ29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKGVsZW1lbnQsIHRoaXMuX2FjdGlvbkNhcmRDb250YWluZXIpO1xuXG4gICAgICAgIGZvciAobGV0IHJlbmRlcmVkQWN0aW9uIG9mIHRoaXMuX3JlbmRlcmVkQWN0aW9ucykge1xuICAgICAgICAgICAgaWYgKHJlbmRlcmVkQWN0aW9uLnN0YXRlID09IEFjdGlvbkJ1dHRvblN0YXRlLkV4cGFuZGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5leHBhbmRTaG93Q2FyZEFjdGlvbig8U2hvd0NhcmRBY3Rpb24+cmVuZGVyZWRBY3Rpb24sIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVkQWN0aW9ucy5sZW5ndGggPiAwID8gZWxlbWVudCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBhZGRBY3Rpb24oYWN0aW9uOiBBY3Rpb24pIHtcbiAgICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBhY3Rpb24gcGFyYW1ldGVyIGNhbm5vdCBiZSBudWxsLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoIWFjdGlvbi5wYXJlbnQgfHwgYWN0aW9uLnBhcmVudCA9PT0gdGhpcy5fb3duZXIpICYmIHRoaXMuX2l0ZW1zLmluZGV4T2YoYWN0aW9uKSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2l0ZW1zLnB1c2goYWN0aW9uKTtcblxuICAgICAgICAgICAgaWYgKCFhY3Rpb24ucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLnNldFBhcmVudCh0aGlzLl9vd25lcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFjdGlvbltcIl9hY3Rpb25Db2xsZWN0aW9uXCJdID0gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihTdHJpbmdzLmVycm9ycy5hY3Rpb25BbHJlYWR5UGFyZW50ZWQoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVBY3Rpb24oYWN0aW9uOiBBY3Rpb24pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuZXhwYW5kZWRBY3Rpb24gJiYgdGhpcy5fZXhwYW5kZWRBY3Rpb24gPT0gYWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbGxhcHNlRXhwYW5kZWRBY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhY3Rpb25JbmRleCA9IHRoaXMuX2l0ZW1zLmluZGV4T2YoYWN0aW9uKTtcblxuICAgICAgICBpZiAoYWN0aW9uSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5faXRlbXMuc3BsaWNlKGFjdGlvbkluZGV4LCAxKTtcblxuICAgICAgICAgICAgYWN0aW9uLnNldFBhcmVudCh1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICBhY3Rpb25bXCJfYWN0aW9uQ29sbGVjdGlvblwiXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9yZW5kZXJlZEFjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVuZGVyZWRBY3Rpb25zW2ldID09IGFjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlZEFjdGlvbnMuc3BsaWNlKGksIDEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuX2l0ZW1zID0gW107XG4gICAgICAgIHRoaXMuX3JlbmRlcmVkQWN0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLl9leHBhbmRlZEFjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXRBbGxJbnB1dHMocHJvY2Vzc0FjdGlvbnM6IGJvb2xlYW4gPSB0cnVlKTogSW5wdXRbXSB7XG4gICAgICAgIGxldCByZXN1bHQ6IElucHV0W10gPSBbXTtcblxuICAgICAgICBpZiAocHJvY2Vzc0FjdGlvbnMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGFjdGlvbiBvZiB0aGlzLl9pdGVtcykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoYWN0aW9uLmdldEFsbElucHV0cygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0UmVzb3VyY2VJbmZvcm1hdGlvbigpOiBJUmVzb3VyY2VJbmZvcm1hdGlvbltdIHtcbiAgICAgICAgbGV0IHJlc3VsdDogSVJlc291cmNlSW5mb3JtYXRpb25bXSA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGFjdGlvbiBvZiB0aGlzLl9pdGVtcykge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChhY3Rpb24uZ2V0UmVzb3VyY2VJbmZvcm1hdGlvbigpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0IHJlbmRlcmVkQWN0aW9uQ291bnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVkQWN0aW9ucy5sZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0IGV4cGFuZGVkQWN0aW9uKCk6IFNob3dDYXJkQWN0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4cGFuZGVkQWN0aW9uO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFjdGlvblNldCBleHRlbmRzIENhcmRFbGVtZW50IHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgb3JpZW50YXRpb25Qcm9wZXJ0eSA9IG5ldyBFbnVtUHJvcGVydHkoVmVyc2lvbnMudjFfMSwgXCJvcmllbnRhdGlvblwiLCBFbnVtcy5PcmllbnRhdGlvbik7XG5cbiAgICBAcHJvcGVydHkoQWN0aW9uU2V0Lm9yaWVudGF0aW9uUHJvcGVydHkpXG4gICAgb3JpZW50YXRpb24/OiBFbnVtcy5PcmllbnRhdGlvbjtcblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgcHJpdmF0ZSBfYWN0aW9uQ29sbGVjdGlvbjogQWN0aW9uQ29sbGVjdGlvbjtcblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFBhcnNlKHNvdXJjZTogYW55LCBjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFBhcnNlKHNvdXJjZSwgY29udGV4dCk7XG5cbiAgICAgICAgdGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5wYXJzZShzb3VyY2VbXCJhY3Rpb25zXCJdLCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxUb0pTT04odGFyZ2V0OiBQcm9wZXJ0eUJhZywgY29udGV4dDogU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgc3VwZXIuaW50ZXJuYWxUb0pTT04odGFyZ2V0LCBjb250ZXh0KTtcblxuICAgICAgICB0aGlzLl9hY3Rpb25Db2xsZWN0aW9uLnRvSlNPTih0YXJnZXQsIFwiYWN0aW9uc1wiLCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxSZW5kZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5yZW5kZXIodGhpcy5vcmllbnRhdGlvbiAhPT0gdW5kZWZpbmVkID8gdGhpcy5vcmllbnRhdGlvbiA6IHRoaXMuaG9zdENvbmZpZy5hY3Rpb25zLmFjdGlvbnNPcmllbnRhdGlvbiwgdGhpcy5pc0Rlc2lnbk1vZGUoKSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5fYWN0aW9uQ29sbGVjdGlvbiA9IG5ldyBBY3Rpb25Db2xsZWN0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIGlzQmxlZWRpbmdBdEJvdHRvbSgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGlvbkNvbGxlY3Rpb24ucmVuZGVyZWRBY3Rpb25Db3VudCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIuaXNCbGVlZGluZ0F0Qm90dG9tKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5nZXRBY3Rpb25Db3VudCgpID09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5leHBhbmRlZEFjdGlvbiAhPT0gdW5kZWZpbmVkICYmICF0aGlzLmhvc3RDb25maWcuYWN0aW9ucy5wcmVFeHBhbmRTaW5nbGVTaG93Q2FyZEFjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hY3Rpb25Db2xsZWN0aW9uLmV4cGFuZGVkQWN0aW9uICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRKc29uVHlwZU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiQWN0aW9uU2V0XCI7XG4gICAgfVxuXG4gICAgZ2V0QWN0aW9uQ291bnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGlvbkNvbGxlY3Rpb24uZ2V0QWN0aW9uQ291bnQoKTtcbiAgICB9XG5cbiAgICBnZXRBY3Rpb25BdChpbmRleDogbnVtYmVyKTogQWN0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLmdldEFjdGlvbkNvdW50KCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hY3Rpb25Db2xsZWN0aW9uLmdldEFjdGlvbkF0KGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5nZXRBY3Rpb25BdChpbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRBY3Rpb25CeUlkKGlkOiBzdHJpbmcpOiBBY3Rpb24gfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgcmVzdWx0OiBBY3Rpb24gfCB1bmRlZmluZWQgPSB0aGlzLl9hY3Rpb25Db2xsZWN0aW9uLmdldEFjdGlvbkJ5SWQoaWQpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQgPyByZXN1bHQgOiBzdXBlci5nZXRBY3Rpb25CeUlkKGlkKTtcbiAgICB9XG5cbiAgICBpbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0OiBWYWxpZGF0aW9uUmVzdWx0cykge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0KTtcblxuICAgICAgICB0aGlzLl9hY3Rpb25Db2xsZWN0aW9uLnZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0KTtcbiAgICB9XG5cbiAgICBhZGRBY3Rpb24oYWN0aW9uOiBBY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5hZGRBY3Rpb24oYWN0aW9uKTtcbiAgICB9XG5cbiAgICBnZXRBbGxJbnB1dHMocHJvY2Vzc0FjdGlvbnM6IGJvb2xlYW4gPSB0cnVlKTogSW5wdXRbXSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzQWN0aW9ucyA/IHRoaXMuX2FjdGlvbkNvbGxlY3Rpb24uZ2V0QWxsSW5wdXRzKCkgOiBbXTtcbiAgICB9XG5cbiAgICBnZXRSZXNvdXJjZUluZm9ybWF0aW9uKCk6IElSZXNvdXJjZUluZm9ybWF0aW9uW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5nZXRSZXNvdXJjZUluZm9ybWF0aW9uKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGluaGVyaXRkb2NcbiAgICAgKi9cbiAgICBmaW5kRE9NTm9kZU93bmVyKG5vZGU6IE5vZGUpOiBDYXJkT2JqZWN0IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IHRhcmdldDogQ2FyZE9iamVjdCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ2V0QWN0aW9uQ291bnQoKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gdGhpcy5nZXRBY3Rpb25BdChpKTtcblxuICAgICAgICAgICAgaWYgKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIHJlY3VyIHRocm91Z2ggZWFjaCBBY3Rpb25cbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBhY3Rpb24uZmluZERPTU5vZGVPd25lcihub2RlKTtcblxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBub3QgZm91bmQgaW4gYW55IEFjdGlvbiwgZGVmZXIgdG8gcGFyZW50IGltcGxlbWVudGF0aW9uXG4gICAgICAgIHJldHVybiBzdXBlci5maW5kRE9NTm9kZU93bmVyKG5vZGUpO1xuICAgIH1cblxuICAgIGdldCBpc0ludGVyYWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb250YWluZXJTdHlsZVByb3BlcnR5IGV4dGVuZHMgVmFsdWVTZXRQcm9wZXJ0eSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHJlYWRvbmx5IHRhcmdldFZlcnNpb246IFZlcnNpb24sXG4gICAgICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZyxcbiAgICAgICAgcmVhZG9ubHkgZGVmYXVsdFZhbHVlPzogc3RyaW5nLFxuICAgICAgICByZWFkb25seSBvbkdldEluaXRpYWxWYWx1ZT86IChzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCkgPT4gc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgdGFyZ2V0VmVyc2lvbixcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogRW51bXMuQ29udGFpbmVyU3R5bGUuRGVmYXVsdCB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IEVudW1zLkNvbnRhaW5lclN0eWxlLkVtcGhhc2lzIH0sXG4gICAgICAgICAgICAgICAgeyB0YXJnZXRWZXJzaW9uOiBWZXJzaW9ucy52MV8yLCB2YWx1ZTogRW51bXMuQ29udGFpbmVyU3R5bGUuQWNjZW50IH0sXG4gICAgICAgICAgICAgICAgeyB0YXJnZXRWZXJzaW9uOiBWZXJzaW9ucy52MV8yLCB2YWx1ZTogRW51bXMuQ29udGFpbmVyU3R5bGUuR29vZCB9LFxuICAgICAgICAgICAgICAgIHsgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbnMudjFfMiwgdmFsdWU6IEVudW1zLkNvbnRhaW5lclN0eWxlLkF0dGVudGlvbiB9LFxuICAgICAgICAgICAgICAgIHsgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbnMudjFfMiwgdmFsdWU6IEVudW1zLkNvbnRhaW5lclN0eWxlLldhcm5pbmcgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgIG9uR2V0SW5pdGlhbFZhbHVlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdHlsYWJsZUNhcmRFbGVtZW50Q29udGFpbmVyIGV4dGVuZHMgQ2FyZEVsZW1lbnRDb250YWluZXIge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSBzdHlsZVByb3BlcnR5ID0gbmV3IENvbnRhaW5lclN0eWxlUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJzdHlsZVwiKTtcblxuICAgIEBwcm9wZXJ0eShTdHlsYWJsZUNhcmRFbGVtZW50Q29udGFpbmVyLnN0eWxlUHJvcGVydHkpXG4gICAgZ2V0IHN0eWxlKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmICh0aGlzLmFsbG93Q3VzdG9tU3R5bGUpIHtcbiAgICAgICAgICAgIGxldCBzdHlsZSA9IHRoaXMuZ2V0VmFsdWUoU3R5bGFibGVDYXJkRWxlbWVudENvbnRhaW5lci5zdHlsZVByb3BlcnR5KTtcblxuICAgICAgICAgICAgaWYgKHN0eWxlICYmIHRoaXMuaG9zdENvbmZpZy5jb250YWluZXJTdHlsZXMuZ2V0U3R5bGVCeU5hbWUoc3R5bGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBzZXQgc3R5bGUodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnNldFZhbHVlKFN0eWxhYmxlQ2FyZEVsZW1lbnRDb250YWluZXIuc3R5bGVQcm9wZXJ0eSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgcHJvdGVjdGVkIGdldCBhbGxvd0N1c3RvbVN0eWxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGhhc0V4cGxpY2l0U3R5bGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKFN0eWxhYmxlQ2FyZEVsZW1lbnRDb250YWluZXIuc3R5bGVQcm9wZXJ0eSkgIT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXBwbHlCb3JkZXIoKSB7XG4gICAgICAgIC8vIE5vIGJvcmRlciBpbiBiYXNlIGltcGxlbWVudGF0aW9uXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFwcGx5QmFja2dyb3VuZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZWRFbGVtZW50KSB7XG4gICAgICAgICAgICBsZXQgc3R5bGVEZWZpbml0aW9uID0gdGhpcy5ob3N0Q29uZmlnLmNvbnRhaW5lclN0eWxlcy5nZXRTdHlsZUJ5TmFtZSh0aGlzLnN0eWxlLCB0aGlzLmhvc3RDb25maWcuY29udGFpbmVyU3R5bGVzLmdldFN0eWxlQnlOYW1lKHRoaXMuZGVmYXVsdFN0eWxlKSk7XG5cbiAgICAgICAgICAgIGlmIChzdHlsZURlZmluaXRpb24uYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmdDb2xvciA9IDxzdHJpbmc+VXRpbHMuc3RyaW5nVG9Dc3NDb2xvcihzdHlsZURlZmluaXRpb24uYmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBiZ0NvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFwcGx5UGFkZGluZygpIHtcbiAgICAgICAgc3VwZXIuYXBwbHlQYWRkaW5nKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnJlbmRlcmVkRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBoeXNpY2FsUGFkZGluZyA9IG5ldyBTcGFjaW5nRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGlmICh0aGlzLmdldEVmZmVjdGl2ZVBhZGRpbmcoKSkge1xuICAgICAgICAgICAgcGh5c2ljYWxQYWRkaW5nID0gdGhpcy5ob3N0Q29uZmlnLnBhZGRpbmdEZWZpbml0aW9uVG9TcGFjaW5nRGVmaW5pdGlvbih0aGlzLmdldEVmZmVjdGl2ZVBhZGRpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5zdHlsZS5wYWRkaW5nVG9wID0gcGh5c2ljYWxQYWRkaW5nLnRvcCArIFwicHhcIjtcbiAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGh5c2ljYWxQYWRkaW5nLnJpZ2h0ICsgXCJweFwiO1xuICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5zdHlsZS5wYWRkaW5nQm90dG9tID0gcGh5c2ljYWxQYWRkaW5nLmJvdHRvbSArIFwicHhcIjtcbiAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSBwaHlzaWNhbFBhZGRpbmcubGVmdCArIFwicHhcIjtcblxuICAgICAgICBpZiAodGhpcy5pc0JsZWVkaW5nKCkpIHtcbiAgICAgICAgICAgIC8vIEJsZWVkIGludG8gdGhlIGZpcnN0IHBhcmVudCB0aGF0IGRvZXMgaGF2ZSBwYWRkaW5nXG4gICAgICAgICAgICBsZXQgcGFkZGluZyA9IG5ldyBQYWRkaW5nRGVmaW5pdGlvbigpO1xuXG4gICAgICAgICAgICB0aGlzLmdldEltbWVkaWF0ZVN1cnJvdW5kaW5nUGFkZGluZyhwYWRkaW5nKTtcblxuICAgICAgICAgICAgbGV0IHN1cnJvdW5kaW5nUGFkZGluZyA9IHRoaXMuaG9zdENvbmZpZy5wYWRkaW5nRGVmaW5pdGlvblRvU3BhY2luZ0RlZmluaXRpb24ocGFkZGluZyk7XG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCItXCIgKyBzdXJyb3VuZGluZ1BhZGRpbmcucmlnaHQgKyBcInB4XCI7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gXCItXCIgKyBzdXJyb3VuZGluZ1BhZGRpbmcubGVmdCArIFwicHhcIjtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRGVzaWduTW9kZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuc3R5bGUubWFyZ2luVG9wID0gXCItXCIgKyBzdXJyb3VuZGluZ1BhZGRpbmcudG9wICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LnN0eWxlLm1hcmdpbkJvdHRvbSA9IFwiLVwiICsgc3Vycm91bmRpbmdQYWRkaW5nLmJvdHRvbSArIFwicHhcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuc2VwYXJhdG9yRWxlbWVudCAmJiB0aGlzLnNlcGFyYXRvck9yaWVudGF0aW9uID09IEVudW1zLk9yaWVudGF0aW9uLkhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlcGFyYXRvckVsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9IFwiLVwiICsgc3Vycm91bmRpbmdQYWRkaW5nLmxlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXBhcmF0b3JFbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCItXCIgKyBzdXJyb3VuZGluZ1BhZGRpbmcucmlnaHQgKyBcInB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5zdHlsZS5tYXJnaW5SaWdodCA9IFwiMFwiO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9IFwiMFwiO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuc3R5bGUubWFyZ2luVG9wID0gXCIwXCI7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5zdHlsZS5tYXJnaW5Cb3R0b20gPSBcIjBcIjtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2VwYXJhdG9yRWxlbWVudCAmJiB0aGlzLnNlcGFyYXRvck9yaWVudGF0aW9uID09PSBFbnVtcy5PcmllbnRhdGlvbi5Ib3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXBhcmF0b3JFbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCIwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXBhcmF0b3JFbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSBcIjBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRIYXNCYWNrZ3JvdW5kKCk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgY3VycmVudEVsZW1lbnQ6IENhcmRFbGVtZW50IHwgdW5kZWZpbmVkID0gdGhpcy5wYXJlbnQ7XG5cbiAgICAgICAgd2hpbGUgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudEVsZW1lbnRIYXNCYWNrZ3JvdW5kSW1hZ2UgPSBjdXJyZW50RWxlbWVudCBpbnN0YW5jZW9mIENvbnRhaW5lciA/IGN1cnJlbnRFbGVtZW50LmJhY2tncm91bmRJbWFnZS5pc1ZhbGlkKCkgOiBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50IGluc3RhbmNlb2YgU3R5bGFibGVDYXJkRWxlbWVudENvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0V4cGxpY2l0U3R5bGUgJiYgKGN1cnJlbnRFbGVtZW50LmdldEVmZmVjdGl2ZVN0eWxlKCkgIT0gdGhpcy5nZXRFZmZlY3RpdmVTdHlsZSgpIHx8IGN1cnJlbnRFbGVtZW50SGFzQmFja2dyb3VuZEltYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY3VycmVudEVsZW1lbnQucGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXREZWZhdWx0UGFkZGluZygpOiBQYWRkaW5nRGVmaW5pdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEhhc0JhY2tncm91bmQoKSB8fCB0aGlzLmdldEhhc0JvcmRlcigpID9cbiAgICAgICAgICAgIG5ldyBQYWRkaW5nRGVmaW5pdGlvbihcbiAgICAgICAgICAgICAgICBFbnVtcy5TcGFjaW5nLlBhZGRpbmcsXG4gICAgICAgICAgICAgICAgRW51bXMuU3BhY2luZy5QYWRkaW5nLFxuICAgICAgICAgICAgICAgIEVudW1zLlNwYWNpbmcuUGFkZGluZyxcbiAgICAgICAgICAgICAgICBFbnVtcy5TcGFjaW5nLlBhZGRpbmcpIDogc3VwZXIuZ2V0RGVmYXVsdFBhZGRpbmcoKTtcbiAgICB9XG5cbiAgICBpbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0OiBWYWxpZGF0aW9uUmVzdWx0cykge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFZhbGlkYXRlUHJvcGVydGllcyhjb250ZXh0KTtcblxuICAgICAgICBsZXQgZXhwbGljaXRTdHlsZSA9IHRoaXMuZ2V0VmFsdWUoU3R5bGFibGVDYXJkRWxlbWVudENvbnRhaW5lci5zdHlsZVByb3BlcnR5KTtcblxuICAgICAgICBpZiAoZXhwbGljaXRTdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZXQgc3R5bGVEZWZpbml0aW9uID0gdGhpcy5ob3N0Q29uZmlnLmNvbnRhaW5lclN0eWxlcy5nZXRTdHlsZUJ5TmFtZShleHBsaWNpdFN0eWxlKTtcblxuICAgICAgICAgICAgaWYgKCFzdHlsZURlZmluaXRpb24pIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmFkZEZhaWx1cmUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5JbnZhbGlkUHJvcGVydHlWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5ncy5lcnJvcnMuaW52YWxpZFByb3BlcnR5VmFsdWUoZXhwbGljaXRTdHlsZSwgXCJzdHlsZVwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgcmVuZGVyZWRFbGVtZW50ID0gc3VwZXIucmVuZGVyKCk7XG5cbiAgICAgICAgaWYgKHJlbmRlcmVkRWxlbWVudCAmJiB0aGlzLmdldEhhc0JhY2tncm91bmQoKSkge1xuICAgICAgICAgICAgdGhpcy5hcHBseUJhY2tncm91bmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXBwbHlCb3JkZXIoKTtcblxuICAgICAgICByZXR1cm4gcmVuZGVyZWRFbGVtZW50O1xuICAgIH1cblxuICAgIGdldEVmZmVjdGl2ZVN0eWxlKCk6IHN0cmluZyB7XG4gICAgICAgIGxldCBlZmZlY3RpdmVTdHlsZSA9IHRoaXMuc3R5bGU7XG5cbiAgICAgICAgcmV0dXJuIGVmZmVjdGl2ZVN0eWxlID8gZWZmZWN0aXZlU3R5bGUgOiBzdXBlci5nZXRFZmZlY3RpdmVTdHlsZSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbnRhaW5lckJhc2UgZXh0ZW5kcyBTdHlsYWJsZUNhcmRFbGVtZW50Q29udGFpbmVyIHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgYmxlZWRQcm9wZXJ0eSA9IG5ldyBCb29sUHJvcGVydHkoVmVyc2lvbnMudjFfMiwgXCJibGVlZFwiLCBmYWxzZSk7XG4gICAgc3RhdGljIHJlYWRvbmx5IG1pbkhlaWdodFByb3BlcnR5ID0gbmV3IFBpeGVsU2l6ZVByb3BlcnR5KFZlcnNpb25zLnYxXzIsIFwibWluSGVpZ2h0XCIpO1xuXG4gICAgQHByb3BlcnR5KENvbnRhaW5lckJhc2UuYmxlZWRQcm9wZXJ0eSlcbiAgICBwcml2YXRlIF9ibGVlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgQHByb3BlcnR5KENvbnRhaW5lckJhc2UubWluSGVpZ2h0UHJvcGVydHkpXG4gICAgbWluUGl4ZWxIZWlnaHQ/OiBudW1iZXI7XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByb3RlY3RlZCBhZGp1c3RSZW5kZXJlZEVsZW1lbnRTaXplKHJlbmRlcmVkRWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIuYWRqdXN0UmVuZGVyZWRFbGVtZW50U2l6ZShyZW5kZXJlZEVsZW1lbnQpO1xuXG4gICAgICAgIGlmICh0aGlzLm1pblBpeGVsSGVpZ2h0KSB7XG4gICAgICAgICAgICByZW5kZXJlZEVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gdGhpcy5taW5QaXhlbEhlaWdodCArIFwicHhcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRIYXNFeHBhbmRlZEFjdGlvbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRCbGVlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JsZWVkO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRCbGVlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9ibGVlZCA9IHZhbHVlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgcmVuZGVyZWRBY3Rpb25Db3VudCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBpc0JsZWVkaW5nKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiAodGhpcy5nZXRIYXNCYWNrZ3JvdW5kKCkgfHwgdGhpcy5ob3N0Q29uZmlnLmFsd2F5c0FsbG93QmxlZWQpICYmIHRoaXMuZ2V0QmxlZWQoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kSW1hZ2UgZXh0ZW5kcyBTZXJpYWxpemFibGVPYmplY3Qge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSB1cmxQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcInVybFwiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgZmlsbE1vZGVQcm9wZXJ0eSA9IG5ldyBFbnVtUHJvcGVydHkoVmVyc2lvbnMudjFfMiwgXCJmaWxsTW9kZVwiLCBFbnVtcy5GaWxsTW9kZSwgRW51bXMuRmlsbE1vZGUuQ292ZXIpO1xuICAgIHN0YXRpYyByZWFkb25seSBob3Jpem9udGFsQWxpZ25tZW50UHJvcGVydHkgPSBuZXcgRW51bVByb3BlcnR5KFZlcnNpb25zLnYxXzIsIFwiaG9yaXpvbnRhbEFsaWdubWVudFwiLCBFbnVtcy5Ib3Jpem9udGFsQWxpZ25tZW50LCBFbnVtcy5Ib3Jpem9udGFsQWxpZ25tZW50LkxlZnQpO1xuICAgIHN0YXRpYyByZWFkb25seSB2ZXJ0aWNhbEFsaWdubWVudFByb3BlcnR5ID0gbmV3IEVudW1Qcm9wZXJ0eShWZXJzaW9ucy52MV8yLCBcInZlcnRpY2FsQWxpZ25tZW50XCIsIEVudW1zLlZlcnRpY2FsQWxpZ25tZW50LCBFbnVtcy5WZXJ0aWNhbEFsaWdubWVudC5Ub3ApO1xuXG4gICAgQHByb3BlcnR5KEJhY2tncm91bmRJbWFnZS51cmxQcm9wZXJ0eSlcbiAgICB1cmw/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoQmFja2dyb3VuZEltYWdlLmZpbGxNb2RlUHJvcGVydHkpXG4gICAgZmlsbE1vZGU6IEVudW1zLkZpbGxNb2RlO1xuXG4gICAgQHByb3BlcnR5KEJhY2tncm91bmRJbWFnZS5ob3Jpem9udGFsQWxpZ25tZW50UHJvcGVydHkpXG4gICAgaG9yaXpvbnRhbEFsaWdubWVudDogRW51bXMuSG9yaXpvbnRhbEFsaWdubWVudDtcblxuICAgIEBwcm9wZXJ0eShCYWNrZ3JvdW5kSW1hZ2UudmVydGljYWxBbGlnbm1lbnRQcm9wZXJ0eSlcbiAgICB2ZXJ0aWNhbEFsaWdubWVudDogRW51bXMuVmVydGljYWxBbGlnbm1lbnQ7XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByb3RlY3RlZCBnZXRTY2hlbWFLZXkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiQmFja2dyb3VuZEltYWdlXCI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUGFyc2Uoc291cmNlOiBhbnksIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy5yZXNldERlZmF1bHRWYWx1ZXMoKTtcbiAgICAgICAgICAgIHRoaXMudXJsID0gc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmludGVybmFsUGFyc2Uoc291cmNlLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFwcGx5KGVsZW1lbnQ6IENhcmRFbGVtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnVybCAmJiBlbGVtZW50LnJlbmRlcmVkRWxlbWVudCkge1xuICAgICAgICAgICAgZWxlbWVudC5yZW5kZXJlZEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXCJ1cmwoJ1wiICsgZWxlbWVudC5wcmVQcm9jZXNzUHJvcGVydHlWYWx1ZShCYWNrZ3JvdW5kSW1hZ2UudXJsUHJvcGVydHksIHRoaXMudXJsKSArIFwiJylcIjtcblxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmZpbGxNb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5GaWxsTW9kZS5SZXBlYXQ6XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVuZGVyZWRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRSZXBlYXQgPSBcInJlcGVhdFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkZpbGxNb2RlLlJlcGVhdEhvcml6b250YWxseTpcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW5kZXJlZEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZFJlcGVhdCA9IFwicmVwZWF0LXhcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5GaWxsTW9kZS5SZXBlYXRWZXJ0aWNhbGx5OlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbmRlcmVkRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kUmVwZWF0ID0gXCJyZXBlYXQteVwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkZpbGxNb2RlLkNvdmVyOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVuZGVyZWRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRSZXBlYXQgPSBcIm5vLXJlcGVhdFwiO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbmRlcmVkRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9IFwiY292ZXJcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5ob3Jpem9udGFsQWxpZ25tZW50KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5Ib3Jpem9udGFsQWxpZ25tZW50LkNlbnRlcjpcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW5kZXJlZEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uWCA9IFwiY2VudGVyXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRW51bXMuSG9yaXpvbnRhbEFsaWdubWVudC5SaWdodDpcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW5kZXJlZEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uWCA9IFwicmlnaHRcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy52ZXJ0aWNhbEFsaWdubWVudCkge1xuICAgICAgICAgICAgICAgIGNhc2UgRW51bXMuVmVydGljYWxBbGlnbm1lbnQuQ2VudGVyOlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbmRlcmVkRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb25ZID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5WZXJ0aWNhbEFsaWdubWVudC5Cb3R0b206XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVuZGVyZWRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRQb3NpdGlvblkgPSBcImJvdHRvbVwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnVybCA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb250YWluZXIgZXh0ZW5kcyBDb250YWluZXJCYXNlIHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgYmFja2dyb3VuZEltYWdlUHJvcGVydHkgPSBuZXcgU2VyaWFsaXphYmxlT2JqZWN0UHJvcGVydHkoXG4gICAgICAgIFZlcnNpb25zLnYxXzAsXG4gICAgICAgIFwiYmFja2dyb3VuZEltYWdlXCIsXG4gICAgICAgIEJhY2tncm91bmRJbWFnZSk7XG4gICAgc3RhdGljIHJlYWRvbmx5IHZlcnRpY2FsQ29udGVudEFsaWdubWVudFByb3BlcnR5ID0gbmV3IEVudW1Qcm9wZXJ0eShcbiAgICAgICAgVmVyc2lvbnMudjFfMSxcbiAgICAgICAgXCJ2ZXJ0aWNhbENvbnRlbnRBbGlnbm1lbnRcIixcbiAgICAgICAgRW51bXMuVmVydGljYWxBbGlnbm1lbnQpO1xuICAgIHN0YXRpYyByZWFkb25seSBydGxQcm9wZXJ0eSA9IG5ldyBCb29sUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJydGxcIik7XG5cbiAgICBAcHJvcGVydHkoQ29udGFpbmVyLmJhY2tncm91bmRJbWFnZVByb3BlcnR5KVxuICAgIGdldCBiYWNrZ3JvdW5kSW1hZ2UoKTogQmFja2dyb3VuZEltYWdlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoQ29udGFpbmVyLmJhY2tncm91bmRJbWFnZVByb3BlcnR5KTtcbiAgICB9XG5cbiAgICBAcHJvcGVydHkoQ29udGFpbmVyLnZlcnRpY2FsQ29udGVudEFsaWdubWVudFByb3BlcnR5KVxuICAgIHZlcnRpY2FsQ29udGVudEFsaWdubWVudD86IEVudW1zLlZlcnRpY2FsQWxpZ25tZW50O1xuXG4gICAgQHByb3BlcnR5KENvbnRhaW5lci5ydGxQcm9wZXJ0eSlcbiAgICBydGw/OiBib29sZWFuO1xuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICBwcml2YXRlIF9pdGVtczogQ2FyZEVsZW1lbnRbXSA9IFtdO1xuICAgIHByaXZhdGUgX3JlbmRlcmVkSXRlbXM6IENhcmRFbGVtZW50W10gPSBbXTtcblxuICAgIHByaXZhdGUgaW5zZXJ0SXRlbUF0KFxuICAgICAgICBpdGVtOiBDYXJkRWxlbWVudCxcbiAgICAgICAgaW5kZXg6IG51bWJlcixcbiAgICAgICAgZm9yY2VJbnNlcnQ6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKCFpdGVtLnBhcmVudCB8fCBmb3JjZUluc2VydCkge1xuICAgICAgICAgICAgaWYgKGl0ZW0uaXNTdGFuZGFsb25lKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLl9pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zLnNwbGljZShpbmRleCwgMCwgaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaXRlbS5zZXRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoU3RyaW5ncy5lcnJvcnMuZWxlbWVudFR5cGVOb3RTdGFuZGFsb25lKGl0ZW0uZ2V0SnNvblR5cGVOYW1lKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihTdHJpbmdzLmVycm9ycy5lbGVtZW50QWxyZWFkeVBhcmVudGVkKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldEl0ZW1zQ29sbGVjdGlvblByb3BlcnR5TmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJpdGVtc1wiO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhcHBseUJhY2tncm91bmQoKSB7XG4gICAgICAgIGlmICh0aGlzLmJhY2tncm91bmRJbWFnZS5pc1ZhbGlkKCkgJiYgdGhpcy5yZW5kZXJlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlLmFwcGx5KHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIuYXBwbHlCYWNrZ3JvdW5kKCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUmVuZGVyKCk6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyZWRJdGVtcyA9IFtdO1xuXG4gICAgICAgIC8vIENhY2hlIGhvc3RDb25maWcgdG8gYXZvaWQgd2Fsa2luZyB0aGUgcGFyZW50IGhpZXJhcmNoeSBzZXZlcmFsIHRpbWVzXG4gICAgICAgIGxldCBob3N0Q29uZmlnID0gdGhpcy5ob3N0Q29uZmlnO1xuXG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICBpZiAodGhpcy5ydGwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZWxlbWVudC5kaXIgPSB0aGlzLnJ0bCA/IFwicnRsXCIgOiBcImx0clwiO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLWNvbnRhaW5lclwiKSk7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmZsZXhEaXJlY3Rpb24gPSBcImNvbHVtblwiO1xuXG4gICAgICAgIGlmIChHbG9iYWxTZXR0aW5ncy51c2VBZHZhbmNlZENhcmRCb3R0b21UcnVuY2F0aW9uKSB7XG4gICAgICAgICAgICAvLyBGb3JjZXMgdGhlIGNvbnRhaW5lciB0byBiZSBhdCBsZWFzdCBhcyB0YWxsIGFzIGl0cyBjb250ZW50LlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEZpeGVzIGEgcXVpcmsgaW4gQ2hyb21lIHdoZXJlLCBmb3IgbmVzdGVkIGZsZXggZWxlbWVudHMsIHRoZVxuICAgICAgICAgICAgLy8gaW5uZXIgZWxlbWVudCdzIGhlaWdodCB3b3VsZCBuZXZlciBleGNlZWQgdGhlIG91dGVyIGVsZW1lbnQnc1xuICAgICAgICAgICAgLy8gaGVpZ2h0LiBUaGlzIGNhdXNlZCBvdmVyZmxvdyB0cnVuY2F0aW9uIHRvIGJyZWFrIC0tIGNvbnRhaW5lcnNcbiAgICAgICAgICAgIC8vIHdvdWxkIGFsd2F5cyBiZSBtZWFzdXJlZCBhcyBub3Qgb3ZlcmZsb3dpbmcsIHNpbmNlIHRoZWlyIGhlaWdodHNcbiAgICAgICAgICAgIC8vIHdlcmUgY29uc3RyYWluZWQgYnkgdGhlaXIgcGFyZW50cyBhcyBvcHBvc2VkIHRvIHRydWx5IHJlZmxlY3RpbmdcbiAgICAgICAgICAgIC8vIHRoZSBoZWlnaHQgb2YgdGhlaXIgY29udGVudC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBTZWUgdGhlIFwiQnJvd3NlciBSZW5kZXJpbmcgTm90ZXNcIiBzZWN0aW9uIG9mIHRoaXMgYW5zd2VyOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzYyNDcxNDAvd2h5LWRvZXNudC1mbGV4LWl0ZW0tc2hyaW5rLXBhc3QtY29udGVudC1zaXplXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9ICctd2Via2l0LW1pbi1jb250ZW50JztcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAodGhpcy5nZXRFZmZlY3RpdmVWZXJ0aWNhbENvbnRlbnRBbGlnbm1lbnQoKSkge1xuICAgICAgICAgICAgY2FzZSBFbnVtcy5WZXJ0aWNhbEFsaWdubWVudC5DZW50ZXI6XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwiY2VudGVyXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEVudW1zLlZlcnRpY2FsQWxpZ25tZW50LkJvdHRvbTpcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJmbGV4LWVuZFwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJmbGV4LXN0YXJ0XCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLl9pdGVtcykge1xuICAgICAgICAgICAgICAgIGxldCByZW5kZXJlZEl0ZW0gPSB0aGlzLmlzRWxlbWVudEFsbG93ZWQoaXRlbSkgPyBpdGVtLnJlbmRlcigpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlbmRlcmVkSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVuZGVyZWRJdGVtcy5sZW5ndGggPiAwICYmIGl0ZW0uc2VwYXJhdG9yRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXBhcmF0b3JFbGVtZW50LnN0eWxlLmZsZXggPSBcIjAgMCBhdXRvXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKGVsZW1lbnQsIGl0ZW0uc2VwYXJhdG9yRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBVdGlscy5hcHBlbmRDaGlsZChlbGVtZW50LCByZW5kZXJlZEl0ZW0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkSXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0Rlc2lnbk1vZGUoKSkge1xuICAgICAgICAgICAgICAgIGxldCBwbGFjZWhvbGRlckVsZW1lbnQgPSB0aGlzLmNyZWF0ZVBsYWNlaG9sZGVyRWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyRWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcblxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQocGxhY2Vob2xkZXJFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB0cnVuY2F0ZU92ZXJmbG93KG1heEhlaWdodDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLnJlbmRlcmVkRWxlbWVudCkge1xuICAgICAgICAgICAgLy8gQWRkIDEgdG8gYWNjb3VudCBmb3Igcm91bmRpbmcgZGlmZmVyZW5jZXMgYmV0d2VlbiBicm93c2Vyc1xuICAgICAgICAgICAgbGV0IGJvdW5kYXJ5ID0gdGhpcy5yZW5kZXJlZEVsZW1lbnQub2Zmc2V0VG9wICsgbWF4SGVpZ2h0ICsgMTtcblxuICAgICAgICAgICAgbGV0IGhhbmRsZUVsZW1lbnQgPSAoY2FyZEVsZW1lbnQ6IENhcmRFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGVsdCA9IGNhcmRFbGVtZW50LnJlbmRlcmVkRWxlbWVudDtcblxuICAgICAgICAgICAgICAgIGlmIChlbHQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChVdGlscy5nZXRGaXRTdGF0dXMoZWx0LCBib3VuZGFyeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRW51bXMuQ29udGFpbmVyRml0U3RhdHVzLkZ1bGx5SW5Db250YWluZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNpemVDaGFuZ2VkID0gY2FyZEVsZW1lbnRbJ3Jlc2V0T3ZlcmZsb3cnXSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBlbGVtZW50J3Mgc2l6ZSBjaGFuZ2VkIGFmdGVyIHJlc2V0dGluZyBjb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGhhdmUgdG8gY2hlY2sgaWYgaXQgc3RpbGwgZml0cyBmdWxseSBpbiB0aGUgY2FyZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaXplQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVFbGVtZW50KGNhcmRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkNvbnRhaW5lckZpdFN0YXR1cy5PdmVyZmxvd2luZzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF4SGVpZ2h0ID0gYm91bmRhcnkgLSBlbHQub2Zmc2V0VG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRFbGVtZW50WydoYW5kbGVPdmVyZmxvdyddKG1heEhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkNvbnRhaW5lckZpdFN0YXR1cy5GdWxseU91dE9mQ29udGFpbmVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRFbGVtZW50WydoYW5kbGVPdmVyZmxvdyddKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLl9pdGVtcykge1xuICAgICAgICAgICAgICAgIGhhbmRsZUVsZW1lbnQoaXRlbSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1bmRvT3ZlcmZsb3dUcnVuY2F0aW9uKCkge1xuICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuX2l0ZW1zKSB7XG4gICAgICAgICAgICBpdGVtWydyZXNldE92ZXJmbG93J10oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRIYXNCYWNrZ3JvdW5kKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5iYWNrZ3JvdW5kSW1hZ2UuaXNWYWxpZCgpIHx8IHN1cGVyLmdldEhhc0JhY2tncm91bmQoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxQYXJzZShzb3VyY2U6IGFueSwgY29udGV4dDogU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgc3VwZXIuaW50ZXJuYWxQYXJzZShzb3VyY2UsIGNvbnRleHQpO1xuXG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5zZXRTaG91bGRGYWxsYmFjayhmYWxzZSk7XG5cbiAgICAgICAgbGV0IGpzb25JdGVtcyA9IHNvdXJjZVt0aGlzLmdldEl0ZW1zQ29sbGVjdGlvblByb3BlcnR5TmFtZSgpXTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uSXRlbXMpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIGpzb25JdGVtcykge1xuICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gY29udGV4dC5wYXJzZUVsZW1lbnQodGhpcywgaXRlbSwgIXRoaXMuaXNEZXNpZ25Nb2RlKCkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRJdGVtQXQoZWxlbWVudCwgLTEsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFRvSlNPTih0YXJnZXQ6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFRvSlNPTih0YXJnZXQsIGNvbnRleHQpO1xuXG4gICAgICAgIGNvbnRleHQuc2VyaWFsaXplQXJyYXkodGFyZ2V0LCB0aGlzLmdldEl0ZW1zQ29sbGVjdGlvblByb3BlcnR5TmFtZSgpLCB0aGlzLl9pdGVtcyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBpc1NlbGVjdGFibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGdldEVmZmVjdGl2ZVZlcnRpY2FsQ29udGVudEFsaWdubWVudCgpOiBFbnVtcy5WZXJ0aWNhbEFsaWdubWVudCB7XG4gICAgICAgIGlmICh0aGlzLnZlcnRpY2FsQ29udGVudEFsaWdubWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52ZXJ0aWNhbENvbnRlbnRBbGlnbm1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGFyZW50Q29udGFpbmVyID0gdGhpcy5nZXRQYXJlbnRDb250YWluZXIoKTtcblxuICAgICAgICByZXR1cm4gcGFyZW50Q29udGFpbmVyID8gcGFyZW50Q29udGFpbmVyLmdldEVmZmVjdGl2ZVZlcnRpY2FsQ29udGVudEFsaWdubWVudCgpIDogRW51bXMuVmVydGljYWxBbGlnbm1lbnQuVG9wO1xuICAgIH1cblxuICAgIGdldEl0ZW1Db3VudCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5faXRlbXMubGVuZ3RoO1xuICAgIH1cblxuICAgIGdldEl0ZW1BdChpbmRleDogbnVtYmVyKTogQ2FyZEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5faXRlbXNbaW5kZXhdO1xuICAgIH1cblxuICAgIGdldEZpcnN0VmlzaWJsZVJlbmRlcmVkSXRlbSgpOiBDYXJkRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmICh0aGlzLnJlbmRlcmVkRWxlbWVudCAmJiB0aGlzLl9yZW5kZXJlZEl0ZW1zICYmIHRoaXMuX3JlbmRlcmVkSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLl9yZW5kZXJlZEl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGdldExhc3RWaXNpYmxlUmVuZGVyZWRJdGVtKCk6IENhcmRFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZWRFbGVtZW50ICYmIHRoaXMuX3JlbmRlcmVkSXRlbXMgJiYgdGhpcy5fcmVuZGVyZWRJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5fcmVuZGVyZWRJdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZW5kZXJlZEl0ZW1zW2ldLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyZWRJdGVtc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGdldEpzb25UeXBlTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJDb250YWluZXJcIjtcbiAgICB9XG5cbiAgICBpc0ZpcnN0RWxlbWVudChlbGVtZW50OiBDYXJkRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgZGVzaWduTW9kZSA9IHRoaXMuaXNEZXNpZ25Nb2RlKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLl9pdGVtcykge1xuICAgICAgICAgICAgaWYgKGl0ZW0uaXNWaXNpYmxlIHx8IGRlc2lnbk1vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbSA9PSBlbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlzTGFzdEVsZW1lbnQoZWxlbWVudDogQ2FyZEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGRlc2lnbk1vZGUgPSB0aGlzLmlzRGVzaWduTW9kZSgpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLl9pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2l0ZW1zW2ldLmlzVmlzaWJsZSB8fCBkZXNpZ25Nb2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW2ldID09IGVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaXNSdGwoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLnJ0bCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ydGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgcGFyZW50Q29udGFpbmVyID0gdGhpcy5nZXRQYXJlbnRDb250YWluZXIoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudENvbnRhaW5lciA/IHBhcmVudENvbnRhaW5lci5pc1J0bCgpIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc0JsZWVkaW5nQXRUb3AoKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBmaXJzdFJlbmRlcmVkSXRlbSA9IHRoaXMuZ2V0Rmlyc3RWaXNpYmxlUmVuZGVyZWRJdGVtKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaXNCbGVlZGluZygpIHx8IChmaXJzdFJlbmRlcmVkSXRlbSA/IGZpcnN0UmVuZGVyZWRJdGVtLmlzQmxlZWRpbmdBdFRvcCgpIDogZmFsc2UpO1xuICAgIH1cblxuICAgIGlzQmxlZWRpbmdBdEJvdHRvbSgpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGxhc3RSZW5kZXJlZEl0ZW0gPSB0aGlzLmdldExhc3RWaXNpYmxlUmVuZGVyZWRJdGVtKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaXNCbGVlZGluZygpIHx8IChsYXN0UmVuZGVyZWRJdGVtID8gbGFzdFJlbmRlcmVkSXRlbS5pc0JsZWVkaW5nQXRCb3R0b20oKSAmJiBsYXN0UmVuZGVyZWRJdGVtLmdldEVmZmVjdGl2ZVN0eWxlKCkgPT0gdGhpcy5nZXRFZmZlY3RpdmVTdHlsZSgpIDogZmFsc2UpO1xuICAgIH1cblxuICAgIGluZGV4T2YoY2FyZEVsZW1lbnQ6IENhcmRFbGVtZW50KTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmluZGV4T2YoY2FyZEVsZW1lbnQpO1xuICAgIH1cblxuICAgIGFkZEl0ZW0oaXRlbTogQ2FyZEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5pbnNlcnRJdGVtQXQoaXRlbSwgLTEsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpbnNlcnRJdGVtQmVmb3JlKGl0ZW06IENhcmRFbGVtZW50LCBpbnNlcnRCZWZvcmU6IENhcmRFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0SXRlbUF0KGl0ZW0sIHRoaXMuX2l0ZW1zLmluZGV4T2YoaW5zZXJ0QmVmb3JlKSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGluc2VydEl0ZW1BZnRlcihpdGVtOiBDYXJkRWxlbWVudCwgaW5zZXJ0QWZ0ZXI6IENhcmRFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0SXRlbUF0KGl0ZW0sIHRoaXMuX2l0ZW1zLmluZGV4T2YoaW5zZXJ0QWZ0ZXIpICsgMSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHJlbW92ZUl0ZW0oaXRlbTogQ2FyZEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGl0ZW1JbmRleCA9IHRoaXMuX2l0ZW1zLmluZGV4T2YoaXRlbSk7XG5cbiAgICAgICAgaWYgKGl0ZW1JbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9pdGVtcy5zcGxpY2UoaXRlbUluZGV4LCAxKTtcblxuICAgICAgICAgICAgaXRlbS5zZXRQYXJlbnQodW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgdGhpcy51cGRhdGVMYXlvdXQoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuX2l0ZW1zID0gW107XG4gICAgICAgIHRoaXMuX3JlbmRlcmVkSXRlbXMgPSBbXTtcbiAgICB9XG5cbiAgICBnZXRSZXNvdXJjZUluZm9ybWF0aW9uKCk6IElSZXNvdXJjZUluZm9ybWF0aW9uW10ge1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3VwZXIuZ2V0UmVzb3VyY2VJbmZvcm1hdGlvbigpO1xuXG4gICAgICAgIGlmICh0aGlzLmJhY2tncm91bmRJbWFnZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiA8c3RyaW5nPnRoaXMuYmFja2dyb3VuZEltYWdlLnVybCxcbiAgICAgICAgICAgICAgICAgICAgbWltZVR5cGU6IFwiaW1hZ2VcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGdldEFjdGlvbkJ5SWQoaWQ6IHN0cmluZyk6IEFjdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCByZXN1bHQ6IEFjdGlvbiB8IHVuZGVmaW5lZCA9IHN1cGVyLmdldEFjdGlvbkJ5SWQoaWQpO1xuXG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnNlbGVjdEFjdGlvbi5nZXRBY3Rpb25CeUlkKGlkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuX2l0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW0uZ2V0QWN0aW9uQnlJZChpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGdldCBwYWRkaW5nKCk6IFBhZGRpbmdEZWZpbml0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFkZGluZygpO1xuICAgIH1cblxuICAgIHNldCBwYWRkaW5nKHZhbHVlOiBQYWRkaW5nRGVmaW5pdGlvbiB8IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnNldFBhZGRpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIGdldCBzZWxlY3RBY3Rpb24oKTogQWN0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdEFjdGlvbjtcbiAgICB9XG5cbiAgICBzZXQgc2VsZWN0QWN0aW9uKHZhbHVlOiBBY3Rpb24gfCB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fc2VsZWN0QWN0aW9uID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGJsZWVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCbGVlZCgpO1xuICAgIH1cblxuICAgIHNldCBibGVlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnNldEJsZWVkKHZhbHVlKTtcbiAgICB9XG59XG5cbmV4cG9ydCB0eXBlIENvbHVtbldpZHRoID0gU2l6ZUFuZFVuaXQgfCBcImF1dG9cIiB8IFwic3RyZXRjaFwiO1xuXG5leHBvcnQgY2xhc3MgQ29sdW1uIGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgICAvLyNyZWdpb24gU2NoZW1hXG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgd2lkdGhQcm9wZXJ0eSA9IG5ldyBDdXN0b21Qcm9wZXJ0eTxDb2x1bW5XaWR0aD4oXG4gICAgICAgIFZlcnNpb25zLnYxXzAsXG4gICAgICAgIFwid2lkdGhcIixcbiAgICAgICAgKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCBwcm9wZXJ0eTogUHJvcGVydHlEZWZpbml0aW9uLCBzb3VyY2U6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6IENvbHVtbldpZHRoID0gcHJvcGVydHkuZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gc291cmNlW3Byb3BlcnR5Lm5hbWVdO1xuICAgICAgICAgICAgbGV0IGludmFsaWRXaWR0aCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgU2l6ZUFuZFVuaXQodmFsdWUsIEVudW1zLlNpemVVbml0LldlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gXCJhdXRvXCIgfHwgdmFsdWUgPT09IFwic3RyZXRjaFwiKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBTaXplQW5kVW5pdC5wYXJzZSh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC51bml0ID09PSBFbnVtcy5TaXplVW5pdC5QaXhlbCAmJiBwcm9wZXJ0eS50YXJnZXRWZXJzaW9uLmNvbXBhcmVUbyhjb250ZXh0LnRhcmdldFZlcnNpb24pID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZFdpZHRoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkV2lkdGggPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGludmFsaWRXaWR0aCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbnZhbGlkV2lkdGgpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxvZ1BhcnNlRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgIHNlbmRlcixcbiAgICAgICAgICAgICAgICAgICAgRW51bXMuVmFsaWRhdGlvbkV2ZW50LkludmFsaWRQcm9wZXJ0eVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy5pbnZhbGlkQ29sdW1uV2lkdGgodmFsdWUpKTtcblxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICAoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QsIHByb3BlcnR5OiBQcm9wZXJ0eURlZmluaXRpb24sIHRhcmdldDogUHJvcGVydHlCYWcsIHZhbHVlOiBDb2x1bW5XaWR0aCwgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBTaXplQW5kVW5pdCkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS51bml0ID09PSBFbnVtcy5TaXplVW5pdC5QaXhlbCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNlcmlhbGl6ZVZhbHVlKHRhcmdldCwgXCJ3aWR0aFwiLCB2YWx1ZS5waHlzaWNhbFNpemUgKyBcInB4XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXJpYWxpemVOdW1iZXIodGFyZ2V0LCBcIndpZHRoXCIsIHZhbHVlLnBoeXNpY2FsU2l6ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zZXJpYWxpemVWYWx1ZSh0YXJnZXQsIFwid2lkdGhcIiwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInN0cmV0Y2hcIik7XG5cbiAgICBAcHJvcGVydHkoQ29sdW1uLndpZHRoUHJvcGVydHkpXG4gICAgd2lkdGg6IENvbHVtbldpZHRoID0gXCJzdHJldGNoXCI7XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByaXZhdGUgX2NvbXB1dGVkV2VpZ2h0OiBudW1iZXIgPSAwO1xuXG4gICAgcHJvdGVjdGVkIGFkanVzdFJlbmRlcmVkRWxlbWVudFNpemUocmVuZGVyZWRFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBjb25zdCBtaW5EZXNpZ25UaW1lQ29sdW1uSGVpZ2h0ID0gMjA7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNEZXNpZ25Nb2RlKCkpIHtcbiAgICAgICAgICAgIHJlbmRlcmVkRWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IFwiMjBweFwiO1xuICAgICAgICAgICAgcmVuZGVyZWRFbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9ICghdGhpcy5taW5QaXhlbEhlaWdodCA/IG1pbkRlc2lnblRpbWVDb2x1bW5IZWlnaHQgOiBNYXRoLm1heCh0aGlzLm1pblBpeGVsSGVpZ2h0LCBtaW5EZXNpZ25UaW1lQ29sdW1uSGVpZ2h0KSkgKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZW5kZXJlZEVsZW1lbnQuc3R5bGUubWluV2lkdGggPSBcIjBcIjtcblxuICAgICAgICAgICAgaWYgKHRoaXMubWluUGl4ZWxIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJlZEVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gdGhpcy5taW5QaXhlbEhlaWdodCArIFwicHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLndpZHRoID09PSBcImF1dG9cIikge1xuICAgICAgICAgICAgcmVuZGVyZWRFbGVtZW50LnN0eWxlLmZsZXggPSBcIjAgMSBhdXRvXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy53aWR0aCA9PT0gXCJzdHJldGNoXCIpIHtcbiAgICAgICAgICAgIHJlbmRlcmVkRWxlbWVudC5zdHlsZS5mbGV4ID0gXCIxIDEgNTBweFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMud2lkdGggaW5zdGFuY2VvZiBTaXplQW5kVW5pdCkge1xuICAgICAgICAgICAgaWYgKHRoaXMud2lkdGgudW5pdCA9PSBFbnVtcy5TaXplVW5pdC5QaXhlbCkge1xuICAgICAgICAgICAgICAgIHJlbmRlcmVkRWxlbWVudC5zdHlsZS5mbGV4ID0gXCIwIDAgYXV0b1wiO1xuICAgICAgICAgICAgICAgIHJlbmRlcmVkRWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGgucGh5c2ljYWxTaXplICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZWRFbGVtZW50LnN0eWxlLmZsZXggPSBcIjEgMSBcIiArICh0aGlzLl9jb21wdXRlZFdlaWdodCA+IDAgPyB0aGlzLl9jb21wdXRlZFdlaWdodCA6IHRoaXMud2lkdGgucGh5c2ljYWxTaXplKSArIFwiJVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNob3VsZFNlcmlhbGl6ZShjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHNlcGFyYXRvck9yaWVudGF0aW9uKCk6IEVudW1zLk9yaWVudGF0aW9uIHtcbiAgICAgICAgcmV0dXJuIEVudW1zLk9yaWVudGF0aW9uLlZlcnRpY2FsO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHdpZHRoOiBDb2x1bW5XaWR0aCA9IFwic3RyZXRjaFwiKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIH1cblxuICAgIGdldEpzb25UeXBlTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJDb2x1bW5cIjtcbiAgICB9XG5cbiAgICBnZXQgaGFzVmlzaWJsZVNlcGFyYXRvcigpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50IGluc3RhbmNlb2YgQ29sdW1uU2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXBhcmF0b3JFbGVtZW50ICE9PSB1bmRlZmluZWQgJiYgIXRoaXMucGFyZW50LmlzTGVmdE1vc3RFbGVtZW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGlzU3RhbmRhbG9uZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbHVtblNldCBleHRlbmRzIENvbnRhaW5lckJhc2Uge1xuICAgIHByaXZhdGUgX2NvbHVtbnM6IENvbHVtbltdID0gW107XG4gICAgcHJpdmF0ZSBfcmVuZGVyZWRDb2x1bW5zOiBDb2x1bW5bXTtcblxuICAgIHByaXZhdGUgY3JlYXRlQ29sdW1uSW5zdGFuY2Uoc291cmNlOiBhbnksIGNvbnRleHQ6IFNlcmlhbGl6YXRpb25Db250ZXh0KTogQ29sdW1uIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQucGFyc2VDYXJkT2JqZWN0PENvbHVtbj4oXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgW10sIC8vIEZvcmJpZGRlbiB0eXBlcyBub3Qgc3VwcG9ydGVkIGZvciBlbGVtZW50cyBmb3Igbm93XG4gICAgICAgICAgICAhdGhpcy5pc0Rlc2lnbk1vZGUoKSxcbiAgICAgICAgICAgICh0eXBlTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICF0eXBlTmFtZSB8fCB0eXBlTmFtZSA9PT0gXCJDb2x1bW5cIiA/IG5ldyBDb2x1bW4oKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAodHlwZU5hbWU6IHN0cmluZywgZXJyb3JUeXBlOiBFbnVtcy5UeXBlRXJyb3JUeXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5sb2dQYXJzZUV2ZW50KFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5FbGVtZW50VHlwZU5vdEFsbG93ZWQsXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLmVsZW1lbnRUeXBlTm90QWxsb3dlZCh0eXBlTmFtZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUmVuZGVyKCk6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyZWRDb2x1bW5zID0gW107XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbHVtbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gQ2FjaGUgaG9zdENvbmZpZyB0byBhdm9pZCB3YWxraW5nIHRoZSBwYXJlbnQgaGllcmFyY2h5IHNldmVyYWwgdGltZXNcbiAgICAgICAgICAgIGxldCBob3N0Q29uZmlnID0gdGhpcy5ob3N0Q29uZmlnO1xuXG4gICAgICAgICAgICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLWNvbHVtblNldFwiKTtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuXG4gICAgICAgICAgICBpZiAoR2xvYmFsU2V0dGluZ3MudXNlQWR2YW5jZWRDYXJkQm90dG9tVHJ1bmNhdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIFNlZSBjb21tZW50IGluIENvbnRhaW5lci5pbnRlcm5hbFJlbmRlcigpXG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSAnLXdlYmtpdC1taW4tY29udGVudCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5nZXRFZmZlY3RpdmVIb3Jpem9udGFsQWxpZ25tZW50KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEVudW1zLkhvcml6b250YWxBbGlnbm1lbnQuQ2VudGVyOlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5Ib3Jpem9udGFsQWxpZ25tZW50LlJpZ2h0OlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJmbGV4LWVuZFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJmbGV4LXN0YXJ0XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdG90YWxXZWlnaHQ6IG51bWJlciA9IDA7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGNvbHVtbiBvZiB0aGlzLl9jb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi53aWR0aCBpbnN0YW5jZW9mIFNpemVBbmRVbml0ICYmIChjb2x1bW4ud2lkdGgudW5pdCA9PSBFbnVtcy5TaXplVW5pdC5XZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsV2VpZ2h0ICs9IGNvbHVtbi53aWR0aC5waHlzaWNhbFNpemU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBjb2x1bW4gb2YgdGhpcy5fY29sdW1ucykge1xuICAgICAgICAgICAgICAgIGlmIChjb2x1bW4ud2lkdGggaW5zdGFuY2VvZiBTaXplQW5kVW5pdCAmJiBjb2x1bW4ud2lkdGgudW5pdCA9PSBFbnVtcy5TaXplVW5pdC5XZWlnaHQgJiYgdG90YWxXZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb21wdXRlZFdlaWdodCA9IDEwMCAvIHRvdGFsV2VpZ2h0ICogY29sdW1uLndpZHRoLnBoeXNpY2FsU2l6ZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBCZXN0IHdheSB0byBlbXVsYXRlIFwiaW50ZXJuYWxcIiBhY2Nlc3MgSSBrbm93IG9mXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbltcIl9jb21wdXRlZFdlaWdodFwiXSA9IGNvbXB1dGVkV2VpZ2h0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCByZW5kZXJlZENvbHVtbiA9IGNvbHVtbi5yZW5kZXIoKTtcblxuICAgICAgICAgICAgICAgIGlmIChyZW5kZXJlZENvbHVtbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVuZGVyZWRDb2x1bW5zLmxlbmd0aCA+IDAgJiYgY29sdW1uLnNlcGFyYXRvckVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5zZXBhcmF0b3JFbGVtZW50LnN0eWxlLmZsZXggPSBcIjAgMCBhdXRvXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKGVsZW1lbnQsIGNvbHVtbi5zZXBhcmF0b3JFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIFV0aWxzLmFwcGVuZENoaWxkKGVsZW1lbnQsIHJlbmRlcmVkQ29sdW1uKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlZENvbHVtbnMucHVzaChjb2x1bW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVkQ29sdW1ucy5sZW5ndGggPiAwID8gZWxlbWVudCA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdHJ1bmNhdGVPdmVyZmxvdyhtYXhIZWlnaHQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBmb3IgKGxldCBjb2x1bW4gb2YgdGhpcy5fY29sdW1ucykge1xuICAgICAgICAgICAgY29sdW1uWydoYW5kbGVPdmVyZmxvdyddKG1heEhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdW5kb092ZXJmbG93VHJ1bmNhdGlvbigpIHtcbiAgICAgICAgZm9yIChsZXQgY29sdW1uIG9mIHRoaXMuX2NvbHVtbnMpIHtcbiAgICAgICAgICAgIGNvbHVtblsncmVzZXRPdmVyZmxvdyddKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGlzU2VsZWN0YWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUGFyc2Uoc291cmNlOiBhbnksIGNvbnRleHQ6IFNlcmlhbGl6YXRpb25Db250ZXh0KSB7XG4gICAgICAgIHN1cGVyLmludGVybmFsUGFyc2Uoc291cmNlLCBjb250ZXh0KTtcblxuICAgICAgICB0aGlzLl9jb2x1bW5zID0gW107XG4gICAgICAgIHRoaXMuX3JlbmRlcmVkQ29sdW1ucyA9IFtdO1xuXG4gICAgICAgIGxldCBqc29uQ29sdW1ucyA9IHNvdXJjZVtcImNvbHVtbnNcIl07XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbkNvbHVtbnMpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIGpzb25Db2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbHVtbiA9IHRoaXMuY3JlYXRlQ29sdW1uSW5zdGFuY2UoaXRlbSwgY29udGV4dCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbHVtbnMucHVzaChjb2x1bW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFRvSlNPTih0YXJnZXQ6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFRvSlNPTih0YXJnZXQsIGNvbnRleHQpO1xuXG4gICAgICAgIGNvbnRleHQuc2VyaWFsaXplQXJyYXkodGFyZ2V0LCBcImNvbHVtbnNcIiwgdGhpcy5fY29sdW1ucyk7XG4gICAgfVxuXG4gICAgaXNGaXJzdEVsZW1lbnQoZWxlbWVudDogQ2FyZEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgZm9yIChsZXQgY29sdW1uIG9mIHRoaXMuX2NvbHVtbnMpIHtcbiAgICAgICAgICAgIGlmIChjb2x1bW4uaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbiA9PSBlbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlzQmxlZWRpbmdBdFRvcCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuaXNCbGVlZGluZygpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXJlZENvbHVtbnMgJiYgdGhpcy5fcmVuZGVyZWRDb2x1bW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGNvbHVtbiBvZiB0aGlzLl9jb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5pc0JsZWVkaW5nQXRUb3AoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaXNCbGVlZGluZ0F0Qm90dG9tKCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5pc0JsZWVkaW5nKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcmVkQ29sdW1ucyAmJiB0aGlzLl9yZW5kZXJlZENvbHVtbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgY29sdW1uIG9mIHRoaXMuX2NvbHVtbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmlzQmxlZWRpbmdBdEJvdHRvbSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRJdGVtQ291bnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbnMubGVuZ3RoO1xuICAgIH1cblxuICAgIGdldEZpcnN0VmlzaWJsZVJlbmRlcmVkSXRlbSgpOiBDYXJkRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmICh0aGlzLnJlbmRlcmVkRWxlbWVudCAmJiB0aGlzLl9yZW5kZXJlZENvbHVtbnMgJiYgdGhpcy5fcmVuZGVyZWRDb2x1bW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJlZENvbHVtbnNbMF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0TGFzdFZpc2libGVSZW5kZXJlZEl0ZW0oKTogQ2FyZEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAodGhpcy5yZW5kZXJlZEVsZW1lbnQgJiYgdGhpcy5fcmVuZGVyZWRDb2x1bW5zICYmIHRoaXMuX3JlbmRlcmVkQ29sdW1ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyZWRDb2x1bW5zW3RoaXMuX3JlbmRlcmVkQ29sdW1ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRDb2x1bW5BdChpbmRleDogbnVtYmVyKTogQ29sdW1uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbnNbaW5kZXhdO1xuICAgIH1cblxuICAgIGdldEl0ZW1BdChpbmRleDogbnVtYmVyKTogQ2FyZEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb2x1bW5BdChpbmRleCk7XG4gICAgfVxuXG4gICAgZ2V0SnNvblR5cGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIkNvbHVtblNldFwiO1xuICAgIH1cblxuICAgIGludGVybmFsVmFsaWRhdGVQcm9wZXJ0aWVzKGNvbnRleHQ6IFZhbGlkYXRpb25SZXN1bHRzKSB7XG4gICAgICAgIHN1cGVyLmludGVybmFsVmFsaWRhdGVQcm9wZXJ0aWVzKGNvbnRleHQpO1xuXG4gICAgICAgIGxldCB3ZWlnaHRlZENvbHVtbnM6IG51bWJlciA9IDA7XG4gICAgICAgIGxldCBzdHJldGNoZWRDb2x1bW5zOiBudW1iZXIgPSAwO1xuXG4gICAgICAgIGZvciAobGV0IGNvbHVtbiBvZiB0aGlzLl9jb2x1bW5zKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbHVtbi53aWR0aCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHdlaWdodGVkQ29sdW1ucysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29sdW1uLndpZHRoID09PSBcInN0cmV0Y2hcIikge1xuICAgICAgICAgICAgICAgIHN0cmV0Y2hlZENvbHVtbnMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3ZWlnaHRlZENvbHVtbnMgPiAwICYmIHN0cmV0Y2hlZENvbHVtbnMgPiAwKSB7XG4gICAgICAgICAgICBjb250ZXh0LmFkZEZhaWx1cmUoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuSGludCxcbiAgICAgICAgICAgICAgICBTdHJpbmdzLmhpbnRzLmRvbnRVc2VXZWlnaHRlZEFuZFN0cmVjdGhlZENvbHVtbnNJblNhbWVTZXQoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRDb2x1bW4oY29sdW1uOiBDb2x1bW4pIHtcbiAgICAgICAgaWYgKCFjb2x1bW4ucGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9jb2x1bW5zLnB1c2goY29sdW1uKTtcblxuICAgICAgICAgICAgY29sdW1uLnNldFBhcmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihTdHJpbmdzLmVycm9ycy5jb2x1bW5BbHJlYWR5QmVsb25nc1RvQW5vdGhlclNldCgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUl0ZW0oaXRlbTogQ2FyZEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBDb2x1bW4pIHtcbiAgICAgICAgICAgIGxldCBpdGVtSW5kZXggPSB0aGlzLl9jb2x1bW5zLmluZGV4T2YoaXRlbSk7XG5cbiAgICAgICAgICAgIGlmIChpdGVtSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbHVtbnMuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICBpdGVtLnNldFBhcmVudCh1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVMYXlvdXQoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGluZGV4T2YoY2FyZEVsZW1lbnQ6IENhcmRFbGVtZW50KTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIGNhcmRFbGVtZW50IGluc3RhbmNlb2YgQ29sdW1uID8gdGhpcy5fY29sdW1ucy5pbmRleE9mKGNhcmRFbGVtZW50KSA6IC0xO1xuICAgIH1cblxuICAgIGlzTGVmdE1vc3RFbGVtZW50KGVsZW1lbnQ6IENhcmRFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2x1bW5zLmluZGV4T2YoPENvbHVtbj5lbGVtZW50KSA9PSAwO1xuICAgIH1cblxuICAgIGlzUmlnaHRNb3N0RWxlbWVudChlbGVtZW50OiBDYXJkRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1ucy5pbmRleE9mKDxDb2x1bW4+ZWxlbWVudCkgPT0gdGhpcy5fY29sdW1ucy5sZW5ndGggLSAxO1xuICAgIH1cblxuICAgIGlzVG9wRWxlbWVudChlbGVtZW50OiBDYXJkRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1ucy5pbmRleE9mKDxDb2x1bW4+ZWxlbWVudCkgPj0gMDtcbiAgICB9XG5cbiAgICBpc0JvdHRvbUVsZW1lbnQoZWxlbWVudDogQ2FyZEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbnMuaW5kZXhPZig8Q29sdW1uPmVsZW1lbnQpID49IDA7XG4gICAgfVxuXG4gICAgZ2V0QWN0aW9uQnlJZChpZDogc3RyaW5nKTogQWN0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IHJlc3VsdDogQWN0aW9uIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGZvciAobGV0IGNvbHVtbiBvZiB0aGlzLl9jb2x1bW5zKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBjb2x1bW4uZ2V0QWN0aW9uQnlJZChpZCk7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0IGJsZWVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCbGVlZCgpO1xuICAgIH1cblxuICAgIHNldCBibGVlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnNldEJsZWVkKHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXQgcGFkZGluZygpOiBQYWRkaW5nRGVmaW5pdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhZGRpbmcoKTtcbiAgICB9XG5cbiAgICBzZXQgcGFkZGluZyh2YWx1ZTogUGFkZGluZ0RlZmluaXRpb24gfCB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5zZXRQYWRkaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXQgc2VsZWN0QWN0aW9uKCk6IEFjdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RBY3Rpb247XG4gICAgfVxuXG4gICAgc2V0IHNlbGVjdEFjdGlvbih2YWx1ZTogQWN0aW9uIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdEFjdGlvbiA9IHZhbHVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmFpc2VJbWFnZUxvYWRlZEV2ZW50KGltYWdlOiBJbWFnZSkge1xuICAgIGxldCBjYXJkID0gaW1hZ2UuZ2V0Um9vdEVsZW1lbnQoKSBhcyBBZGFwdGl2ZUNhcmQ7XG4gICAgbGV0IG9uSW1hZ2VMb2FkZWRIYW5kbGVyID0gKGNhcmQgJiYgY2FyZC5vbkltYWdlTG9hZGVkKSA/IGNhcmQub25JbWFnZUxvYWRlZCA6IEFkYXB0aXZlQ2FyZC5vbkltYWdlTG9hZGVkO1xuXG4gICAgaWYgKG9uSW1hZ2VMb2FkZWRIYW5kbGVyKSB7XG4gICAgICAgIG9uSW1hZ2VMb2FkZWRIYW5kbGVyKGltYWdlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJhaXNlQW5jaG9yQ2xpY2tlZEV2ZW50KGVsZW1lbnQ6IENhcmRFbGVtZW50LCBhbmNob3I6IEhUTUxBbmNob3JFbGVtZW50LCBldj86IE1vdXNlRXZlbnQpOiBib29sZWFuIHtcbiAgICBsZXQgY2FyZCA9IGVsZW1lbnQuZ2V0Um9vdEVsZW1lbnQoKSBhcyBBZGFwdGl2ZUNhcmQ7XG4gICAgbGV0IG9uQW5jaG9yQ2xpY2tlZEhhbmRsZXIgPSAoY2FyZCAmJiBjYXJkLm9uQW5jaG9yQ2xpY2tlZCkgPyBjYXJkLm9uQW5jaG9yQ2xpY2tlZCA6IEFkYXB0aXZlQ2FyZC5vbkFuY2hvckNsaWNrZWQ7XG5cbiAgICByZXR1cm4gb25BbmNob3JDbGlja2VkSGFuZGxlciAhPT0gdW5kZWZpbmVkID8gb25BbmNob3JDbGlja2VkSGFuZGxlcihlbGVtZW50LCBhbmNob3IsIGV2KSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiByYWlzZUV4ZWN1dGVBY3Rpb25FdmVudChhY3Rpb246IEFjdGlvbikge1xuICAgIGxldCBjYXJkID0gYWN0aW9uLnBhcmVudCA/IGFjdGlvbi5wYXJlbnQuZ2V0Um9vdEVsZW1lbnQoKSBhcyBBZGFwdGl2ZUNhcmQgOiB1bmRlZmluZWQ7XG4gICAgbGV0IG9uRXhlY3V0ZUFjdGlvbkhhbmRsZXIgPSAoY2FyZCAmJiBjYXJkLm9uRXhlY3V0ZUFjdGlvbikgPyBjYXJkLm9uRXhlY3V0ZUFjdGlvbiA6IEFkYXB0aXZlQ2FyZC5vbkV4ZWN1dGVBY3Rpb247XG5cbiAgICBpZiAoYWN0aW9uLnByZXBhcmVGb3JFeGVjdXRpb24oKSAmJiBvbkV4ZWN1dGVBY3Rpb25IYW5kbGVyKSB7XG4gICAgICAgIG9uRXhlY3V0ZUFjdGlvbkhhbmRsZXIoYWN0aW9uKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJhaXNlSW5saW5lQ2FyZEV4cGFuZGVkRXZlbnQoYWN0aW9uOiBTaG93Q2FyZEFjdGlvbiwgaXNFeHBhbmRlZDogYm9vbGVhbikge1xuICAgIGxldCBjYXJkID0gYWN0aW9uLnBhcmVudCA/IGFjdGlvbi5wYXJlbnQuZ2V0Um9vdEVsZW1lbnQoKSBhcyBBZGFwdGl2ZUNhcmQgOiB1bmRlZmluZWQ7XG4gICAgbGV0IG9uSW5saW5lQ2FyZEV4cGFuZGVkSGFuZGxlciA9IChjYXJkICYmIGNhcmQub25JbmxpbmVDYXJkRXhwYW5kZWQpID8gY2FyZC5vbklubGluZUNhcmRFeHBhbmRlZCA6IEFkYXB0aXZlQ2FyZC5vbklubGluZUNhcmRFeHBhbmRlZDtcblxuICAgIGlmIChvbklubGluZUNhcmRFeHBhbmRlZEhhbmRsZXIpIHtcbiAgICAgICAgb25JbmxpbmVDYXJkRXhwYW5kZWRIYW5kbGVyKGFjdGlvbiwgaXNFeHBhbmRlZCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByYWlzZUlucHV0VmFsdWVDaGFuZ2VkRXZlbnQoaW5wdXQ6IElucHV0KSB7XG4gICAgbGV0IGNhcmQgPSBpbnB1dC5nZXRSb290RWxlbWVudCgpIGFzIEFkYXB0aXZlQ2FyZDtcbiAgICBsZXQgb25JbnB1dFZhbHVlQ2hhbmdlZEhhbmRsZXIgPSAoY2FyZCAmJiBjYXJkLm9uSW5wdXRWYWx1ZUNoYW5nZWQpID8gY2FyZC5vbklucHV0VmFsdWVDaGFuZ2VkIDogQWRhcHRpdmVDYXJkLm9uSW5wdXRWYWx1ZUNoYW5nZWQ7XG5cbiAgICBpZiAob25JbnB1dFZhbHVlQ2hhbmdlZEhhbmRsZXIpIHtcbiAgICAgICAgb25JbnB1dFZhbHVlQ2hhbmdlZEhhbmRsZXIoaW5wdXQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmFpc2VFbGVtZW50VmlzaWJpbGl0eUNoYW5nZWRFdmVudChlbGVtZW50OiBDYXJkRWxlbWVudCwgc2hvdWxkVXBkYXRlTGF5b3V0OiBib29sZWFuID0gdHJ1ZSkge1xuICAgIGxldCByb290RWxlbWVudCA9IGVsZW1lbnQuZ2V0Um9vdEVsZW1lbnQoKTtcblxuICAgIGlmIChzaG91bGRVcGRhdGVMYXlvdXQpIHtcbiAgICAgICAgcm9vdEVsZW1lbnQudXBkYXRlTGF5b3V0KCk7XG4gICAgfVxuXG4gICAgbGV0IGNhcmQgPSByb290RWxlbWVudCBhcyBBZGFwdGl2ZUNhcmQ7XG4gICAgbGV0IG9uRWxlbWVudFZpc2liaWxpdHlDaGFuZ2VkSGFuZGxlciA9IChjYXJkICYmIGNhcmQub25FbGVtZW50VmlzaWJpbGl0eUNoYW5nZWQpID8gY2FyZC5vbkVsZW1lbnRWaXNpYmlsaXR5Q2hhbmdlZCA6IEFkYXB0aXZlQ2FyZC5vbkVsZW1lbnRWaXNpYmlsaXR5Q2hhbmdlZDtcblxuICAgIGlmIChvbkVsZW1lbnRWaXNpYmlsaXR5Q2hhbmdlZEhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvbkVsZW1lbnRWaXNpYmlsaXR5Q2hhbmdlZEhhbmRsZXIoZWxlbWVudCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEByZXR1cm5zIHJldHVybiBmYWxzZSB0byBjb250aW51ZSB3aXRoIGRlZmF1bHQgY29udGV4dCBtZW51OyByZXR1cm4gdHJ1ZSB0byBza2lwIFNESyBkZWZhdWx0IGNvbnRleHQgbWVudVxuICovXG5mdW5jdGlvbiByYWlzZURpc3BsYXlPdmVyZmxvd0FjdGlvbk1lbnVFdmVudChhY3Rpb246IE92ZXJmbG93QWN0aW9uLCB0YXJnZXQ/OiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgIGxldCBjYXJkID0gYWN0aW9uLnBhcmVudCA/IGFjdGlvbi5wYXJlbnQuZ2V0Um9vdEVsZW1lbnQoKSBhcyBBZGFwdGl2ZUNhcmQgOiB1bmRlZmluZWQ7XG4gICAgbGV0IG9uRGlzcGxheU92ZXJmbG93QWN0aW9uTWVudUhhbmRsZXIgPSAoY2FyZCAmJiBjYXJkLm9uRGlzcGxheU92ZXJmbG93QWN0aW9uTWVudSkgPyBjYXJkLm9uRGlzcGxheU92ZXJmbG93QWN0aW9uTWVudSA6IEFkYXB0aXZlQ2FyZC5vbkRpc3BsYXlPdmVyZmxvd0FjdGlvbk1lbnU7XG5cbiAgICByZXR1cm4gb25EaXNwbGF5T3ZlcmZsb3dBY3Rpb25NZW51SGFuZGxlciAhPT0gdW5kZWZpbmVkID8gb25EaXNwbGF5T3ZlcmZsb3dBY3Rpb25NZW51SGFuZGxlcihhY3Rpb24uZ2V0QWN0aW9ucygpLCB0YXJnZXQpIDogZmFsc2U7XG59XG5cbi8qKlxuICogQHJldHVybnMgcmV0dXJuIGZhbHNlIHRvIGNvbnRpbnVlIHdpdGggZGVmYXVsdCBhY3Rpb24gYnV0dG9uOyByZXR1cm4gdHJ1ZSB0byBza2lwIFNESyBkZWZhdWx0IGFjdGlvbiBidXR0b25cbiAqL1xuZnVuY3Rpb24gcmFpc2VSZW5kZXJPdmVyZmxvd0FjdGlvbnNFdmVudChhY3Rpb246IE92ZXJmbG93QWN0aW9uLCBpc0F0Um9vdExldmVsQWN0aW9uczogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgIGxldCBjYXJkID0gYWN0aW9uLnBhcmVudCA/IGFjdGlvbi5wYXJlbnQuZ2V0Um9vdEVsZW1lbnQoKSBhcyBBZGFwdGl2ZUNhcmQgOiB1bmRlZmluZWQ7XG4gICAgbGV0IG9uUmVuZGVyT3ZlcmZsb3dBY3Rpb25zSGFuZGxlciA9IChjYXJkICYmIGNhcmQub25SZW5kZXJPdmVyZmxvd0FjdGlvbnMpID8gY2FyZC5vblJlbmRlck92ZXJmbG93QWN0aW9ucyA6IEFkYXB0aXZlQ2FyZC5vblJlbmRlck92ZXJmbG93QWN0aW9ucztcblxuICAgIHJldHVybiBvblJlbmRlck92ZXJmbG93QWN0aW9uc0hhbmRsZXIgIT09IHVuZGVmaW5lZCA/IG9uUmVuZGVyT3ZlcmZsb3dBY3Rpb25zSGFuZGxlcihhY3Rpb24uZ2V0QWN0aW9ucygpLCBpc0F0Um9vdExldmVsQWN0aW9ucykgOiBmYWxzZTtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbnRhaW5lcldpdGhBY3Rpb25zIGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgICBwcml2YXRlIF9hY3Rpb25Db2xsZWN0aW9uOiBBY3Rpb25Db2xsZWN0aW9uO1xuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUGFyc2Uoc291cmNlOiBhbnksIGNvbnRleHQ6IFNlcmlhbGl6YXRpb25Db250ZXh0KSB7XG4gICAgICAgIHN1cGVyLmludGVybmFsUGFyc2Uoc291cmNlLCBjb250ZXh0KTtcblxuICAgICAgICB0aGlzLl9hY3Rpb25Db2xsZWN0aW9uLnBhcnNlKHNvdXJjZVtcImFjdGlvbnNcIl0sIGNvbnRleHQpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFRvSlNPTih0YXJnZXQ6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFRvSlNPTih0YXJnZXQsIGNvbnRleHQpO1xuXG4gICAgICAgIHRoaXMuX2FjdGlvbkNvbGxlY3Rpb24udG9KU09OKHRhcmdldCwgXCJhY3Rpb25zXCIsIGNvbnRleHQpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFJlbmRlcigpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gc3VwZXIuaW50ZXJuYWxSZW5kZXIoKTtcblxuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgbGV0IHJlbmRlcmVkQWN0aW9ucyA9IHRoaXMuX2FjdGlvbkNvbGxlY3Rpb24ucmVuZGVyKHRoaXMuaG9zdENvbmZpZy5hY3Rpb25zLmFjdGlvbnNPcmllbnRhdGlvbiwgZmFsc2UpO1xuXG4gICAgICAgICAgICBpZiAocmVuZGVyZWRBY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgVXRpbHMuYXBwZW5kQ2hpbGQoXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlclNlcGFyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvc3RDb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2luZzogdGhpcy5ob3N0Q29uZmlnLmdldEVmZmVjdGl2ZVNwYWNpbmcodGhpcy5ob3N0Q29uZmlnLmFjdGlvbnMuc3BhY2luZylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBFbnVtcy5PcmllbnRhdGlvbi5Ib3Jpem9udGFsKSk7XG4gICAgICAgICAgICAgICAgVXRpbHMuYXBwZW5kQ2hpbGQoZWxlbWVudCwgcmVuZGVyZWRBY3Rpb25zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVySWZFbXB0eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IGVsZW1lbnQgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldEhhc0V4cGFuZGVkQWN0aW9uKCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5yZW5kZXJlZEFjdGlvbkNvdW50ID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnJlbmRlcmVkQWN0aW9uQ291bnQgPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGlvbkNvbGxlY3Rpb24uZXhwYW5kZWRBY3Rpb24gIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5ob3N0Q29uZmlnLmFjdGlvbnMucHJlRXhwYW5kU2luZ2xlU2hvd0NhcmRBY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5leHBhbmRlZEFjdGlvbiAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCByZW5kZXJlZEFjdGlvbkNvdW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3Rpb25Db2xsZWN0aW9uLnJlbmRlcmVkQWN0aW9uQ291bnQ7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCByZW5kZXJJZkVtcHR5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5fYWN0aW9uQ29sbGVjdGlvbiA9IG5ldyBBY3Rpb25Db2xsZWN0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIGdldEFjdGlvbkNvdW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3Rpb25Db2xsZWN0aW9uLmdldEFjdGlvbkNvdW50KCk7XG4gICAgfVxuXG4gICAgZ2V0QWN0aW9uQXQoaW5kZXg6IG51bWJlcik6IEFjdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5nZXRBY3Rpb25Db3VudCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5nZXRBY3Rpb25BdChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIuZ2V0QWN0aW9uQXQoaW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0QWN0aW9uQnlJZChpZDogc3RyaW5nKTogQWN0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IHJlc3VsdDogQWN0aW9uIHwgdW5kZWZpbmVkID0gdGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5nZXRBY3Rpb25CeUlkKGlkKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0ID8gcmVzdWx0IDogc3VwZXIuZ2V0QWN0aW9uQnlJZChpZCk7XG4gICAgfVxuXG4gICAgaW50ZXJuYWxWYWxpZGF0ZVByb3BlcnRpZXMoY29udGV4dDogVmFsaWRhdGlvblJlc3VsdHMpIHtcbiAgICAgICAgc3VwZXIuaW50ZXJuYWxWYWxpZGF0ZVByb3BlcnRpZXMoY29udGV4dCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2FjdGlvbkNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbkNvbGxlY3Rpb24udmFsaWRhdGVQcm9wZXJ0aWVzKGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNMYXN0RWxlbWVudChlbGVtZW50OiBDYXJkRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuaXNMYXN0RWxlbWVudChlbGVtZW50KSAmJiB0aGlzLl9hY3Rpb25Db2xsZWN0aW9uLmdldEFjdGlvbkNvdW50KCkgPT0gMDtcbiAgICB9XG5cbiAgICBhZGRBY3Rpb24oYWN0aW9uOiBBY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5hZGRBY3Rpb24oYWN0aW9uKTtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgc3VwZXIuY2xlYXIoKTtcblxuICAgICAgICB0aGlzLl9hY3Rpb25Db2xsZWN0aW9uLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgZ2V0QWxsSW5wdXRzKHByb2Nlc3NBY3Rpb25zOiBib29sZWFuID0gdHJ1ZSk6IElucHV0W10ge1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3VwZXIuZ2V0QWxsSW5wdXRzKHByb2Nlc3NBY3Rpb25zKTtcblxuICAgICAgICBpZiAocHJvY2Vzc0FjdGlvbnMpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5nZXRBbGxJbnB1dHMocHJvY2Vzc0FjdGlvbnMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0UmVzb3VyY2VJbmZvcm1hdGlvbigpOiBJUmVzb3VyY2VJbmZvcm1hdGlvbltdIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldFJlc291cmNlSW5mb3JtYXRpb24oKS5jb25jYXQodGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5nZXRSZXNvdXJjZUluZm9ybWF0aW9uKCkpO1xuICAgIH1cblxuICAgIGlzQmxlZWRpbmdBdEJvdHRvbSgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGlvbkNvbGxlY3Rpb24ucmVuZGVyZWRBY3Rpb25Db3VudCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIuaXNCbGVlZGluZ0F0Qm90dG9tKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5nZXRBY3Rpb25Db3VudCgpID09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uQ29sbGVjdGlvbi5leHBhbmRlZEFjdGlvbiAhPT0gdW5kZWZpbmVkICYmICF0aGlzLmhvc3RDb25maWcuYWN0aW9ucy5wcmVFeHBhbmRTaW5nbGVTaG93Q2FyZEFjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hY3Rpb25Db2xsZWN0aW9uLmV4cGFuZGVkQWN0aW9uICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgaXNTdGFuZGFsb25lKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNYXJrZG93blByb2Nlc3NpbmdSZXN1bHQge1xuICAgIGRpZFByb2Nlc3M6IGJvb2xlYW47XG4gICAgb3V0cHV0SHRtbD86IGFueTtcbn1cblxuZXhwb3J0IGNsYXNzIFJlZnJlc2hBY3Rpb25Qcm9wZXJ0eSBleHRlbmRzIFByb3BlcnR5RGVmaW5pdGlvbiB7XG4gICAgcGFyc2Uoc2VuZGVyOiBSZWZyZXNoRGVmaW5pdGlvbiwgc291cmNlOiBQcm9wZXJ0eUJhZywgY29udGV4dDogU2VyaWFsaXphdGlvbkNvbnRleHQpOiBFeGVjdXRlQWN0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IGFjdGlvbiA9IGNvbnRleHQucGFyc2VBY3Rpb24oXG4gICAgICAgICAgICBzZW5kZXIucGFyZW50LFxuICAgICAgICAgICAgc291cmNlW3RoaXMubmFtZV0sXG4gICAgICAgICAgICBbXSxcbiAgICAgICAgICAgIGZhbHNlKTtcblxuICAgICAgICBpZiAoYWN0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChhY3Rpb24gaW5zdGFuY2VvZiBFeGVjdXRlQWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGV4dC5sb2dQYXJzZUV2ZW50KFxuICAgICAgICAgICAgICAgIHNlbmRlcixcbiAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuQWN0aW9uVHlwZU5vdEFsbG93ZWQsXG4gICAgICAgICAgICAgICAgU3RyaW5ncy5lcnJvcnMuYWN0aW9uVHlwZU5vdEFsbG93ZWQoYWN0aW9uLmdldEpzb25UeXBlTmFtZSgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0LmxvZ1BhcnNlRXZlbnQoXG4gICAgICAgICAgICBzZW5kZXIsXG4gICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuUHJvcGVydHlDYW50QmVOdWxsLFxuICAgICAgICAgICAgU3RyaW5ncy5lcnJvcnMucHJvcGVydHlNdXN0QmVTZXQoXCJhY3Rpb25cIikpO1xuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdG9KU09OKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCB0YXJnZXQ6IFByb3BlcnR5QmFnLCB2YWx1ZTogRXhlY3V0ZUFjdGlvbiB8IHVuZGVmaW5lZCwgY29udGV4dDogU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5zZXJpYWxpemVWYWx1ZSh0YXJnZXQsIHRoaXMubmFtZSwgdmFsdWUgPyB2YWx1ZS50b0pTT04oY29udGV4dCkgOiB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbiwgcmVhZG9ubHkgbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHRhcmdldFZlcnNpb24sIG5hbWUsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVmcmVzaERlZmluaXRpb24gZXh0ZW5kcyBTZXJpYWxpemFibGVPYmplY3Qge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSBhY3Rpb25Qcm9wZXJ0eSA9IG5ldyBSZWZyZXNoQWN0aW9uUHJvcGVydHkoVmVyc2lvbnMudjFfNCwgXCJhY3Rpb25cIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IHVzZXJJZHNQcm9wZXJ0eSA9IG5ldyBTdHJpbmdBcnJheVByb3BlcnR5KFZlcnNpb25zLnYxXzQsIFwidXNlcklkc1wiKTtcblxuICAgIEBwcm9wZXJ0eShSZWZyZXNoRGVmaW5pdGlvbi5hY3Rpb25Qcm9wZXJ0eSlcbiAgICBnZXQgYWN0aW9uKCk6IEV4ZWN1dGVBY3Rpb24ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShSZWZyZXNoRGVmaW5pdGlvbi5hY3Rpb25Qcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgc2V0IGFjdGlvbih2YWx1ZTogRXhlY3V0ZUFjdGlvbikge1xuICAgICAgICB0aGlzLnNldFZhbHVlKFJlZnJlc2hEZWZpbml0aW9uLmFjdGlvblByb3BlcnR5LCB2YWx1ZSk7XG5cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZS5zZXRQYXJlbnQodGhpcy5wYXJlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQHByb3BlcnR5KFJlZnJlc2hEZWZpbml0aW9uLnVzZXJJZHNQcm9wZXJ0eSlcbiAgICB1c2VySWRzPzogc3RyaW5nW107XG5cbiAgICBwcm90ZWN0ZWQgZ2V0U2NoZW1hS2V5KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIlJlZnJlc2hEZWZpbml0aW9uXCI7XG4gICAgfVxuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICBwYXJlbnQ6IENhcmRFbGVtZW50O1xufVxuXG5leHBvcnQgY2xhc3MgQXV0aENhcmRCdXR0b24gZXh0ZW5kcyBTZXJpYWxpemFibGVPYmplY3Qge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSB0eXBlUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfNCwgXCJ0eXBlXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSB0aXRsZVByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzQsIFwidGl0bGVcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IGltYWdlUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfNCwgXCJpbWFnZVwiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgdmFsdWVQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV80LCBcInZhbHVlXCIpO1xuXG4gICAgcHJvdGVjdGVkIGdldFNjaGVtYUtleSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJBdXRoQ2FyZEJ1dHRvblwiO1xuICAgIH1cblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgQHByb3BlcnR5KEF1dGhDYXJkQnV0dG9uLnR5cGVQcm9wZXJ0eSlcbiAgICB0eXBlOiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoQXV0aENhcmRCdXR0b24udGl0bGVQcm9wZXJ0eSlcbiAgICB0aXRsZT86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShBdXRoQ2FyZEJ1dHRvbi5pbWFnZVByb3BlcnR5KVxuICAgIGltYWdlPzogc3RyaW5nO1xuXG4gICAgQHByb3BlcnR5KEF1dGhDYXJkQnV0dG9uLnZhbHVlUHJvcGVydHkpXG4gICAgdmFsdWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFRva2VuRXhjaGFuZ2VSZXNvdXJjZSBleHRlbmRzIFNlcmlhbGl6YWJsZU9iamVjdCB7XG4gICAgLy8jcmVnaW9uIFNjaGVtYVxuXG4gICAgc3RhdGljIHJlYWRvbmx5IGlkUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfNCwgXCJpZFwiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgdXJpUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfNCwgXCJ1cmlcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IHByb3ZpZGVySWRQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV80LCBcInByb3ZpZGVySWRcIik7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0U2NoZW1hS2V5KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIlRva2VuRXhjaGFuZ2VSZXNvdXJjZVwiO1xuICAgIH1cblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgQHByb3BlcnR5KFRva2VuRXhjaGFuZ2VSZXNvdXJjZS5pZFByb3BlcnR5KVxuICAgIGlkPzogc3RyaW5nO1xuXG4gICAgQHByb3BlcnR5KFRva2VuRXhjaGFuZ2VSZXNvdXJjZS51cmlQcm9wZXJ0eSlcbiAgICB1cmk/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoVG9rZW5FeGNoYW5nZVJlc291cmNlLnByb3ZpZGVySWRQcm9wZXJ0eSlcbiAgICBwcm92aWRlcklkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQXV0aGVudGljYXRpb24gZXh0ZW5kcyBTZXJpYWxpemFibGVPYmplY3Qge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSB0ZXh0UHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfNCwgXCJ0ZXh0XCIpO1xuICAgIHN0YXRpYyByZWFkb25seSBjb25uZWN0aW9uTmFtZVByb3BlcnR5ID0gbmV3IFN0cmluZ1Byb3BlcnR5KFZlcnNpb25zLnYxXzQsIFwiY29ubmVjdGlvbk5hbWVcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IGJ1dHRvbnNQcm9wZXJ0eSA9IG5ldyBTZXJpYWxpemFibGVPYmplY3RDb2xsZWN0aW9uUHJvcGVydHkoVmVyc2lvbnMudjFfNCwgXCJidXR0b25zXCIsIEF1dGhDYXJkQnV0dG9uKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgdG9rZW5FeGNoYW5nZVJlc291cmNlUHJvcGVydHkgPSBuZXcgU2VyaWFsaXphYmxlT2JqZWN0UHJvcGVydHkoVmVyc2lvbnMudjFfNCwgXCJ0b2tlbkV4Y2hhbmdlUmVzb3VyY2VcIiwgVG9rZW5FeGNoYW5nZVJlc291cmNlLCB0cnVlKTtcblxuICAgIHByb3RlY3RlZCBnZXRTY2hlbWFLZXkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiQXV0aGVudGljYXRpb25cIjtcbiAgICB9XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIEBwcm9wZXJ0eShBdXRoZW50aWNhdGlvbi50ZXh0UHJvcGVydHkpXG4gICAgdGV4dD86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShBdXRoZW50aWNhdGlvbi5jb25uZWN0aW9uTmFtZVByb3BlcnR5KVxuICAgIGNvbm5lY3Rpb25OYW1lPzogc3RyaW5nO1xuXG4gICAgQHByb3BlcnR5KEF1dGhlbnRpY2F0aW9uLmJ1dHRvbnNQcm9wZXJ0eSlcbiAgICBidXR0b25zOiBBdXRoQ2FyZEJ1dHRvbltdO1xuXG4gICAgQHByb3BlcnR5KEF1dGhlbnRpY2F0aW9uLnRva2VuRXhjaGFuZ2VSZXNvdXJjZVByb3BlcnR5KVxuICAgIHRva2VuRXhjaGFuZ2VSZXNvdXJjZT86IFRva2VuRXhjaGFuZ2VSZXNvdXJjZTtcbn1cblxuLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBBZGFwdGl2ZUNhcmQgZXh0ZW5kcyBDb250YWluZXJXaXRoQWN0aW9ucyB7XG4gICAgc3RhdGljIHJlYWRvbmx5IHNjaGVtYVVybCA9IFwiaHR0cDovL2FkYXB0aXZlY2FyZHMuaW8vc2NoZW1hcy9hZGFwdGl2ZS1jYXJkLmpzb25cIjtcblxuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgJHNjaGVtYVByb3BlcnR5ID0gbmV3IEN1c3RvbVByb3BlcnR5PHN0cmluZz4oXG4gICAgICAgIFZlcnNpb25zLnYxXzAsXG4gICAgICAgIFwiJHNjaGVtYVwiLFxuICAgICAgICAoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QsIHByb3BlcnR5OiBQcm9wZXJ0eURlZmluaXRpb24sIHNvdXJjZTogUHJvcGVydHlCYWcsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIEFkYXB0aXZlQ2FyZC5zY2hlbWFVcmw7XG4gICAgICAgIH0sXG4gICAgICAgIChzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgcHJvcGVydHk6IFByb3BlcnR5RGVmaW5pdGlvbiwgdGFyZ2V0OiBQcm9wZXJ0eUJhZywgdmFsdWU6IFZlcnNpb25zIHwgdW5kZWZpbmVkLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGNvbnRleHQuc2VyaWFsaXplVmFsdWUodGFyZ2V0LCBwcm9wZXJ0eS5uYW1lLCBBZGFwdGl2ZUNhcmQuc2NoZW1hVXJsKTtcbiAgICAgICAgfSk7XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgdmVyc2lvblByb3BlcnR5ID0gbmV3IEN1c3RvbVByb3BlcnR5PFZlcnNpb24gfCB1bmRlZmluZWQ+KFxuICAgICAgICBWZXJzaW9ucy52MV8wLFxuICAgICAgICBcInZlcnNpb25cIixcbiAgICAgICAgKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCBwcm9wZXJ0eTogUHJvcGVydHlEZWZpbml0aW9uLCBzb3VyY2U6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGxldCB2ZXJzaW9uID0gVmVyc2lvbi5wYXJzZShzb3VyY2VbcHJvcGVydHkubmFtZV0sIGNvbnRleHQpO1xuXG4gICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmVyc2lvbiA9IFZlcnNpb25zLmxhdGVzdDtcblxuICAgICAgICAgICAgICAgIGNvbnRleHQubG9nUGFyc2VFdmVudChcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyLFxuICAgICAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuSW52YWxpZFByb3BlcnR5VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLmludmFsaWRDYXJkVmVyc2lvbih2ZXJzaW9uLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgICAgIH0sXG4gICAgICAgIChzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgcHJvcGVydHk6IFByb3BlcnR5RGVmaW5pdGlvbiwgdGFyZ2V0OiBQcm9wZXJ0eUJhZywgdmFsdWU6IFZlcnNpb25zIHwgdW5kZWZpbmVkLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zZXJpYWxpemVWYWx1ZSh0YXJnZXQsIHByb3BlcnR5Lm5hbWUsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBWZXJzaW9ucy52MV8wKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgZmFsbGJhY2tUZXh0UHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJmYWxsYmFja1RleHRcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IHNwZWFrUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoVmVyc2lvbnMudjFfMCwgXCJzcGVha1wiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgcmVmcmVzaFByb3BlcnR5ID0gbmV3IFNlcmlhbGl6YWJsZU9iamVjdFByb3BlcnR5KFZlcnNpb25zLnYxXzQsIFwicmVmcmVzaFwiLCBSZWZyZXNoRGVmaW5pdGlvbiwgdHJ1ZSk7XG4gICAgc3RhdGljIHJlYWRvbmx5IGF1dGhlbnRpY2F0aW9uUHJvcGVydHkgPSBuZXcgU2VyaWFsaXphYmxlT2JqZWN0UHJvcGVydHkoVmVyc2lvbnMudjFfNCwgXCJhdXRoZW50aWNhdGlvblwiLCBBdXRoZW50aWNhdGlvbiwgdHJ1ZSk7XG5cbiAgICBAcHJvcGVydHkoQWRhcHRpdmVDYXJkLnZlcnNpb25Qcm9wZXJ0eSlcbiAgICB2ZXJzaW9uOiBWZXJzaW9uO1xuXG4gICAgQHByb3BlcnR5KEFkYXB0aXZlQ2FyZC5mYWxsYmFja1RleHRQcm9wZXJ0eSlcbiAgICBmYWxsYmFja1RleHQ/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoQWRhcHRpdmVDYXJkLnNwZWFrUHJvcGVydHkpXG4gICAgc3BlYWs/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoQWRhcHRpdmVDYXJkLnJlZnJlc2hQcm9wZXJ0eSlcbiAgICBnZXQgcmVmcmVzaCgpOiBSZWZyZXNoRGVmaW5pdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKEFkYXB0aXZlQ2FyZC5yZWZyZXNoUHJvcGVydHkpO1xuICAgIH1cblxuICAgIHNldCByZWZyZXNoKHZhbHVlOiBSZWZyZXNoRGVmaW5pdGlvbiB8IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnNldFZhbHVlKEFkYXB0aXZlQ2FyZC5yZWZyZXNoUHJvcGVydHksIHZhbHVlKTtcblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlLnBhcmVudCA9IHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAcHJvcGVydHkoQWRhcHRpdmVDYXJkLmF1dGhlbnRpY2F0aW9uUHJvcGVydHkpXG4gICAgYXV0aGVudGljYXRpb24/OiBBdXRoZW50aWNhdGlvbjtcblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgc3RhdGljIG9uQW5jaG9yQ2xpY2tlZD86IChlbGVtZW50OiBDYXJkRWxlbWVudCwgYW5jaG9yOiBIVE1MQW5jaG9yRWxlbWVudCwgZXY/OiBNb3VzZUV2ZW50KSA9PiBib29sZWFuO1xuICAgIHN0YXRpYyBvbkV4ZWN1dGVBY3Rpb24/OiAoYWN0aW9uOiBBY3Rpb24pID0+IHZvaWQ7XG4gICAgc3RhdGljIG9uRWxlbWVudFZpc2liaWxpdHlDaGFuZ2VkPzogKGVsZW1lbnQ6IENhcmRFbGVtZW50KSA9PiB2b2lkO1xuICAgIHN0YXRpYyBvbkltYWdlTG9hZGVkPzogKGltYWdlOiBJbWFnZSkgPT4gdm9pZDtcbiAgICBzdGF0aWMgb25JbmxpbmVDYXJkRXhwYW5kZWQ/OiAoYWN0aW9uOiBTaG93Q2FyZEFjdGlvbiwgaXNFeHBhbmRlZDogYm9vbGVhbikgPT4gdm9pZDtcbiAgICBzdGF0aWMgb25JbnB1dFZhbHVlQ2hhbmdlZD86IChpbnB1dDogSW5wdXQpID0+IHZvaWQ7XG4gICAgc3RhdGljIG9uUHJvY2Vzc01hcmtkb3duPzogKHRleHQ6IHN0cmluZywgcmVzdWx0OiBJTWFya2Rvd25Qcm9jZXNzaW5nUmVzdWx0KSA9PiB2b2lkO1xuICAgIHN0YXRpYyBvbkRpc3BsYXlPdmVyZmxvd0FjdGlvbk1lbnU/OiAoYWN0aW9uczogcmVhZG9ubHkgQWN0aW9uW10sIHRhcmdldD86IEhUTUxFbGVtZW50KSA9PiBib29sZWFuO1xuICAgIHN0YXRpYyBvblJlbmRlck92ZXJmbG93QWN0aW9ucz86IChhY3Rpb25zOiByZWFkb25seSBBY3Rpb25bXSwgaXNSb290TGV2ZWxBY3Rpb25zOiBib29sZWFuKSA9PiBib29sZWFuO1xuXG4gICAgc3RhdGljIGdldCBwcm9jZXNzTWFya2Rvd24oKTogKHRleHQ6IHN0cmluZykgPT4gc3RyaW5nIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFN0cmluZ3MuZXJyb3JzLnByb2Nlc3NNYXJrZG93bkV2ZW50UmVtb3ZlZCgpKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0IHByb2Nlc3NNYXJrZG93bih2YWx1ZTogKHRleHQ6IHN0cmluZykgPT4gc3RyaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihTdHJpbmdzLmVycm9ycy5wcm9jZXNzTWFya2Rvd25FdmVudFJlbW92ZWQoKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFwcGx5TWFya2Rvd24odGV4dDogc3RyaW5nKTogSU1hcmtkb3duUHJvY2Vzc2luZ1Jlc3VsdCB7XG4gICAgICAgIGxldCByZXN1bHQ6IElNYXJrZG93blByb2Nlc3NpbmdSZXN1bHQgPSB7XG4gICAgICAgICAgICBkaWRQcm9jZXNzOiBmYWxzZVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChBZGFwdGl2ZUNhcmQub25Qcm9jZXNzTWFya2Rvd24pIHtcbiAgICAgICAgICAgIEFkYXB0aXZlQ2FyZC5vblByb2Nlc3NNYXJrZG93bih0ZXh0LCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCg8YW55PndpbmRvdykubWFya2Rvd25pdCkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIG1hcmtkb3duaXRcbiAgICAgICAgICAgIGxldCBtYXJrZG93bkl0OiBhbnkgPSAoPGFueT53aW5kb3cpLm1hcmtkb3duaXQ7XG4gICAgICAgICAgICByZXN1bHQub3V0cHV0SHRtbCA9IG1hcmtkb3duSXQoKS5yZW5kZXIodGV4dCk7XG4gICAgICAgICAgICByZXN1bHQuZGlkUHJvY2VzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oU3RyaW5ncy5lcnJvcnMubWFya2Rvd25Qcm9jZXNzaW5nTm90RW5hYmxlZClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZmFsbGJhY2tDYXJkPzogQWRhcHRpdmVDYXJkO1xuXG4gICAgcHJpdmF0ZSBpc1ZlcnNpb25TdXBwb3J0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmJ5cGFzc1ZlcnNpb25DaGVjaykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgdW5zdXBwb3J0ZWRWZXJzaW9uOiBib29sZWFuID1cbiAgICAgICAgICAgICAgICAhdGhpcy52ZXJzaW9uIHx8XG4gICAgICAgICAgICAgICAgIXRoaXMudmVyc2lvbi5pc1ZhbGlkIHx8XG4gICAgICAgICAgICAgICAgKHRoaXMubWF4VmVyc2lvbi5tYWpvciA8IHRoaXMudmVyc2lvbi5tYWpvcikgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5tYXhWZXJzaW9uLm1ham9yID09IHRoaXMudmVyc2lvbi5tYWpvciAmJiB0aGlzLm1heFZlcnNpb24ubWlub3IgPCB0aGlzLnZlcnNpb24ubWlub3IpO1xuXG4gICAgICAgICAgICByZXR1cm4gIXVuc3VwcG9ydGVkVmVyc2lvbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXREZWZhdWx0U2VyaWFsaXphdGlvbkNvbnRleHQoKTogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXJpYWxpemF0aW9uQ29udGV4dCh0aGlzLnZlcnNpb24pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRJdGVtc0NvbGxlY3Rpb25Qcm9wZXJ0eU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiYm9keVwiO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFBhcnNlKHNvdXJjZTogYW55LCBjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICB0aGlzLl9mYWxsYmFja0NhcmQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgbGV0IGZhbGxiYWNrRWxlbWVudCA9IGNvbnRleHQucGFyc2VFbGVtZW50KHVuZGVmaW5lZCwgc291cmNlW1wiZmFsbGJhY2tcIl0sICF0aGlzLmlzRGVzaWduTW9kZSgpKTtcblxuICAgICAgICBpZiAoZmFsbGJhY2tFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9mYWxsYmFja0NhcmQgPSBuZXcgQWRhcHRpdmVDYXJkKCk7XG4gICAgICAgICAgICB0aGlzLl9mYWxsYmFja0NhcmQuYWRkSXRlbShmYWxsYmFja0VsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIuaW50ZXJuYWxQYXJzZShzb3VyY2UsIGNvbnRleHQpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFRvSlNPTih0YXJnZXQ6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICB0aGlzLnNldFZhbHVlKEFkYXB0aXZlQ2FyZC52ZXJzaW9uUHJvcGVydHksIGNvbnRleHQudGFyZ2V0VmVyc2lvbik7XG5cbiAgICAgICAgc3VwZXIuaW50ZXJuYWxUb0pTT04odGFyZ2V0LCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxSZW5kZXIoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgcmVuZGVyZWRFbGVtZW50ID0gc3VwZXIuaW50ZXJuYWxSZW5kZXIoKTtcblxuICAgICAgICBpZiAoR2xvYmFsU2V0dGluZ3MudXNlQWR2YW5jZWRDYXJkQm90dG9tVHJ1bmNhdGlvbiAmJiByZW5kZXJlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIFVubGlrZSBjb250YWluZXJzLCB0aGUgcm9vdCBjYXJkIGVsZW1lbnQgc2hvdWxkIGJlIGFsbG93ZWQgdG9cbiAgICAgICAgICAgIC8vIGJlIHNob3J0ZXIgdGhhbiBpdHMgY29udGVudCAob3RoZXJ3aXNlIHRoZSBvdmVyZmxvdyB0cnVuY2F0aW9uXG4gICAgICAgICAgICAvLyBsb2dpYyB3b3VsZCBuZXZlciBnZXQgdHJpZ2dlcmVkKVxuICAgICAgICAgICAgcmVuZGVyZWRFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwibWluSGVpZ2h0XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkRWxlbWVudDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0SGFzQmFja2dyb3VuZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldERlZmF1bHRQYWRkaW5nKCk6IFBhZGRpbmdEZWZpbml0aW9uIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWRkaW5nRGVmaW5pdGlvbihcbiAgICAgICAgICAgIEVudW1zLlNwYWNpbmcuUGFkZGluZyxcbiAgICAgICAgICAgIEVudW1zLlNwYWNpbmcuUGFkZGluZyxcbiAgICAgICAgICAgIEVudW1zLlNwYWNpbmcuUGFkZGluZyxcbiAgICAgICAgICAgIEVudW1zLlNwYWNpbmcuUGFkZGluZyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNob3VsZFNlcmlhbGl6ZShjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHJlbmRlcklmRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgYnlwYXNzVmVyc2lvbkNoZWNrKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBhbGxvd0N1c3RvbVN0eWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3N0Q29uZmlnLmFkYXB0aXZlQ2FyZCAmJiB0aGlzLmhvc3RDb25maWcuYWRhcHRpdmVDYXJkLmFsbG93Q3VzdG9tU3R5bGU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCBoYXNCYWNrZ3JvdW5kKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBvbkFuY2hvckNsaWNrZWQ/OiAoZWxlbWVudDogQ2FyZEVsZW1lbnQsIGFuY2hvcjogSFRNTEFuY2hvckVsZW1lbnQsIGV2PzogTW91c2VFdmVudCkgPT4gYm9vbGVhbjtcbiAgICBvbkV4ZWN1dGVBY3Rpb24/OiAoYWN0aW9uOiBBY3Rpb24pID0+IHZvaWQ7XG4gICAgb25FbGVtZW50VmlzaWJpbGl0eUNoYW5nZWQ/OiAoZWxlbWVudDogQ2FyZEVsZW1lbnQpID0+IHZvaWQ7XG4gICAgb25JbWFnZUxvYWRlZD86IChpbWFnZTogSW1hZ2UpID0+IHZvaWQ7XG4gICAgb25JbmxpbmVDYXJkRXhwYW5kZWQ/OiAoYWN0aW9uOiBTaG93Q2FyZEFjdGlvbiwgaXNFeHBhbmRlZDogYm9vbGVhbikgPT4gdm9pZDtcbiAgICBvbklucHV0VmFsdWVDaGFuZ2VkPzogKGlucHV0OiBJbnB1dCkgPT4gdm9pZDtcbiAgICBvbkRpc3BsYXlPdmVyZmxvd0FjdGlvbk1lbnU/OiAoYWN0aW9uczogcmVhZG9ubHkgQWN0aW9uW10sIHRhcmdldD86IEhUTUxFbGVtZW50KSA9PiBib29sZWFuO1xuICAgIG9uUmVuZGVyT3ZlcmZsb3dBY3Rpb25zPzogKGFjdGlvbnM6IHJlYWRvbmx5IEFjdGlvbltdLCBpc1Jvb3RMZXZlbEFjdGlvbnM6IGJvb2xlYW4pID0+IGJvb2xlYW47XG5cbiAgICBkZXNpZ25Nb2RlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBnZXRKc29uVHlwZU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiQWRhcHRpdmVDYXJkXCI7XG4gICAgfVxuXG4gICAgaW50ZXJuYWxWYWxpZGF0ZVByb3BlcnRpZXMoY29udGV4dDogVmFsaWRhdGlvblJlc3VsdHMpIHtcbiAgICAgICAgc3VwZXIuaW50ZXJuYWxWYWxpZGF0ZVByb3BlcnRpZXMoY29udGV4dCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZ2V0VmFsdWUoQ2FyZEVsZW1lbnQudHlwZU5hbWVQcm9wZXJ0eSkgIT09IFwiQWRhcHRpdmVDYXJkXCIpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYWRkRmFpbHVyZShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5NaXNzaW5nQ2FyZFR5cGUsXG4gICAgICAgICAgICAgICAgU3RyaW5ncy5lcnJvcnMuaW52YWxpZENhcmRUeXBlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmJ5cGFzc1ZlcnNpb25DaGVjayAmJiAhdGhpcy52ZXJzaW9uKSB7XG4gICAgICAgICAgICBjb250ZXh0LmFkZEZhaWx1cmUoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuUHJvcGVydHlDYW50QmVOdWxsLFxuICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLnByb3BlcnR5TXVzdEJlU2V0KFwidmVyc2lvblwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuaXNWZXJzaW9uU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYWRkRmFpbHVyZShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5VbnN1cHBvcnRlZENhcmRWZXJzaW9uLFxuICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLnVuc3VwcG9ydGVkQ2FyZFZlcnNpb24odGhpcy52ZXJzaW9uLnRvU3RyaW5nKCksIHRoaXMubWF4VmVyc2lvbi50b1N0cmluZygpKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIodGFyZ2V0PzogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCByZW5kZXJlZENhcmQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0aGlzLnNob3VsZEZhbGxiYWNrKCkgJiYgdGhpcy5fZmFsbGJhY2tDYXJkKSB7XG4gICAgICAgICAgICB0aGlzLl9mYWxsYmFja0NhcmQuaG9zdENvbmZpZyA9IHRoaXMuaG9zdENvbmZpZztcblxuICAgICAgICAgICAgcmVuZGVyZWRDYXJkID0gdGhpcy5fZmFsbGJhY2tDYXJkLnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVuZGVyZWRDYXJkID0gc3VwZXIucmVuZGVyKCk7XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJlZENhcmQpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJlZENhcmQuY2xhc3NMaXN0LmFkZCh0aGlzLmhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLWFkYXB0aXZlQ2FyZFwiKSk7XG5cbiAgICAgICAgICAgICAgICAvLyBIYXZpbmcgYSB0YWJJbmRleCBvbiB0aGUgcm9vdCBjb250YWluZXIgZm9yIGEgY2FyZCBjYW4gbWVzcyB1cCBhY2Nlc3NpYmlsaXR5IGluIHNvbWUgc2NlbmFyaW9zLlxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlJ3ZlIHNoaXBwZWQgdGhpcyBiZWhhdmlvciBiZWZvcmUsIGFuZCBzbyBjYW4ndCBqdXN0IHR1cm4gaXQgb2ZmIGluIGEgcG9pbnQgcmVsZWFzZS4gRm9yXG4gICAgICAgICAgICAgICAgLy8gbm93LCB0byB1bmJsb2NrIGFjY2Vzc2liaWxpdHkgc2NlbmFyaW9zIGZvciBvdXIgY3VzdG9tZXJzLCB3ZSd2ZSBnb3QgYW4gb3B0aW9uIHRvIHR1cm4gaXQgb2ZmLiBJbiBhXG4gICAgICAgICAgICAgICAgLy8gZnV0dXJlIHJlbGVhc2UsIHdlIHNob3VsZCBzdHJvbmdseSBjb25zaWRlciBmbGlwcGluZyB0aGUgZGVmYXVsdCBzdWNoIHRoYXQgd2UgKmRvbid0KiBlbWl0IGEgdGFiSW5kZXhcbiAgICAgICAgICAgICAgICAvLyBieSBkZWZhdWx0LlxuICAgICAgICAgICAgICAgIGlmIChHbG9iYWxTZXR0aW5ncy5zZXRUYWJJbmRleEF0Q2FyZFJvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWRDYXJkLnRhYkluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zcGVhaykge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJlZENhcmQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB0aGlzLnNwZWFrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICBVdGlscy5hcHBlbmRDaGlsZCh0YXJnZXQsIHJlbmRlcmVkQ2FyZCk7XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGF5b3V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyZWRDYXJkO1xuICAgIH1cblxuICAgIHVwZGF0ZUxheW91dChwcm9jZXNzQ2hpbGRyZW46IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZUxheW91dChwcm9jZXNzQ2hpbGRyZW4pO1xuXG4gICAgICAgIGlmIChHbG9iYWxTZXR0aW5ncy51c2VBZHZhbmNlZENhcmRCb3R0b21UcnVuY2F0aW9uICYmIHRoaXMuaXNEaXNwbGF5ZWQoKSkge1xuICAgICAgICAgICAgbGV0IHBhZGRpbmcgPSB0aGlzLmhvc3RDb25maWcuZ2V0RWZmZWN0aXZlU3BhY2luZyhFbnVtcy5TcGFjaW5nLkRlZmF1bHQpO1xuXG4gICAgICAgICAgICB0aGlzWydoYW5kbGVPdmVyZmxvdyddKCg8SFRNTEVsZW1lbnQ+dGhpcy5yZW5kZXJlZEVsZW1lbnQpLm9mZnNldEhlaWdodCAtIHBhZGRpbmcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2hvdWxkRmFsbGJhY2soKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBzdXBlci5zaG91bGRGYWxsYmFjaygpIHx8ICF0aGlzLmlzVmVyc2lvblN1cHBvcnRlZCgpO1xuICAgIH1cblxuICAgIGdldCBoYXNWaXNpYmxlU2VwYXJhdG9yKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5jbGFzcyBJbmxpbmVBZGFwdGl2ZUNhcmQgZXh0ZW5kcyBBZGFwdGl2ZUNhcmQge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHByb3RlY3RlZCBnZXRTY2hlbWFLZXkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiSW5saW5lQWRhcHRpdmVDYXJkXCI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHBvcHVsYXRlU2NoZW1hKHNjaGVtYTogU2VyaWFsaXphYmxlT2JqZWN0U2NoZW1hKSB7XG4gICAgICAgIHN1cGVyLnBvcHVsYXRlU2NoZW1hKHNjaGVtYSk7XG5cbiAgICAgICAgc2NoZW1hLnJlbW92ZShcbiAgICAgICAgICAgIEFkYXB0aXZlQ2FyZC4kc2NoZW1hUHJvcGVydHksXG4gICAgICAgICAgICBBZGFwdGl2ZUNhcmQudmVyc2lvblByb3BlcnR5KTtcbiAgICB9XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByb3RlY3RlZCBnZXREZWZhdWx0UGFkZGluZygpOiBQYWRkaW5nRGVmaW5pdGlvbiB7XG4gICAgICAgIHJldHVybiBuZXcgUGFkZGluZ0RlZmluaXRpb24oXG4gICAgICAgICAgICB0aGlzLnN1cHByZXNzU3R5bGUgPyBFbnVtcy5TcGFjaW5nLk5vbmUgOiBFbnVtcy5TcGFjaW5nLlBhZGRpbmcsXG4gICAgICAgICAgICBFbnVtcy5TcGFjaW5nLlBhZGRpbmcsXG4gICAgICAgICAgICB0aGlzLnN1cHByZXNzU3R5bGUgPyBFbnVtcy5TcGFjaW5nLk5vbmUgOiBFbnVtcy5TcGFjaW5nLlBhZGRpbmcsXG4gICAgICAgICAgICBFbnVtcy5TcGFjaW5nLlBhZGRpbmcpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgYnlwYXNzVmVyc2lvbkNoZWNrKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGRlZmF1bHRTdHlsZSgpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5zdXBwcmVzc1N0eWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gRW51bXMuQ29udGFpbmVyU3R5bGUuRGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3RDb25maWcuYWN0aW9ucy5zaG93Q2FyZC5zdHlsZSA/IHRoaXMuaG9zdENvbmZpZy5hY3Rpb25zLnNob3dDYXJkLnN0eWxlIDogRW51bXMuQ29udGFpbmVyU3R5bGUuRW1waGFzaXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdXBwcmVzc1N0eWxlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICByZW5kZXIodGFyZ2V0PzogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCByZW5kZXJlZENhcmQgPSBzdXBlci5yZW5kZXIodGFyZ2V0KTtcblxuICAgICAgICBpZiAocmVuZGVyZWRDYXJkKSB7XG4gICAgICAgICAgICByZW5kZXJlZENhcmQuc2V0QXR0cmlidXRlKFwiYXJpYS1saXZlXCIsIFwicG9saXRlXCIpO1xuICAgICAgICAgICAgcmVuZGVyZWRDYXJkLnJlbW92ZUF0dHJpYnV0ZShcInRhYmluZGV4XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkQ2FyZDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXJpYWxpemF0aW9uQ29udGV4dCBleHRlbmRzIEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCB7XG4gICAgcHJpdmF0ZSBfZWxlbWVudFJlZ2lzdHJ5PzogQ2FyZE9iamVjdFJlZ2lzdHJ5PENhcmRFbGVtZW50PjtcbiAgICBwcml2YXRlIF9hY3Rpb25SZWdpc3RyeT86IENhcmRPYmplY3RSZWdpc3RyeTxBY3Rpb24+O1xuXG4gICAgcHJpdmF0ZSBpbnRlcm5hbFBhcnNlQ2FyZE9iamVjdDxUIGV4dGVuZHMgQ2FyZE9iamVjdD4oXG4gICAgICAgIHBhcmVudDogQ2FyZEVsZW1lbnQgfCB1bmRlZmluZWQsXG4gICAgICAgIHNvdXJjZTogYW55LFxuICAgICAgICBmb3JiaWRkZW5UeXBlTmFtZXM6IHN0cmluZ1tdLFxuICAgICAgICBhbGxvd0ZhbGxiYWNrOiBib29sZWFuLFxuICAgICAgICBjcmVhdGVJbnN0YW5jZUNhbGxiYWNrOiAodHlwZU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCkgPT4gVCB8IHVuZGVmaW5lZCxcbiAgICAgICAgbG9nUGFyc2VFdmVudDogKHR5cGVOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQsIGVycm9yVHlwZTogRW51bXMuVHlwZUVycm9yVHlwZSkgPT4gdm9pZCk6IFQgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgcmVzdWx0OiBUIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChzb3VyY2UgJiYgdHlwZW9mIHNvdXJjZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgbGV0IHR5cGVOYW1lID0gVXRpbHMucGFyc2VTdHJpbmcoc291cmNlW1widHlwZVwiXSk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlTmFtZSAmJiBmb3JiaWRkZW5UeXBlTmFtZXMuaW5kZXhPZih0eXBlTmFtZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIGxvZ1BhcnNlRXZlbnQodHlwZU5hbWUsIEVudW1zLlR5cGVFcnJvclR5cGUuRm9yYmlkZGVuVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgdHJ5VG9GYWxsYmFjayA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY3JlYXRlSW5zdGFuY2VDYWxsYmFjayh0eXBlTmFtZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB0cnlUb0ZhbGxiYWNrID0gR2xvYmFsU2V0dGluZ3MuZW5hYmxlRmFsbGJhY2sgJiYgYWxsb3dGYWxsYmFjaztcblxuICAgICAgICAgICAgICAgICAgICBsb2dQYXJzZUV2ZW50KHR5cGVOYW1lLCBFbnVtcy5UeXBlRXJyb3JUeXBlLlVua25vd25UeXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zZXRQYXJlbnQocGFyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnBhcnNlKHNvdXJjZSwgdGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJ5VG9GYWxsYmFjayA9IEdsb2JhbFNldHRpbmdzLmVuYWJsZUZhbGxiYWNrICYmIGFsbG93RmFsbGJhY2sgJiYgcmVzdWx0LnNob3VsZEZhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRyeVRvRmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZhbGxiYWNrID0gc291cmNlW1wiZmFsbGJhY2tcIl07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmYWxsYmFjayAmJiBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5zZXRTaG91bGRGYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZhbGxiYWNrID09PSBcInN0cmluZ1wiICYmIGZhbGxiYWNrLnRvTG93ZXJDYXNlKCkgPT09IFwiZHJvcFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGZhbGxiYWNrID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmludGVybmFsUGFyc2VDYXJkT2JqZWN0PFQ+KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxsYmFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JiaWRkZW5UeXBlTmFtZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVJbnN0YW5jZUNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ1BhcnNlRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY2FyZE9iamVjdFBhcnNlZChvOiBTZXJpYWxpemFibGVPYmplY3QsIHNvdXJjZTogYW55KSB7XG4gICAgICAgIGlmIChvIGluc3RhbmNlb2YgQWN0aW9uICYmIHRoaXMub25QYXJzZUFjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5vblBhcnNlQWN0aW9uKG8sIHNvdXJjZSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobyBpbnN0YW5jZW9mIENhcmRFbGVtZW50ICYmIHRoaXMub25QYXJzZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMub25QYXJzZUVsZW1lbnQobywgc291cmNlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uUGFyc2VBY3Rpb24/OiAoYWN0aW9uOiBBY3Rpb24sIHNvdXJjZTogYW55LCBjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCkgPT4gdm9pZDtcbiAgICBvblBhcnNlRWxlbWVudD86IChlbGVtZW50OiBDYXJkRWxlbWVudCwgc291cmNlOiBhbnksIGNvbnRleHQ6IFNlcmlhbGl6YXRpb25Db250ZXh0KSA9PiB2b2lkO1xuXG4gICAgc2hvdWxkU2VyaWFsaXplKG86IFNlcmlhbGl6YWJsZU9iamVjdCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAobyBpbnN0YW5jZW9mIEFjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uUmVnaXN0cnkuZmluZEJ5TmFtZShvLmdldEpzb25UeXBlTmFtZSgpKSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG8gaW5zdGFuY2VvZiBDYXJkRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZ2lzdHJ5LmZpbmRCeU5hbWUoby5nZXRKc29uVHlwZU5hbWUoKSkgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyc2VDYXJkT2JqZWN0PFQgZXh0ZW5kcyBDYXJkT2JqZWN0PihcbiAgICAgICAgcGFyZW50OiBDYXJkRWxlbWVudCB8IHVuZGVmaW5lZCxcbiAgICAgICAgc291cmNlOiBhbnksXG4gICAgICAgIGZvcmJpZGRlblR5cGVOYW1lczogc3RyaW5nW10sXG4gICAgICAgIGFsbG93RmFsbGJhY2s6IGJvb2xlYW4sXG4gICAgICAgIGNyZWF0ZUluc3RhbmNlQ2FsbGJhY2s6ICh0eXBlTmFtZTogc3RyaW5nKSA9PiBUIHwgdW5kZWZpbmVkLFxuICAgICAgICBsb2dQYXJzZUV2ZW50OiAodHlwZU5hbWU6IHN0cmluZywgZXJyb3JUeXBlOiBFbnVtcy5UeXBlRXJyb3JUeXBlKSA9PiB2b2lkKTogVCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmludGVybmFsUGFyc2VDYXJkT2JqZWN0KFxuICAgICAgICAgICAgcGFyZW50LFxuICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgZm9yYmlkZGVuVHlwZU5hbWVzLFxuICAgICAgICAgICAgYWxsb3dGYWxsYmFjayxcbiAgICAgICAgICAgIGNyZWF0ZUluc3RhbmNlQ2FsbGJhY2ssXG4gICAgICAgICAgICBsb2dQYXJzZUV2ZW50KTtcblxuICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2FyZE9iamVjdFBhcnNlZChyZXN1bHQsIHNvdXJjZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHBhcnNlRWxlbWVudChwYXJlbnQ6IENhcmRFbGVtZW50IHwgdW5kZWZpbmVkLCBzb3VyY2U6IGFueSwgYWxsb3dGYWxsYmFjazogYm9vbGVhbik6IENhcmRFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VDYXJkT2JqZWN0PENhcmRFbGVtZW50PihcbiAgICAgICAgICAgIHBhcmVudCxcbiAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgIFtdLCAvLyBGb3JiaWRkZW4gdHlwZXMgbm90IHN1cHBvcnRlZCBmb3IgZWxlbWVudHMgZm9yIG5vd1xuICAgICAgICAgICAgYWxsb3dGYWxsYmFjayxcbiAgICAgICAgICAgICh0eXBlTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZ2lzdHJ5LmNyZWF0ZUluc3RhbmNlKHR5cGVOYW1lLCB0aGlzLnRhcmdldFZlcnNpb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICh0eXBlTmFtZTogc3RyaW5nLCBlcnJvclR5cGU6IEVudW1zLlR5cGVFcnJvclR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JUeXBlID09PSBFbnVtcy5UeXBlRXJyb3JUeXBlLlVua25vd25UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nUGFyc2VFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5Vbmtub3duRWxlbWVudFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy51bmtub3duRWxlbWVudFR5cGUodHlwZU5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nUGFyc2VFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5FbGVtZW50VHlwZU5vdEFsbG93ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy5lbGVtZW50VHlwZU5vdEFsbG93ZWQodHlwZU5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwYXJzZUFjdGlvbihcbiAgICAgICAgcGFyZW50OiBDYXJkRWxlbWVudCxcbiAgICAgICAgc291cmNlOiBhbnksXG4gICAgICAgIGZvcmJpZGRlbkFjdGlvblR5cGVzOiBzdHJpbmdbXSxcbiAgICAgICAgYWxsb3dGYWxsYmFjazogYm9vbGVhbik6IEFjdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlQ2FyZE9iamVjdDxBY3Rpb24+KFxuICAgICAgICAgICAgcGFyZW50LFxuICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgZm9yYmlkZGVuQWN0aW9uVHlwZXMsXG4gICAgICAgICAgICBhbGxvd0ZhbGxiYWNrLFxuICAgICAgICAgICAgKHR5cGVOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb25SZWdpc3RyeS5jcmVhdGVJbnN0YW5jZSh0eXBlTmFtZSwgdGhpcy50YXJnZXRWZXJzaW9uKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAodHlwZU5hbWU6IHN0cmluZywgZXJyb3JUeXBlOiBFbnVtcy5UeXBlRXJyb3JUeXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yVHlwZSA9PSBFbnVtcy5UeXBlRXJyb3JUeXBlLlVua25vd25UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nUGFyc2VFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5Vbmtub3duQWN0aW9uVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLnVua25vd25BY3Rpb25UeXBlKHR5cGVOYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ1BhcnNlRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuQWN0aW9uVHlwZU5vdEFsbG93ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy5hY3Rpb25UeXBlTm90QWxsb3dlZCh0eXBlTmFtZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCBlbGVtZW50UmVnaXN0cnkoKTogQ2FyZE9iamVjdFJlZ2lzdHJ5PENhcmRFbGVtZW50PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50UmVnaXN0cnkgPyB0aGlzLl9lbGVtZW50UmVnaXN0cnkgOiBHbG9iYWxSZWdpc3RyeS5lbGVtZW50cztcbiAgICB9XG5cbiAgICAvLyBOb3QgdXNpbmcgYSBwcm9wZXJ0eSBzZXR0ZXIgaGVyZSBiZWNhdXNlIHRoZSBzZXR0ZXIgc2hvdWxkIGFjY2VwdCBcInVuZGVmaW5lZFwiXG4gICAgLy8gd2hlcmVhcyB0aGUgZ2V0dGVyIHNob3VsZCBuZXZlciByZXR1cm4gdW5kZWZpbmVkLlxuICAgIHNldEVsZW1lbnRSZWdpc3RyeSh2YWx1ZTogQ2FyZE9iamVjdFJlZ2lzdHJ5PENhcmRFbGVtZW50PiB8IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50UmVnaXN0cnkgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgYWN0aW9uUmVnaXN0cnkoKTogQ2FyZE9iamVjdFJlZ2lzdHJ5PEFjdGlvbj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uUmVnaXN0cnkgPyB0aGlzLl9hY3Rpb25SZWdpc3RyeSA6IEdsb2JhbFJlZ2lzdHJ5LmFjdGlvbnM7XG4gICAgfVxuXG4gICAgLy8gTm90IHVzaW5nIGEgcHJvcGVydHkgc2V0dGVyIGhlcmUgYmVjYXVzZSB0aGUgc2V0dGVyIHNob3VsZCBhY2NlcHQgXCJ1bmRlZmluZWRcIlxuICAgIC8vIHdoZXJlYXMgdGhlIGdldHRlciBzaG91bGQgbmV2ZXIgcmV0dXJuIHVuZGVmaW5lZC5cbiAgICBzZXRBY3Rpb25SZWdpc3RyeSh2YWx1ZTogQ2FyZE9iamVjdFJlZ2lzdHJ5PEFjdGlvbj4gfCB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fYWN0aW9uUmVnaXN0cnkgPSB2YWx1ZTtcbiAgICB9XG59XG5cbkdsb2JhbFJlZ2lzdHJ5LmRlZmF1bHRFbGVtZW50cy5yZWdpc3RlcihcIkNvbnRhaW5lclwiLCBDb250YWluZXIpO1xuR2xvYmFsUmVnaXN0cnkuZGVmYXVsdEVsZW1lbnRzLnJlZ2lzdGVyKFwiVGV4dEJsb2NrXCIsIFRleHRCbG9jayk7XG5HbG9iYWxSZWdpc3RyeS5kZWZhdWx0RWxlbWVudHMucmVnaXN0ZXIoXCJSaWNoVGV4dEJsb2NrXCIsIFJpY2hUZXh0QmxvY2ssIFZlcnNpb25zLnYxXzIpO1xuR2xvYmFsUmVnaXN0cnkuZGVmYXVsdEVsZW1lbnRzLnJlZ2lzdGVyKFwiVGV4dFJ1blwiLCBUZXh0UnVuLCBWZXJzaW9ucy52MV8yKTtcbkdsb2JhbFJlZ2lzdHJ5LmRlZmF1bHRFbGVtZW50cy5yZWdpc3RlcihcIkltYWdlXCIsIEltYWdlKTtcbkdsb2JhbFJlZ2lzdHJ5LmRlZmF1bHRFbGVtZW50cy5yZWdpc3RlcihcIkltYWdlU2V0XCIsIEltYWdlU2V0KTtcbkdsb2JhbFJlZ2lzdHJ5LmRlZmF1bHRFbGVtZW50cy5yZWdpc3RlcihcIk1lZGlhXCIsIE1lZGlhLCBWZXJzaW9ucy52MV8xKTtcbkdsb2JhbFJlZ2lzdHJ5LmRlZmF1bHRFbGVtZW50cy5yZWdpc3RlcihcIkZhY3RTZXRcIiwgRmFjdFNldCk7XG5HbG9iYWxSZWdpc3RyeS5kZWZhdWx0RWxlbWVudHMucmVnaXN0ZXIoXCJDb2x1bW5TZXRcIiwgQ29sdW1uU2V0KTtcbkdsb2JhbFJlZ2lzdHJ5LmRlZmF1bHRFbGVtZW50cy5yZWdpc3RlcihcIkFjdGlvblNldFwiLCBBY3Rpb25TZXQsIFZlcnNpb25zLnYxXzIpO1xuR2xvYmFsUmVnaXN0cnkuZGVmYXVsdEVsZW1lbnRzLnJlZ2lzdGVyKFwiSW5wdXQuVGV4dFwiLCBUZXh0SW5wdXQpO1xuR2xvYmFsUmVnaXN0cnkuZGVmYXVsdEVsZW1lbnRzLnJlZ2lzdGVyKFwiSW5wdXQuRGF0ZVwiLCBEYXRlSW5wdXQpO1xuR2xvYmFsUmVnaXN0cnkuZGVmYXVsdEVsZW1lbnRzLnJlZ2lzdGVyKFwiSW5wdXQuVGltZVwiLCBUaW1lSW5wdXQpO1xuR2xvYmFsUmVnaXN0cnkuZGVmYXVsdEVsZW1lbnRzLnJlZ2lzdGVyKFwiSW5wdXQuTnVtYmVyXCIsIE51bWJlcklucHV0KTtcbkdsb2JhbFJlZ2lzdHJ5LmRlZmF1bHRFbGVtZW50cy5yZWdpc3RlcihcIklucHV0LkNob2ljZVNldFwiLCBDaG9pY2VTZXRJbnB1dCk7XG5HbG9iYWxSZWdpc3RyeS5kZWZhdWx0RWxlbWVudHMucmVnaXN0ZXIoXCJJbnB1dC5Ub2dnbGVcIiwgVG9nZ2xlSW5wdXQpO1xuXG5HbG9iYWxSZWdpc3RyeS5kZWZhdWx0QWN0aW9ucy5yZWdpc3RlcihPcGVuVXJsQWN0aW9uLkpzb25UeXBlTmFtZSwgT3BlblVybEFjdGlvbik7XG5HbG9iYWxSZWdpc3RyeS5kZWZhdWx0QWN0aW9ucy5yZWdpc3RlcihTdWJtaXRBY3Rpb24uSnNvblR5cGVOYW1lLCBTdWJtaXRBY3Rpb24pO1xuR2xvYmFsUmVnaXN0cnkuZGVmYXVsdEFjdGlvbnMucmVnaXN0ZXIoU2hvd0NhcmRBY3Rpb24uSnNvblR5cGVOYW1lLCBTaG93Q2FyZEFjdGlvbik7XG5HbG9iYWxSZWdpc3RyeS5kZWZhdWx0QWN0aW9ucy5yZWdpc3RlcihUb2dnbGVWaXNpYmlsaXR5QWN0aW9uLkpzb25UeXBlTmFtZSwgVG9nZ2xlVmlzaWJpbGl0eUFjdGlvbiwgVmVyc2lvbnMudjFfMik7XG5HbG9iYWxSZWdpc3RyeS5kZWZhdWx0QWN0aW9ucy5yZWdpc3RlcihFeGVjdXRlQWN0aW9uLkpzb25UeXBlTmFtZSwgRXhlY3V0ZUFjdGlvbiwgVmVyc2lvbnMudjFfNCk7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCAqIGFzIEVudW1zIGZyb20gXCIuL2VudW1zXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgU3RyaW5nc30gZnJvbSBcIi4vc3RyaW5nc1wiO1xuaW1wb3J0IHsgRGljdGlvbmFyeSwgR2xvYmFsU2V0dGluZ3MgfSBmcm9tIFwiLi9zaGFyZWRcIjtcbmltcG9ydCB7IEhvc3RDb25maWcgfSBmcm9tIFwiLi9ob3N0LWNvbmZpZ1wiO1xuaW1wb3J0IHsgSG9zdENhcGFiaWxpdGllcyB9IGZyb20gXCIuL2hvc3QtY2FwYWJpbGl0aWVzXCI7XG5pbXBvcnQgeyBWZXJzaW9ucywgcHJvcGVydHksIFNlcmlhbGl6YWJsZU9iamVjdCwgU3RyaW5nUHJvcGVydHksIFNlcmlhbGl6YWJsZU9iamVjdFByb3BlcnR5LCBJVmFsaWRhdGlvbkV2ZW50LCBQcm9wZXJ0eURlZmluaXRpb24gfSBmcm9tIFwiLi9zZXJpYWxpemF0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uUmVzdWx0cyB7XG4gICAgcmVhZG9ubHkgYWxsSWRzOiBEaWN0aW9uYXJ5PG51bWJlcj4gPSB7fTtcbiAgICByZWFkb25seSB2YWxpZGF0aW9uRXZlbnRzOiBJVmFsaWRhdGlvbkV2ZW50W10gPSBbXTtcblxuICAgIGFkZEZhaWx1cmUoY2FyZE9iamVjdDogQ2FyZE9iamVjdCwgZXZlbnQ6IEVudW1zLlZhbGlkYXRpb25FdmVudCwgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbkV2ZW50cy5wdXNoKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBoYXNlOiBFbnVtcy5WYWxpZGF0aW9uUGhhc2UuVmFsaWRhdGlvbixcbiAgICAgICAgICAgICAgICBzb3VyY2U6IGNhcmRPYmplY3QsXG4gICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCB0eXBlIENhcmRPYmplY3RUeXBlID0geyBuZXcoKTogQ2FyZE9iamVjdCB9O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2FyZE9iamVjdCBleHRlbmRzIFNlcmlhbGl6YWJsZU9iamVjdCB7XG4gICAgLy8jcmVnaW9uIFNjaGVtYVxuXG4gICAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lUHJvcGVydHkgPSBuZXcgU3RyaW5nUHJvcGVydHkoXG4gICAgICAgIFZlcnNpb25zLnYxXzAsXG4gICAgICAgIFwidHlwZVwiLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAoc2VuZGVyOiBvYmplY3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoPENhcmRPYmplY3Q+c2VuZGVyKS5nZXRKc29uVHlwZU5hbWUoKVxuICAgICAgICB9KTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgaWRQcm9wZXJ0eSA9IG5ldyBTdHJpbmdQcm9wZXJ0eShWZXJzaW9ucy52MV8wLCBcImlkXCIpO1xuICAgIHN0YXRpYyByZWFkb25seSByZXF1aXJlc1Byb3BlcnR5ID0gbmV3IFNlcmlhbGl6YWJsZU9iamVjdFByb3BlcnR5KFxuICAgICAgICBWZXJzaW9ucy52MV8yLFxuICAgICAgICBcInJlcXVpcmVzXCIsXG4gICAgICAgIEhvc3RDYXBhYmlsaXRpZXMsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBuZXcgSG9zdENhcGFiaWxpdGllcygpKTtcblxuICAgIHByb3RlY3RlZCBnZXRTY2hlbWFLZXkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SnNvblR5cGVOYW1lKCk7XG4gICAgfVxuXG4gICAgQHByb3BlcnR5KENhcmRPYmplY3QuaWRQcm9wZXJ0eSlcbiAgICBpZD86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eShDYXJkT2JqZWN0LnJlcXVpcmVzUHJvcGVydHkpXG4gICAgZ2V0IHJlcXVpcmVzKCk6IEhvc3RDYXBhYmlsaXRpZXMge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShDYXJkT2JqZWN0LnJlcXVpcmVzUHJvcGVydHkpO1xuICAgIH1cblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgcHJpdmF0ZSBfc2hvdWxkRmFsbGJhY2s6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIHByb3RlY3RlZCBfcGFyZW50PzogQ2FyZE9iamVjdDtcbiAgICBwcm90ZWN0ZWQgX3JlbmRlcmVkRWxlbWVudD86IEhUTUxFbGVtZW50O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoaXMgQ2FyZE9iamVjdCBjb250YWlucyB0aGUgZ2l2ZW4gRE9NIE5vZGUuXG4gICAgICogQHBhcmFtIG5vZGUgVGhlIERPTSBOb2RlIHRvIGxvb2sgZm9yLlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgRE9NIE5vZGUgd2FzIGZvdW5kLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY29udGFpbnMobm9kZTogTm9kZSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5fcmVuZGVyZWRFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyZWRFbGVtZW50LmNvbnRhaW5zKG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIG9uUHJlUHJvY2Vzc1Byb3BlcnR5VmFsdWU/OiAoc2VuZGVyOiBDYXJkT2JqZWN0LCBwcm9wZXJ0eTogUHJvcGVydHlEZWZpbml0aW9uLCB2YWx1ZTogYW55KSA9PiBhbnk7XG5cbiAgICBhYnN0cmFjdCBnZXRKc29uVHlwZU5hbWUoKTogc3RyaW5nO1xuXG4gICAgYWJzdHJhY3QgZ2V0IGhvc3RDb25maWcoKTogSG9zdENvbmZpZztcblxuICAgIHByZVByb2Nlc3NQcm9wZXJ0eVZhbHVlKHByb3BlcnR5OiBQcm9wZXJ0eURlZmluaXRpb24sIHByb3BlcnR5VmFsdWU/OiBhbnkpOiBhbnkge1xuICAgICAgICBsZXQgdmFsdWUgPSBwcm9wZXJ0eVZhbHVlID09PSB1bmRlZmluZWQgPyB0aGlzLmdldFZhbHVlKHByb3BlcnR5KSA6IHByb3BlcnR5VmFsdWU7XG5cbiAgICAgICAgaWYgKEdsb2JhbFNldHRpbmdzLmFsbG93UHJlUHJvY2Vzc2luZ1Byb3BlcnR5VmFsdWVzKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudE9iamVjdDogQ2FyZE9iamVjdCB8IHVuZGVmaW5lZCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50T2JqZWN0ICYmICFjdXJyZW50T2JqZWN0Lm9uUHJlUHJvY2Vzc1Byb3BlcnR5VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50T2JqZWN0ID0gY3VycmVudE9iamVjdC5wYXJlbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50T2JqZWN0ICYmIGN1cnJlbnRPYmplY3Qub25QcmVQcm9jZXNzUHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50T2JqZWN0Lm9uUHJlUHJvY2Vzc1Byb3BlcnR5VmFsdWUodGhpcywgcHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBzZXRQYXJlbnQodmFsdWU6IENhcmRPYmplY3QgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgc2V0U2hvdWxkRmFsbGJhY2sodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fc2hvdWxkRmFsbGJhY2sgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBzaG91bGRGYWxsYmFjaygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nob3VsZEZhbGxiYWNrIHx8ICF0aGlzLnJlcXVpcmVzLmFyZUFsbE1ldCh0aGlzLmhvc3RDb25maWcuaG9zdENhcGFiaWxpdGllcyk7XG4gICAgfVxuXG4gICAgZ2V0Um9vdE9iamVjdCgpOiBDYXJkT2JqZWN0IHtcbiAgICAgICAgbGV0IHJvb3RPYmplY3Q6IENhcmRPYmplY3QgPSB0aGlzO1xuXG4gICAgICAgIHdoaWxlIChyb290T2JqZWN0LnBhcmVudCkge1xuICAgICAgICAgICAgcm9vdE9iamVjdCA9IHJvb3RPYmplY3QucGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJvb3RPYmplY3Q7XG4gICAgfVxuXG4gICAgaW50ZXJuYWxWYWxpZGF0ZVByb3BlcnRpZXMoY29udGV4dDogVmFsaWRhdGlvblJlc3VsdHMpIHtcbiAgICAgICAgaWYgKHRoaXMuaWQpIHtcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmFsbElkcy5oYXNPd25Qcm9wZXJ0eSh0aGlzLmlkKSkge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LmFsbElkc1t0aGlzLmlkXSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYWRkRmFpbHVyZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuRHVwbGljYXRlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy5kdXBsaWNhdGVJZCh0aGlzLmlkKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29udGV4dC5hbGxJZHNbdGhpcy5pZF0gKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYWxsSWRzW3RoaXMuaWRdID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhbGlkYXRlUHJvcGVydGllcygpOiBWYWxpZGF0aW9uUmVzdWx0cyB7XG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgVmFsaWRhdGlvblJlc3VsdHMoKTtcblxuICAgICAgICB0aGlzLmludGVybmFsVmFsaWRhdGVQcm9wZXJ0aWVzKHJlc3VsdCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBzZWFyY2hlcyB0aGlzIENhcmRPYmplY3QgYW5kIGFueSBjaGlsZHJlbiB0byBmaW5kIHRoZVxuICAgICAqIGlubmVybW9zdCBDYXJkT2JqZWN0IHRoYXQgb3ducyB0aGUgZ2l2ZW4gRE9NIE5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgRE9NIE5vZGUgdG8gbG9vayBmb3IuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgb3duZXIgb2YgdGhlIGdpdmVuIERPTSBOb2RlLCBvciBgdW5kZWZpbmVkYCBpZiBubyBvd25lciB3YXMgZm91bmQuXG4gICAgICovXG4gICAgZmluZERPTU5vZGVPd25lcihub2RlOiBOb2RlKTogQ2FyZE9iamVjdCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIC8vIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIENhcmRPYmplY3RzIHdpdGggbm8gYXNzb2NpYXRlZCBjaGlsZHJlblxuICAgICAgICByZXR1cm4gdGhpcy5jb250YWlucyhub2RlKSA/IHRoaXMgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZ2V0IHBhcmVudCgpOiBDYXJkT2JqZWN0IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudDtcbiAgICB9XG5cbiAgICBnZXQgcmVuZGVyZWRFbGVtZW50KCk6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVkRWxlbWVudDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBBY3Rpdml0eVJlc3BvbnNlLCBJQWN0aXZpdHlSZXF1ZXN0IH0gZnJvbSBcIi4vYWN0aXZpdHktcmVxdWVzdFwiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2hhbm5lbEFkYXB0ZXIge1xuICAgIGFic3RyYWN0IHNlbmRSZXF1ZXN0QXN5bmMocmVxdWVzdDogSUFjdGl2aXR5UmVxdWVzdCk6IFByb21pc2U8QWN0aXZpdHlSZXNwb25zZT47XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uPFRJdGVtPiB7XG4gICAgcHJpdmF0ZSBfaXRlbXM6IEFycmF5PFRJdGVtPiA9IFtdO1xuXG4gICAgb25JdGVtQWRkZWQ6IChpdGVtOiBUSXRlbSkgPT4gdm9pZDtcbiAgICBvbkl0ZW1SZW1vdmVkOiAoaXRlbTogVEl0ZW0pID0+IHZvaWQ7XG5cbiAgICBnZXQoaW5kZXg6IG51bWJlcik6IFRJdGVtIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW2luZGV4XTtcbiAgICB9XG5cbiAgICBhZGQoaXRlbTogVEl0ZW0pIHtcbiAgICAgICAgdGhpcy5faXRlbXMucHVzaChpdGVtKTtcblxuICAgICAgICBpZiAodGhpcy5vbkl0ZW1BZGRlZCkge1xuICAgICAgICAgICAgdGhpcy5vbkl0ZW1BZGRlZChpdGVtKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZShpdGVtOiBUSXRlbSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMuX2l0ZW1zLmluZGV4T2YoaXRlbSk7XG5cbiAgICAgICAgaWYgKGkgPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5faXRlbXMgPSB0aGlzLl9pdGVtcy5zcGxpY2UoaSwgMSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9uSXRlbVJlbW92ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uSXRlbVJlbW92ZWQoaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbmRleE9mKGl0ZW06IFRJdGVtKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmluZGV4T2YoaXRlbSk7XG4gICAgfVxuXG4gICAgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5faXRlbXMubGVuZ3RoO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuZXhwb3J0IGNsYXNzIENvbnN0YW50cyB7XG4gICAgc3RhdGljIHJlYWRvbmx5IGtleXMgPSB7XG4gICAgICAgIHRhYjogXCJUYWJcIixcbiAgICAgICAgZW50ZXI6IFwiRW50ZXJcIixcbiAgICAgICAgZXNjYXBlOiBcIkVzY2FwZVwiLFxuICAgICAgICBzcGFjZTogXCIgXCIsXG4gICAgICAgIHVwOiBcIkFycm93VXBcIixcbiAgICAgICAgZG93bjogXCJBcnJvd0Rvd25cIixcbiAgICAgICAgZGVsZXRlOiBcIkRlbGV0ZVwiXG4gICAgfSBhcyBjb25zdDtcbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL21lbnUtaXRlbVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcG9wdXAtbWVudVwiO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBkZWZhdWx0SG9zdENvbmZpZywgSG9zdENvbmZpZyB9IGZyb20gXCIuLi9ob3N0LWNvbmZpZ1wiO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBjbGFzcyBNZW51SXRlbSB7XG4gICAgcHJpdmF0ZSBfaG9zdENvbmZpZz86IEhvc3RDb25maWc7XG4gICAgcHJpdmF0ZSBfZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfdmFsdWU6IHN0cmluZztcbiAgICBwcml2YXRlIF9pc0VuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgcHJpdmF0ZSBjbGljaygpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkICYmIHRoaXMub25DbGljaykge1xuICAgICAgICAgICAgdGhpcy5vbkNsaWNrKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVDc3NDbGFzc2VzKCkge1xuICAgICAgICBpZiAodGhpcy5fZWxlbWVudCkge1xuICAgICAgICAgICAgbGV0IGVmZmVjdGl2ZUhvc3RDb25maWcgPSB0aGlzLl9ob3N0Q29uZmlnID8gdGhpcy5faG9zdENvbmZpZyA6IGRlZmF1bHRIb3N0Q29uZmlnO1xuXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTmFtZSA9IGVmZmVjdGl2ZUhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLWN0cmxcIik7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoZWZmZWN0aXZlSG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lKHRoaXMuaXNFbmFibGVkID8gXCJhYy1jdHJsLWRyb3Bkb3duLWl0ZW1cIiA6IFwiYWMtY3RybC1kcm9wZG93bi1pdGVtLWRpc2FibGVkXCIpKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChlZmZlY3RpdmVIb3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy1kaXNhYmxlZFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWFkb25seSBrZXk6IHN0cmluZztcblxuICAgIG9uQ2xpY2s/OiAoaXRlbTogTWVudUl0ZW0pID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3RvcihrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG5cbiAgICByZW5kZXIoaG9zdENvbmZpZz86IEhvc3RDb25maWcpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIHRoaXMuX2hvc3RDb25maWcgPSBob3N0Q29uZmlnO1xuXG4gICAgICAgIGlmICghdGhpcy5fZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5pbm5lclRleHQgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwibWVudWl0ZW1cIik7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIiwgXCJmYWxzZVwiKTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQub25tb3VzZXVwID0gKGUpID0+IHsgdGhpcy5jbGljaygpOyB9O1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5vbmtleWRvd24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlLmtleSA9PT0gQ29uc3RhbnRzLmtleXMuZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGljaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ3NzQ2xhc3NlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cbiAgICBzZXQgdmFsdWUobmV3VmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuXG4gICAgICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmlubmVyVGV4dCA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGlzRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRW5hYmxlZDtcbiAgICB9XG5cbiAgICBzZXQgaXNFbmFibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0VuYWJsZWQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0VuYWJsZWQgPSB2YWx1ZTtcblxuICAgICAgICAgICAgdGhpcy51cGRhdGVDc3NDbGFzc2VzKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBkZWZhdWx0SG9zdENvbmZpZywgSG9zdENvbmZpZyB9IGZyb20gXCIuLi9ob3N0LWNvbmZpZ1wiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9wdXBDb250cm9sIHtcbiAgICBwcml2YXRlIF9pc09wZW46IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIF9vdmVybGF5RWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfcG9wdXBFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIF9ob3N0Q29uZmlnPzogSG9zdENvbmZpZztcblxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCByZW5kZXJDb250ZW50KCk6IEhUTUxFbGVtZW50O1xuXG4gICAgb25DbG9zZTogKHBvcHVwQ29udHJvbDogUG9wdXBDb250cm9sLCB3YXNDYW5jZWxsZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG5cbiAgICBrZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAgICAgY2FzZSBDb25zdGFudHMua2V5cy5lc2NhcGU6XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZVBvcHVwKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIocm9vdEVsZW1lbnRCb3VuZHM6IENsaWVudFJlY3QpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgZWxlbWVudC50YWJJbmRleCA9IDA7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gdGhpcy5ob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy1jdHJsXCIsIFwiYWMtY3RybC1wb3B1cC1jb250YWluZXJcIik7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImRpYWxvZ1wiKTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLW1vZGFsXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgZWxlbWVudC5vbmtleWRvd24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5rZXlEb3duKGUpO1xuXG4gICAgICAgICAgICByZXR1cm4gIWUuY2FuY2VsQnViYmxlO1xuICAgICAgICB9O1xuXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5yZW5kZXJDb250ZW50KCkpO1xuXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGZvY3VzKCkge1xuICAgICAgICBpZiAodGhpcy5fcG9wdXBFbGVtZW50KSB7XG4gICAgICAgICAgICAoPEhUTUxFbGVtZW50PnRoaXMuX3BvcHVwRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBvcHVwKHJvb3RFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzT3Blbikge1xuICAgICAgICAgICAgdGhpcy5fb3ZlcmxheUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdGhpcy5fb3ZlcmxheUVsZW1lbnQuY2xhc3NOYW1lID0gdGhpcy5ob3N0Q29uZmlnLm1ha2VDc3NDbGFzc05hbWUoXCJhYy1jdHJsLW92ZXJsYXlcIik7XG4gICAgICAgICAgICB0aGlzLl9vdmVybGF5RWxlbWVudC50YWJJbmRleCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9vdmVybGF5RWxlbWVudC5zdHlsZS53aWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aCArIFwicHhcIjtcbiAgICAgICAgICAgIHRoaXMuX292ZXJsYXlFbGVtZW50LnN0eWxlLmhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgICAgICB0aGlzLl9vdmVybGF5RWxlbWVudC5vbmZvY3VzID0gKGUpID0+IHsgdGhpcy5jbG9zZVBvcHVwKHRydWUpOyB9O1xuXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX292ZXJsYXlFbGVtZW50KTtcblxuICAgICAgICAgICAgdmFyIHJvb3RFbGVtZW50Qm91bmRzID0gcm9vdEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudCA9IHRoaXMucmVuZGVyKHJvb3RFbGVtZW50Qm91bmRzKTtcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICAgICAgICAgIC4uLnRoaXMuaG9zdENvbmZpZy5tYWtlQ3NzQ2xhc3NOYW1lcyhcbiAgICAgICAgICAgICAgICAgICAgXCJhYy1jdHJsLXNsaWRlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYWMtY3RybC1zbGlkZUxlZnRUb1JpZ2h0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYWMtY3RybC1zbGlkZVJpZ2h0VG9MZWZ0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYWMtY3RybC1zbGlkZVRvcFRvQm90dG9tXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYWMtY3RybC1zbGlkZVJpZ2h0VG9MZWZ0XCIpKTtcblxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgKGUpID0+IHsgdGhpcy5jbG9zZVBvcHVwKHRydWUpOyB9KTtcblxuICAgICAgICAgICAgY29uc3Qgcm9vdEVsZW1lbnRMYWJlbCA9IHJvb3RFbGVtZW50LmdldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIik7XG4gICAgICAgICAgICBpZiAocm9vdEVsZW1lbnRMYWJlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHJvb3RFbGVtZW50TGFiZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9vdmVybGF5RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9wb3B1cEVsZW1lbnQpO1xuXG4gICAgICAgICAgICB2YXIgcG9wdXBFbGVtZW50Qm91bmRzID0gdGhpcy5fcG9wdXBFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICB2YXIgYXZhaWxhYmxlU3BhY2VCZWxvdyA9IHdpbmRvdy5pbm5lckhlaWdodCAtIHJvb3RFbGVtZW50Qm91bmRzLmJvdHRvbTtcbiAgICAgICAgICAgIHZhciBhdmFpbGFibGVTcGFjZUFib3ZlID0gcm9vdEVsZW1lbnRCb3VuZHMudG9wO1xuICAgICAgICAgICAgdmFyIGF2YWlsYWJsZVNwYWNlUmlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIHJvb3RFbGVtZW50Qm91bmRzLmxlZnQ7XG4gICAgICAgICAgICB2YXIgYXZhaWxhYmxlU3BhY2VSaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gcm9vdEVsZW1lbnRCb3VuZHMucmlnaHQ7XG4gICAgICAgICAgICB2YXIgYXZhaWxhYmxlU3BhY2VMZWZ0ID0gcm9vdEVsZW1lbnRCb3VuZHMubGVmdDtcblxuICAgICAgICAgICAgdmFyIGxlZnQgPSByb290RWxlbWVudEJvdW5kcy5sZWZ0ICsgVXRpbHMuZ2V0U2Nyb2xsWCgpO1xuICAgICAgICAgICAgdmFyIHRvcDtcblxuICAgICAgICAgICAgaWYgKGF2YWlsYWJsZVNwYWNlQWJvdmUgPCBwb3B1cEVsZW1lbnRCb3VuZHMuaGVpZ2h0ICYmIGF2YWlsYWJsZVNwYWNlQmVsb3cgPCBwb3B1cEVsZW1lbnRCb3VuZHMuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgLy8gTm90IGVub3VnaCBzcGFjZSBhYm92ZSBvciBiZWxvdyByb290IGVsZW1lbnRcbiAgICAgICAgICAgICAgICB2YXIgYWN0dWFsUG9wdXBIZWlnaHQgPSBNYXRoLm1pbihwb3B1cEVsZW1lbnRCb3VuZHMuaGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LnN0eWxlLm1heEhlaWdodCA9IGFjdHVhbFBvcHVwSGVpZ2h0ICsgXCJweFwiO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFjdHVhbFBvcHVwSGVpZ2h0IDwgcG9wdXBFbGVtZW50Qm91bmRzLmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB0b3AgPSBVdGlscy5nZXRTY3JvbGxZKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b3AgPSBVdGlscy5nZXRTY3JvbGxZKCkgKyByb290RWxlbWVudEJvdW5kcy50b3AgKyAocm9vdEVsZW1lbnRCb3VuZHMuaGVpZ2h0IC0gYWN0dWFsUG9wdXBIZWlnaHQpIC8yO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhdmFpbGFibGVTcGFjZUxlZnQgPCBwb3B1cEVsZW1lbnRCb3VuZHMud2lkdGggJiYgYXZhaWxhYmxlU3BhY2VSaWdodCA8IHBvcHVwRWxlbWVudEJvdW5kcy53aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBOb3QgZW5vdWdoIHNwYWNlIGxlZnQgb3IgcmlnaHQgb2Ygcm9vdCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3R1YWxQb3B1cFdpZHRoID0gTWF0aC5taW4ocG9wdXBFbGVtZW50Qm91bmRzLndpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LnN0eWxlLm1heFdpZHRoID0gYWN0dWFsUG9wdXBXaWR0aCArIFwicHhcIjtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0dWFsUG9wdXBXaWR0aCA8IHBvcHVwRWxlbWVudEJvdW5kcy53aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IFV0aWxzLmdldFNjcm9sbFgoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBVdGlscy5nZXRTY3JvbGxYKCkgKyByb290RWxlbWVudEJvdW5kcy5sZWZ0ICsgKHJvb3RFbGVtZW50Qm91bmRzLndpZHRoIC0gYWN0dWFsUG9wdXBXaWR0aCkgLzI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVub3VnaCBzcGFjZSBvbiB0aGUgbGVmdCBvciByaWdodCBvZiB0aGUgcm9vdCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdmFpbGFibGVTcGFjZVJpZ2h0ID49IHBvcHVwRWxlbWVudEJvdW5kcy53aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IFV0aWxzLmdldFNjcm9sbFgoKSArIHJvb3RFbGVtZW50Qm91bmRzLnJpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZCguLi50aGlzLmhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZXMoXCJhYy1jdHJsLXNsaWRlXCIsIFwiYWMtY3RybC1zbGlkZUxlZnRUb1JpZ2h0XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBVdGlscy5nZXRTY3JvbGxYKCkgKyByb290RWxlbWVudEJvdW5kcy5sZWZ0IC0gcG9wdXBFbGVtZW50Qm91bmRzLndpZHRoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZCguLi50aGlzLmhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZXMoXCJhYy1jdHJsLXNsaWRlXCIsIFwiYWMtY3RybC1zbGlkZVJpZ2h0VG9MZWZ0XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEVub3VnaCBzcGFjZSBhYm92ZSBvciBiZWxvdyByb290IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlU3BhY2VCZWxvdyA+PSBwb3B1cEVsZW1lbnRCb3VuZHMuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IFV0aWxzLmdldFNjcm9sbFkoKSArIHJvb3RFbGVtZW50Qm91bmRzLmJvdHRvbTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZCguLi50aGlzLmhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZXMoXCJhYy1jdHJsLXNsaWRlXCIsIFwiYWMtY3RybC1zbGlkZVRvcFRvQm90dG9tXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IFV0aWxzLmdldFNjcm9sbFkoKSArIHJvb3RFbGVtZW50Qm91bmRzLnRvcCAtIHBvcHVwRWxlbWVudEJvdW5kcy5oZWlnaHRcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZCguLi50aGlzLmhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZXMoXCJhYy1jdHJsLXNsaWRlXCIsIFwiYWMtY3RybC1zbGlkZUJvdHRvbVRvVG9wXCIpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlU3BhY2VSaWdodCA8IHBvcHVwRWxlbWVudEJvdW5kcy53aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gVXRpbHMuZ2V0U2Nyb2xsWCgpICsgcm9vdEVsZW1lbnRCb3VuZHMucmlnaHQgLSBwb3B1cEVsZW1lbnRCb3VuZHMud2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuc3R5bGUubGVmdCA9IGxlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuc3R5bGUudG9wID0gdG9wICsgXCJweFwiO1xuXG4gICAgICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuZm9jdXMoKTtcblxuICAgICAgICAgICAgdGhpcy5faXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsb3NlUG9wdXAod2FzQ2FuY2VsbGVkOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc09wZW4pIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5fb3ZlcmxheUVsZW1lbnQpO1xuXG4gICAgICAgICAgICB0aGlzLl9pc09wZW4gPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKHRoaXMub25DbG9zZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25DbG9zZSh0aGlzLCB3YXNDYW5jZWxsZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGhvc3RDb25maWcoKTogSG9zdENvbmZpZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ob3N0Q29uZmlnID8gdGhpcy5faG9zdENvbmZpZyA6IGRlZmF1bHRIb3N0Q29uZmlnO1xuICAgIH1cblxuICAgIHNldCBob3N0Q29uZmlnKHZhbHVlOiBIb3N0Q29uZmlnKSB7XG4gICAgICAgIHRoaXMuX2hvc3RDb25maWcgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgaXNPcGVuKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNPcGVuO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSBcIi4vY29sbGVjdGlvblwiO1xuaW1wb3J0IHsgUG9wdXBDb250cm9sIH0gZnJvbSBcIi4vcG9wdXAtY29udHJvbFwiO1xuaW1wb3J0IHsgTWVudUl0ZW0gfSBmcm9tIFwiLi9tZW51LWl0ZW1cIjtcblxuZXhwb3J0IGNsYXNzIFBvcHVwTWVudSBleHRlbmRzIFBvcHVwQ29udHJvbCB7XG4gICAgcHJpdmF0ZSBfaXRlbXM6IENvbGxlY3Rpb248TWVudUl0ZW0+ID0gbmV3IENvbGxlY3Rpb248TWVudUl0ZW0+KCk7XG4gICAgcHJpdmF0ZSBfcmVuZGVyZWRJdGVtczogQXJyYXk8SFRNTEVsZW1lbnQ+ID0gW107XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWRJbmRleDogbnVtYmVyID0gLTE7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyQ29udGVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSB0aGlzLmhvc3RDb25maWcubWFrZUNzc0NsYXNzTmFtZShcImFjLWN0cmwgYWMtcG9wdXBcIik7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImxpc3Rib3hcIik7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHJlbmRlcmVkSXRlbSA9IHRoaXMuX2l0ZW1zLmdldChpKS5yZW5kZXIodGhpcy5ob3N0Q29uZmlnKTtcbiAgICAgICAgICAgIHJlbmRlcmVkSXRlbS50YWJJbmRleCA9IDA7XG5cbiAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQocmVuZGVyZWRJdGVtKTtcblxuICAgICAgICAgICAgaWYgKGkgPT0gdGhpcy5zZWxlY3RlZEluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZWRJdGVtLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVkSXRlbXMucHVzaChyZW5kZXJlZEl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAga2V5RG93bihlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIHN1cGVyLmtleURvd24oZSk7XG5cbiAgICAgICAgdmFyIHNlbGVjdGVkSXRlbUluZGV4ID0gdGhpcy5fc2VsZWN0ZWRJbmRleDtcblxuICAgICAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgICAgICBjYXNlIENvbnN0YW50cy5rZXlzLnRhYjpcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUG9wdXAodHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBjYXNlIENvbnN0YW50cy5rZXlzLmVudGVyOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSB0aGlzLnNlbGVjdGVkSW5kZXg7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzLmtleXMudXA6XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkSXRlbUluZGV4IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtSW5kZXggPSB0aGlzLl9yZW5kZXJlZEl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW1JbmRleC0tO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEl0ZW1JbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbUluZGV4ID0gdGhpcy5fcmVuZGVyZWRJdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRJdGVtSW5kZXg7XG5cbiAgICAgICAgICAgICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ29uc3RhbnRzLmtleXMuZG93bjpcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRJdGVtSW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbUluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbUluZGV4Kys7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkSXRlbUluZGV4ID49IHRoaXMuX3JlbmRlcmVkSXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW1JbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBzZWxlY3RlZEl0ZW1JbmRleDtcblxuICAgICAgICAgICAgICAgIGUuY2FuY2VsQnViYmxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGl0ZW1zKCk6IENvbGxlY3Rpb248TWVudUl0ZW0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zO1xuICAgIH1cblxuICAgIGdldCBzZWxlY3RlZEluZGV4KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZEluZGV4O1xuICAgIH1cblxuICAgIHNldCBzZWxlY3RlZEluZGV4KGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9yZW5kZXJlZEl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWRJdGVtc1tpbmRleF0uZm9jdXMoKTtcblxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWRJbmRleCA9IGluZGV4O1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbi8vIE5vdGUgdGhlIFwid2VpcmRcIiB3YXkgdGhlc2UgcmVhZG9ubHkgZmllbGRzIGFyZSBkZWNsYXJlZCBpcyB0byB3b3JrIGFyb3VuZFxuLy8gYSBicmVha2luZyBjaGFuZ2UgaW50cm9kdWNlZCBpbiBUUyAzLjEgd3J0IGQudHMgZ2VuZXJhdGlvbi4gRE8gTk9UIENIQU5HRVxuLy8gYW5kIGFkb3B0IHRoaXMgc3ludGF4IGZvciBhbGwgb3RoZXIgc3RhdGljIHJlYWRvbmx5IGZpZWxkcy5cbmV4cG9ydCBjbGFzcyBBY3Rpb25TdHlsZSB7XG4gICAgc3RhdGljIHJlYWRvbmx5IERlZmF1bHQ6IFwiZGVmYXVsdFwiID0gXCJkZWZhdWx0XCI7XG4gICAgc3RhdGljIHJlYWRvbmx5IFBvc2l0aXZlOiBcInBvc2l0aXZlXCIgPSBcInBvc2l0aXZlXCI7XG4gICAgc3RhdGljIHJlYWRvbmx5IERlc3RydWN0aXZlOiBcImRlc3RydWN0aXZlXCIgPSBcImRlc3RydWN0aXZlXCI7XG59XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25Nb2RlIHtcbiAgICBzdGF0aWMgcmVhZG9ubHkgUHJpbWFyeTogXCJwcmltYXJ5XCIgPSBcInByaW1hcnlcIjtcbiAgICBzdGF0aWMgcmVhZG9ubHkgU2Vjb25kYXJ5OiBcInNlY29uZGFyeVwiID0gXCJzZWNvbmRhcnlcIjtcbn1cblxuZXhwb3J0IGVudW0gU2l6ZSB7XG4gICAgQXV0byxcbiAgICBTdHJldGNoLFxuICAgIFNtYWxsLFxuICAgIE1lZGl1bSxcbiAgICBMYXJnZVxufVxuXG5leHBvcnQgZW51bSBJbWFnZVNpemUge1xuICAgIFNtYWxsLFxuICAgIE1lZGl1bSxcbiAgICBMYXJnZVxufVxuXG5leHBvcnQgZW51bSBTaXplVW5pdCB7XG4gICAgV2VpZ2h0LFxuICAgIFBpeGVsXG59XG5cbmV4cG9ydCBlbnVtIFRleHRTaXplIHtcbiAgICBTbWFsbCxcbiAgICBEZWZhdWx0LFxuICAgIE1lZGl1bSxcbiAgICBMYXJnZSxcbiAgICBFeHRyYUxhcmdlXG59XG5cbmV4cG9ydCBlbnVtIFRleHRXZWlnaHQge1xuICAgIExpZ2h0ZXIsXG4gICAgRGVmYXVsdCxcbiAgICBCb2xkZXJcbn1cblxuZXhwb3J0IGVudW0gRm9udFR5cGUge1xuICAgIERlZmF1bHQsXG4gICAgTW9ub3NwYWNlXG59XG5cbmV4cG9ydCBlbnVtIFNwYWNpbmcge1xuICAgIE5vbmUsXG4gICAgU21hbGwsXG4gICAgRGVmYXVsdCxcbiAgICBNZWRpdW0sXG4gICAgTGFyZ2UsXG4gICAgRXh0cmFMYXJnZSxcbiAgICBQYWRkaW5nXG59XG5cbmV4cG9ydCBlbnVtIFRleHRDb2xvciB7XG4gICAgRGVmYXVsdCxcbiAgICBEYXJrLFxuICAgIExpZ2h0LFxuICAgIEFjY2VudCxcbiAgICBHb29kLFxuICAgIFdhcm5pbmcsXG4gICAgQXR0ZW50aW9uXG59XG5cbmV4cG9ydCBlbnVtIEhvcml6b250YWxBbGlnbm1lbnQge1xuICAgIExlZnQsXG4gICAgQ2VudGVyLFxuICAgIFJpZ2h0XG59XG5cbmV4cG9ydCBlbnVtIFZlcnRpY2FsQWxpZ25tZW50IHtcbiAgICBUb3AsXG4gICAgQ2VudGVyLFxuICAgIEJvdHRvbVxufVxuXG5leHBvcnQgZW51bSBBY3Rpb25BbGlnbm1lbnQge1xuICAgIExlZnQsXG4gICAgQ2VudGVyLFxuICAgIFJpZ2h0LFxuICAgIFN0cmV0Y2hcbn1cblxuZXhwb3J0IGVudW0gSW1hZ2VTdHlsZSB7XG4gICAgRGVmYXVsdCxcbiAgICBQZXJzb25cbn1cblxuZXhwb3J0IGVudW0gU2hvd0NhcmRBY3Rpb25Nb2RlIHtcbiAgICBJbmxpbmUsXG4gICAgUG9wdXBcbn1cblxuZXhwb3J0IGVudW0gT3JpZW50YXRpb24ge1xuICAgIEhvcml6b250YWwsXG4gICAgVmVydGljYWxcbn1cblxuZXhwb3J0IGVudW0gRmlsbE1vZGUge1xuICAgIENvdmVyLFxuICAgIFJlcGVhdEhvcml6b250YWxseSxcbiAgICBSZXBlYXRWZXJ0aWNhbGx5LFxuICAgIFJlcGVhdFxufVxuXG5leHBvcnQgZW51bSBBY3Rpb25JY29uUGxhY2VtZW50IHtcbiAgICBMZWZ0T2ZUaXRsZSxcbiAgICBBYm92ZVRpdGxlXG59XG5cbmV4cG9ydCBlbnVtIElucHV0VGV4dFN0eWxlIHtcbiAgICBUZXh0LFxuICAgIFRlbCxcbiAgICBVcmwsXG4gICAgRW1haWwsXG4gICAgUGFzc3dvcmRcbn1cblxuLypcbiAgICBUaGlzIHNob3VsZCByZWFsbHkgYmUgYSBzdHJpbmcgZW51bSwgZS5nLlxuXG4gICAgICAgIGV4cG9ydCBlbnVtIENvbnRhaW5lclN0eWxlIHtcbiAgICAgICAgICAgIERlZmF1bHQgPSBcImRlZmF1bHRcIixcbiAgICAgICAgICAgIEVtcGhhc2lzID0gXCJlbXBoYXNpc1wiXG4gICAgICAgIH1cblxuICAgIEhvd2V2ZXIsIHNvbWUgaG9zdHMgZG8gbm90IHVzZSBhIHZlcnNpb24gb2YgVHlwZVNjcmlwdFxuICAgIHJlY2VudCBlbm91Z2ggdG8gdW5kZXJzdGFuZCBzdHJpbmcgZW51bXMuIFRoaXMgaXNcbiAgICBhIGNvbXBhdGlibGUgY29uc3RydWN0IHRoYXQgZG9lcyBub3QgcmVxdWlyZSB1c2luZ1xuICAgIGEgbW9yZSByZWNlbnQgdmVyc2lvbiBvZiBUeXBlU2NyaXB0LlxuXG4gICAgQWxzbyBub3RlIHRoZSBcIndlaXJkXCIgd2F5IHRoZXNlIHJlYWRvbmx5IGZpZWxkcyBhcmUgZGVjbGFyZWQgaXMgdG8gd29yayBhcm91bmRcbiAgICBhIGJyZWFraW5nIGNoYW5nZSBpbnRyb2R1Y2VkIGluIFRTIDMuMSB3cnQgZC50cyBnZW5lcmF0aW9uLiBETyBOT1QgQ0hBTkdFXG4gICAgYW5kIGFkb3B0IHRoaXMgc3ludGF4IGZvciBhbGwgb3RoZXIgc3RhdGljIHJlYWRvbmx5IGZpZWxkcy5cbiovXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyU3R5bGUge1xuICAgIHN0YXRpYyByZWFkb25seSBEZWZhdWx0OiBcImRlZmF1bHRcIiA9IFwiZGVmYXVsdFwiO1xuICAgIHN0YXRpYyByZWFkb25seSBFbXBoYXNpczogXCJlbXBoYXNpc1wiID0gXCJlbXBoYXNpc1wiO1xuICAgIHN0YXRpYyByZWFkb25seSBBY2NlbnQ6IFwiYWNjZW50XCIgPSBcImFjY2VudFwiO1xuICAgIHN0YXRpYyByZWFkb25seSBHb29kOiBcImdvb2RcIiA9IFwiZ29vZFwiO1xuICAgIHN0YXRpYyByZWFkb25seSBBdHRlbnRpb246IFwiYXR0ZW50aW9uXCIgPSBcImF0dGVudGlvblwiO1xuICAgIHN0YXRpYyByZWFkb25seSBXYXJuaW5nOiBcIndhcm5pbmdcIiA9IFwid2FybmluZ1wiO1xufVxuXG5leHBvcnQgZW51bSBWYWxpZGF0aW9uUGhhc2Uge1xuICAgIFBhcnNlLFxuICAgIFRvSlNPTixcbiAgICBWYWxpZGF0aW9uXG59XG5cbmV4cG9ydCBlbnVtIFZhbGlkYXRpb25FdmVudCB7XG4gICAgSGludCxcbiAgICBBY3Rpb25UeXBlTm90QWxsb3dlZCxcbiAgICBDb2xsZWN0aW9uQ2FudEJlRW1wdHksXG4gICAgRGVwcmVjYXRlZCxcbiAgICBFbGVtZW50VHlwZU5vdEFsbG93ZWQsXG4gICAgSW50ZXJhY3Rpdml0eU5vdEFsbG93ZWQsXG4gICAgSW52YWxpZFByb3BlcnR5VmFsdWUsXG4gICAgTWlzc2luZ0NhcmRUeXBlLFxuICAgIFByb3BlcnR5Q2FudEJlTnVsbCxcbiAgICBUb29NYW55QWN0aW9ucyxcbiAgICBVbmtub3duQWN0aW9uVHlwZSxcbiAgICBVbmtub3duRWxlbWVudFR5cGUsXG4gICAgVW5zdXBwb3J0ZWRDYXJkVmVyc2lvbixcbiAgICBEdXBsaWNhdGVJZCxcbiAgICBVbnN1cHBvcnRlZFByb3BlcnR5LFxuICAgIFJlcXVpcmVkSW5wdXRzU2hvdWxkSGF2ZUxhYmVsLFxuICAgIFJlcXVpcmVkSW5wdXRzU2hvdWxkSGF2ZUVycm9yTWVzc2FnZSxcbiAgICBPdGhlclxufVxuXG5leHBvcnQgZW51bSBDb250YWluZXJGaXRTdGF0dXMge1xuICAgIEZ1bGx5SW5Db250YWluZXIsXG4gICAgT3ZlcmZsb3dpbmcsXG4gICAgRnVsbHlPdXRPZkNvbnRhaW5lclxufVxuXG5leHBvcnQgZW51bSBUeXBlRXJyb3JUeXBlIHtcbiAgICBVbmtub3duVHlwZSxcbiAgICBGb3JiaWRkZW5UeXBlXG59XG5cbmV4cG9ydCBlbnVtIFJlZnJlc2hNb2RlIHtcbiAgICBEaXNhYmxlZCxcbiAgICBNYW51YWwsXG4gICAgQXV0b21hdGljXG59XG5cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgICBJbmZvLFxuICAgIFdhcm5pbmcsXG4gICAgRXJyb3Jcbn1cbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgVGFyZ2V0VmVyc2lvbiwgVmVyc2lvbiwgU2VyaWFsaXphYmxlT2JqZWN0LCBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQsIFByb3BlcnR5QmFnIH0gZnJvbSBcIi4vc2VyaWFsaXphdGlvblwiO1xuXG5leHBvcnQgY2xhc3MgSG9zdENhcGFiaWxpdGllcyBleHRlbmRzIFNlcmlhbGl6YWJsZU9iamVjdCB7XG4gICAgcHJpdmF0ZSBfY2FwYWJpbGl0aWVzOiB7IFtrZXk6IHN0cmluZ106IFRhcmdldFZlcnNpb24gfSA9IHt9O1xuXG4gICAgcHJvdGVjdGVkIGdldFNjaGVtYUtleSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJIb3N0Q2FwYWJpbGl0aWVzXCI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUGFyc2Uoc291cmNlOiBhbnksIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFBhcnNlKHNvdXJjZSwgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgZm9yIChsZXQgbmFtZSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBsZXQganNvblZlcnNpb24gPSBzb3VyY2VbbmFtZV07XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGpzb25WZXJzaW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqc29uVmVyc2lvbiA9PSBcIipcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDYXBhYmlsaXR5KG5hbWUsIFwiKlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2ZXJzaW9uID0gVmVyc2lvbi5wYXJzZShqc29uVmVyc2lvbiwgY29udGV4dCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uICYmIHZlcnNpb24uaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2FwYWJpbGl0eShuYW1lLCB2ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFRvSlNPTih0YXJnZXQ6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgc3VwZXIuaW50ZXJuYWxUb0pTT04odGFyZ2V0LCBjb250ZXh0KTtcblxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5fY2FwYWJpbGl0aWVzKSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHRoaXMuX2NhcGFiaWxpdGllc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkQ2FwYWJpbGl0eShuYW1lOiBzdHJpbmcsIHZlcnNpb246IFRhcmdldFZlcnNpb24pIHtcbiAgICAgICAgdGhpcy5fY2FwYWJpbGl0aWVzW25hbWVdID0gdmVyc2lvbjtcbiAgICB9XG5cbiAgICByZW1vdmVDYXBhYmlsaXR5KG5hbWU6IHN0cmluZykge1xuICAgICAgICBkZWxldGUgdGhpcy5fY2FwYWJpbGl0aWVzW25hbWVdO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9jYXBhYmlsaXRpZXMgPSB7fTtcbiAgICB9XG5cbiAgICBoYXNDYXBhYmlsaXR5KG5hbWU6IHN0cmluZywgdmVyc2lvbjogVGFyZ2V0VmVyc2lvbik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5fY2FwYWJpbGl0aWVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICBpZiAodmVyc2lvbiA9PSBcIipcIiB8fCB0aGlzLl9jYXBhYmlsaXRpZXNbbmFtZV0gPT0gXCIqXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZlcnNpb24uY29tcGFyZVRvKDxWZXJzaW9uPnRoaXMuX2NhcGFiaWxpdGllc1tuYW1lXSkgPD0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBhcmVBbGxNZXQoaG9zdENhcGFiaWxpdGllczogSG9zdENhcGFiaWxpdGllcyk6IGJvb2xlYW4ge1xuICAgICAgICBmb3IgKGxldCBjYXBhYmlsaXR5TmFtZSBpbiB0aGlzLl9jYXBhYmlsaXRpZXMpIHtcbiAgICAgICAgICAgIGlmICghaG9zdENhcGFiaWxpdGllcy5oYXNDYXBhYmlsaXR5KGNhcGFiaWxpdHlOYW1lLCB0aGlzLl9jYXBhYmlsaXRpZXNbY2FwYWJpbGl0eU5hbWVdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn0iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCAqIGFzIEVudW1zIGZyb20gXCIuL2VudW1zXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0ICogYXMgU2hhcmVkIGZyb20gXCIuL3NoYXJlZFwiO1xuaW1wb3J0IHsgSG9zdENhcGFiaWxpdGllcyB9IGZyb20gXCIuL2hvc3QtY2FwYWJpbGl0aWVzXCI7XG5cbmZ1bmN0aW9uIHBhcnNlSG9zdENvbmZpZ0VudW0odGFyZ2V0RW51bTogeyBbczogbnVtYmVyXTogc3RyaW5nIH0sIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIsIGRlZmF1bHRWYWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGxldCBwYXJzZWRWYWx1ZSA9IFV0aWxzLnBhcnNlRW51bSh0YXJnZXRFbnVtLCB2YWx1ZSwgZGVmYXVsdFZhbHVlKTtcblxuICAgICAgICByZXR1cm4gcGFyc2VkVmFsdWUgIT09IHVuZGVmaW5lZCA/IHBhcnNlZFZhbHVlIDogZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb2xvckRlZmluaXRpb24ge1xuICAgIGRlZmF1bHQ6IHN0cmluZyA9IFwiIzAwMDAwMFwiO1xuICAgIHN1YnRsZTogc3RyaW5nID0gXCIjNjY2NjY2XCI7XG5cbiAgICBjb25zdHJ1Y3RvcihkZWZhdWx0Q29sb3I/OiBzdHJpbmcsIHN1YnRsZUNvbG9yPzogc3RyaW5nKSB7XG4gICAgICAgIGlmIChkZWZhdWx0Q29sb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdCA9IGRlZmF1bHRDb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdWJ0bGVDb2xvcikge1xuICAgICAgICAgICAgdGhpcy5zdWJ0bGUgPSBzdWJ0bGVDb2xvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlKG9iaj86IGFueSkge1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHQgPSBvYmpbXCJkZWZhdWx0XCJdIHx8IHRoaXMuZGVmYXVsdDtcbiAgICAgICAgICAgIHRoaXMuc3VidGxlID0gb2JqW1wic3VidGxlXCJdIHx8IHRoaXMuc3VidGxlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGV4dENvbG9yRGVmaW5pdGlvbiBleHRlbmRzIENvbG9yRGVmaW5pdGlvbiB7XG4gICAgcmVhZG9ubHkgaGlnaGxpZ2h0Q29sb3JzID0gbmV3IENvbG9yRGVmaW5pdGlvbihcIiMyMjAwMDAwMFwiLCBcIiMxMTAwMDAwMFwiKTtcblxuICAgIHBhcnNlKG9iaj86IGFueSkge1xuICAgICAgICBzdXBlci5wYXJzZShvYmopO1xuXG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0Q29sb3JzLnBhcnNlKG9ialtcImhpZ2hsaWdodENvbG9yc1wiXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBZGFwdGl2ZUNhcmRDb25maWcge1xuICAgIGFsbG93Q3VzdG9tU3R5bGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICB0aGlzLmFsbG93Q3VzdG9tU3R5bGUgPSBvYmpbXCJhbGxvd0N1c3RvbVN0eWxlXCJdIHx8IHRoaXMuYWxsb3dDdXN0b21TdHlsZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEltYWdlU2V0Q29uZmlnIHtcbiAgICBpbWFnZVNpemU6IEVudW1zLlNpemUgPSBFbnVtcy5TaXplLk1lZGl1bTtcbiAgICBtYXhJbWFnZUhlaWdodDogbnVtYmVyID0gMTAwO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VTaXplID0gb2JqW1wiaW1hZ2VTaXplXCJdICE9IG51bGwgPyBvYmpbXCJpbWFnZVNpemVcIl0gOiB0aGlzLmltYWdlU2l6ZTtcbiAgICAgICAgICAgIHRoaXMubWF4SW1hZ2VIZWlnaHQgPSA8bnVtYmVyPlV0aWxzLnBhcnNlTnVtYmVyKG9ialtcIm1heEltYWdlSGVpZ2h0XCJdLCAxMDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW1hZ2VTaXplOiBFbnVtcy5TaXplW3RoaXMuaW1hZ2VTaXplXSxcbiAgICAgICAgICAgIG1heEltYWdlSGVpZ2h0OiB0aGlzLm1heEltYWdlSGVpZ2h0XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNZWRpYUNvbmZpZyB7XG4gICAgZGVmYXVsdFBvc3Rlcj86IHN0cmluZztcbiAgICBhbGxvd0lubGluZVBsYXliYWNrOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRQb3N0ZXIgPSBvYmpbXCJkZWZhdWx0UG9zdGVyXCJdO1xuICAgICAgICAgICAgdGhpcy5hbGxvd0lubGluZVBsYXliYWNrID0gb2JqW1wiYWxsb3dJbmxpbmVQbGF5YmFja1wiXSB8fCB0aGlzLmFsbG93SW5saW5lUGxheWJhY2s7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWZhdWx0UG9zdGVyOiB0aGlzLmRlZmF1bHRQb3N0ZXIsXG4gICAgICAgICAgICBhbGxvd0lubGluZVBsYXliYWNrOiB0aGlzLmFsbG93SW5saW5lUGxheWJhY2tcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRhYmxlQ29uZmlnIHtcbiAgICBjZWxsU3BhY2luZzogbnVtYmVyID0gODtcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICB0aGlzLmNlbGxTcGFjaW5nID0gb2JqLmNlbGxTcGFjaW5nICYmIHR5cGVvZiBvYmouY2VsbFNwYWNpbmcgPT09IFwibnVtYmVyXCIgPyBvYmouY2VsbFNwYWNpbmcgOiB0aGlzLmNlbGxTcGFjaW5nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2VsbFNwYWNpbmc6IHRoaXMuY2VsbFNwYWNpbmdcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJhc2VUZXh0RGVmaW5pdGlvbiB7XG4gICAgc2l6ZTogRW51bXMuVGV4dFNpemUgPSBFbnVtcy5UZXh0U2l6ZS5EZWZhdWx0O1xuICAgIGNvbG9yOiBFbnVtcy5UZXh0Q29sb3IgPSBFbnVtcy5UZXh0Q29sb3IuRGVmYXVsdDs7XG4gICAgaXNTdWJ0bGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICB3ZWlnaHQ6IEVudW1zLlRleHRXZWlnaHQgPSBFbnVtcy5UZXh0V2VpZ2h0LkRlZmF1bHQ7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBhbnkpIHtcbiAgICAgICAgdGhpcy5wYXJzZShvYmopO1xuICAgIH1cblxuICAgIHBhcnNlKG9iajogYW55KSB7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IHBhcnNlSG9zdENvbmZpZ0VudW0oRW51bXMuVGV4dFNpemUsIG9ialtcInNpemVcIl0sIHRoaXMuc2l6ZSk7XG4gICAgICAgICAgICB0aGlzLmNvbG9yID0gcGFyc2VIb3N0Q29uZmlnRW51bShFbnVtcy5UZXh0Q29sb3IsIG9ialtcImNvbG9yXCJdLCB0aGlzLmNvbG9yKTtcbiAgICAgICAgICAgIHRoaXMuaXNTdWJ0bGUgPSBvYmouaXNTdWJ0bGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2JqLmlzU3VidGxlID09PSBcImJvb2xlYW5cIiA/IG9iai5pc1N1YnRsZSA6IHRoaXMuaXNTdWJ0bGU7XG4gICAgICAgICAgICB0aGlzLndlaWdodCA9IHBhcnNlSG9zdENvbmZpZ0VudW0oRW51bXMuVGV4dFdlaWdodCwgb2JqW1wid2VpZ2h0XCJdLCB0aGlzLmdldERlZmF1bHRXZWlnaHQoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXREZWZhdWx0V2VpZ2h0KCk6IEVudW1zLlRleHRXZWlnaHQge1xuICAgICAgICByZXR1cm4gRW51bXMuVGV4dFdlaWdodC5EZWZhdWx0O1xuICAgIH1cblxuICAgIHRvSlNPTigpOiBhbnkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2l6ZTogRW51bXMuVGV4dFNpemVbdGhpcy5zaXplXSxcbiAgICAgICAgICAgIGNvbG9yOiBFbnVtcy5UZXh0Q29sb3JbdGhpcy5jb2xvcl0sXG4gICAgICAgICAgICBpc1N1YnRsZTogdGhpcy5pc1N1YnRsZSxcbiAgICAgICAgICAgIHdlaWdodDogRW51bXMuVGV4dFdlaWdodFt0aGlzLndlaWdodF1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRleHRTdHlsZURlZmluaXRpb24gZXh0ZW5kcyBCYXNlVGV4dERlZmluaXRpb24ge1xuICAgIGZvbnRUeXBlOiBFbnVtcy5Gb250VHlwZSA9IEVudW1zLkZvbnRUeXBlLkRlZmF1bHQ7XG5cbiAgICBwYXJzZShvYmo6IGFueSkge1xuICAgICAgICBzdXBlci5wYXJzZShvYmopO1xuXG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIHRoaXMuZm9udFR5cGUgPSBwYXJzZUhvc3RDb25maWdFbnVtKEVudW1zLkZvbnRUeXBlLCBvYmouZm9udFR5cGUsIHRoaXMuZm9udFR5cGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGV4dFN0eWxlU2V0IHtcbiAgICByZWFkb25seSBkZWZhdWx0OiBUZXh0U3R5bGVEZWZpbml0aW9uID0gbmV3IFRleHRTdHlsZURlZmluaXRpb24oKTtcbiAgICByZWFkb25seSBoZWFkaW5nOiBUZXh0U3R5bGVEZWZpbml0aW9uID0gbmV3IFRleHRTdHlsZURlZmluaXRpb24oXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgICAgIHdlaWdodDogXCJCb2xkZXJcIlxuICAgICAgICB9KTtcbiAgICByZWFkb25seSBjb2x1bW5IZWFkZXI6IFRleHRTdHlsZURlZmluaXRpb24gPSBuZXcgVGV4dFN0eWxlRGVmaW5pdGlvbihcbiAgICAgICAge1xuICAgICAgICAgICAgd2VpZ2h0OiBcIkJvbGRlclwiXG4gICAgICAgIH0pO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICB0aGlzLmhlYWRpbmcucGFyc2Uob2JqLmhlYWRpbmcpO1xuICAgICAgICAgICAgdGhpcy5jb2x1bW5IZWFkZXIucGFyc2Uob2JqLmNvbHVtbkhlYWRlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRTdHlsZUJ5TmFtZShuYW1lOiBzdHJpbmcpOiBUZXh0U3R5bGVEZWZpbml0aW9uIHtcbiAgICAgICAgc3dpdGNoIChuYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJoZWFkaW5nXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGVhZGluZztcbiAgICAgICAgICAgIGNhc2UgXCJjb2x1bW5IZWFkZXJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5IZWFkZXI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUZXh0QmxvY2tDb25maWcge1xuICAgIGhlYWRpbmdMZXZlbD86IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICB0aGlzLmhlYWRpbmdMZXZlbCA9IFV0aWxzLnBhcnNlTnVtYmVyKG9iai5oZWFkaW5nTGV2ZWwpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVxdWlyZWRJbnB1dExhYmVsVGV4dERlZmluaXRpb24gZXh0ZW5kcyBCYXNlVGV4dERlZmluaXRpb24ge1xuICAgIHN1ZmZpeD86IHN0cmluZyA9IFwiICpcIjtcbiAgICBzdWZmaXhDb2xvcjogRW51bXMuVGV4dENvbG9yID0gRW51bXMuVGV4dENvbG9yLkF0dGVudGlvbjtcblxuICAgIHBhcnNlKG9iaj86IGFueSkge1xuICAgICAgICBzdXBlci5wYXJzZShvYmopO1xuXG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIHRoaXMuc3VmZml4ID0gb2JqW1wic3VmZml4XCJdIHx8IHRoaXMuc3VmZml4O1xuICAgICAgICAgICAgdGhpcy5zdWZmaXhDb2xvciA9IHBhcnNlSG9zdENvbmZpZ0VudW0oRW51bXMuVGV4dENvbG9yLCBvYmpbXCJzdWZmaXhDb2xvclwiXSwgdGhpcy5zdWZmaXhDb2xvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b0pTT04oKTogYW55IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHN1cGVyLnRvSlNPTigpO1xuICAgICAgICByZXN1bHRbXCJzdWZmaXhcIl0gPSB0aGlzLnN1ZmZpeDtcbiAgICAgICAgcmVzdWx0W1wic3VmZml4Q29sb3JcIl0gPSBFbnVtcy5UZXh0Q29sb3JbdGhpcy5zdWZmaXhDb2xvcl07XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnB1dExhYmVsQ29uZmlnIHtcbiAgICBpbnB1dFNwYWNpbmc6IEVudW1zLlNwYWNpbmcgPSBFbnVtcy5TcGFjaW5nLlNtYWxsO1xuICAgIHJlYWRvbmx5IHJlcXVpcmVkSW5wdXRzOiBSZXF1aXJlZElucHV0TGFiZWxUZXh0RGVmaW5pdGlvbiA9IG5ldyBSZXF1aXJlZElucHV0TGFiZWxUZXh0RGVmaW5pdGlvbigpO1xuICAgIHJlYWRvbmx5IG9wdGlvbmFsSW5wdXRzOiBCYXNlVGV4dERlZmluaXRpb24gPSBuZXcgQmFzZVRleHREZWZpbml0aW9uKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBhbnkpIHtcbiAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgdGhpcy5pbnB1dFNwYWNpbmcgPSBwYXJzZUhvc3RDb25maWdFbnVtKEVudW1zLlNwYWNpbmcsIG9ialtcImlucHV0U3BhY2luZ1wiXSwgdGhpcy5pbnB1dFNwYWNpbmcpO1xuICAgICAgICAgICAgdGhpcy5yZXF1aXJlZElucHV0cyA9IG5ldyBSZXF1aXJlZElucHV0TGFiZWxUZXh0RGVmaW5pdGlvbihvYmpbXCJyZXF1aXJlZElucHV0c1wiXSk7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbmFsSW5wdXRzID0gbmV3IEJhc2VUZXh0RGVmaW5pdGlvbihvYmpbXCJvcHRpb25hbElucHV0c1wiXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnB1dENvbmZpZyB7XG4gICAgcmVhZG9ubHkgbGFiZWw6IElucHV0TGFiZWxDb25maWcgPSBuZXcgSW5wdXRMYWJlbENvbmZpZygpO1xuICAgIHJlYWRvbmx5IGVycm9yTWVzc2FnZTogQmFzZVRleHREZWZpbml0aW9uID0gbmV3IEJhc2VUZXh0RGVmaW5pdGlvbih7IGNvbG9yOiBFbnVtcy5UZXh0Q29sb3IuQXR0ZW50aW9uIH0pO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIHRoaXMubGFiZWwgPSBuZXcgSW5wdXRMYWJlbENvbmZpZyhvYmpbXCJsYWJlbFwiXSk7XG4gICAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IG5ldyBCYXNlVGV4dERlZmluaXRpb24ob2JqW1wiZXJyb3JNZXNzYWdlXCJdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZhY3RUZXh0RGVmaW5pdGlvbiBleHRlbmRzIEJhc2VUZXh0RGVmaW5pdGlvbiB7XG4gICAgd3JhcDogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBwYXJzZShvYmo/OiBhbnkpIHtcbiAgICAgICAgc3VwZXIucGFyc2Uob2JqKTtcblxuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICB0aGlzLndyYXAgPSBvYmpbXCJ3cmFwXCJdICE9IG51bGwgPyBvYmpbXCJ3cmFwXCJdIDogdGhpcy53cmFwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9KU09OKCk6IGFueSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBzdXBlci50b0pTT04oKTtcbiAgICAgICAgcmVzdWx0W1wid3JhcFwiXSA9IHRoaXMud3JhcDtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZhY3RUaXRsZURlZmluaXRpb24gZXh0ZW5kcyBGYWN0VGV4dERlZmluaXRpb24ge1xuICAgIG1heFdpZHRoPzogbnVtYmVyID0gMTUwO1xuICAgIHdlaWdodDogRW51bXMuVGV4dFdlaWdodCA9IEVudW1zLlRleHRXZWlnaHQuQm9sZGVyO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIHN1cGVyKG9iaik7XG5cbiAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgdGhpcy5tYXhXaWR0aCA9IG9ialtcIm1heFdpZHRoXCJdICE9IG51bGwgPyBvYmpbXCJtYXhXaWR0aFwiXSA6IHRoaXMubWF4V2lkdGg7XG4gICAgICAgICAgICB0aGlzLndlaWdodCA9IHBhcnNlSG9zdENvbmZpZ0VudW0oRW51bXMuVGV4dFdlaWdodCwgb2JqW1wid2VpZ2h0XCJdLCBFbnVtcy5UZXh0V2VpZ2h0LkJvbGRlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXREZWZhdWx0V2VpZ2h0KCkge1xuICAgICAgICByZXR1cm4gRW51bXMuVGV4dFdlaWdodC5Cb2xkZXI7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRmFjdFNldENvbmZpZyB7XG4gICAgcmVhZG9ubHkgdGl0bGU6IEZhY3RUaXRsZURlZmluaXRpb24gPSBuZXcgRmFjdFRpdGxlRGVmaW5pdGlvbigpO1xuICAgIHJlYWRvbmx5IHZhbHVlOiBGYWN0VGV4dERlZmluaXRpb24gPSBuZXcgRmFjdFRleHREZWZpbml0aW9uKCk7XG4gICAgc3BhY2luZzogbnVtYmVyID0gMTA7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBhbnkpIHtcbiAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgdGhpcy50aXRsZSA9IG5ldyBGYWN0VGl0bGVEZWZpbml0aW9uKG9ialtcInRpdGxlXCJdKTtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBuZXcgRmFjdFRleHREZWZpbml0aW9uKG9ialtcInZhbHVlXCJdKTtcbiAgICAgICAgICAgIHRoaXMuc3BhY2luZyA9IG9iai5zcGFjaW5nICYmIG9iai5zcGFjaW5nICE9IG51bGwgPyBvYmouc3BhY2luZyAmJiBvYmouc3BhY2luZyA6IHRoaXMuc3BhY2luZztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNob3dDYXJkQWN0aW9uQ29uZmlnIHtcbiAgICBhY3Rpb25Nb2RlOiBFbnVtcy5TaG93Q2FyZEFjdGlvbk1vZGUgPSBFbnVtcy5TaG93Q2FyZEFjdGlvbk1vZGUuSW5saW5lO1xuICAgIGlubGluZVRvcE1hcmdpbjogbnVtYmVyID0gMTY7XG4gICAgc3R5bGU/OiBzdHJpbmcgPSBFbnVtcy5Db250YWluZXJTdHlsZS5FbXBoYXNpcztcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbk1vZGUgPSBwYXJzZUhvc3RDb25maWdFbnVtKEVudW1zLlNob3dDYXJkQWN0aW9uTW9kZSwgb2JqW1wiYWN0aW9uTW9kZVwiXSwgRW51bXMuU2hvd0NhcmRBY3Rpb25Nb2RlLklubGluZSk7XG4gICAgICAgICAgICB0aGlzLmlubGluZVRvcE1hcmdpbiA9IG9ialtcImlubGluZVRvcE1hcmdpblwiXSAhPSBudWxsID8gb2JqW1wiaW5saW5lVG9wTWFyZ2luXCJdIDogdGhpcy5pbmxpbmVUb3BNYXJnaW47XG4gICAgICAgICAgICB0aGlzLnN0eWxlID0gb2JqW1wic3R5bGVcIl0gJiYgdHlwZW9mIG9ialtcInN0eWxlXCJdID09PSBcInN0cmluZ1wiID8gb2JqW1wic3R5bGVcIl0gOiBFbnVtcy5Db250YWluZXJTdHlsZS5FbXBoYXNpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjdGlvbk1vZGU6IEVudW1zLlNob3dDYXJkQWN0aW9uTW9kZVt0aGlzLmFjdGlvbk1vZGVdLFxuICAgICAgICAgICAgaW5saW5lVG9wTWFyZ2luOiB0aGlzLmlubGluZVRvcE1hcmdpbixcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLnN0eWxlXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25zQ29uZmlnIHtcbiAgICBtYXhBY3Rpb25zOiBudW1iZXIgPSA1O1xuICAgIHNwYWNpbmc6IEVudW1zLlNwYWNpbmcgPSBFbnVtcy5TcGFjaW5nLkRlZmF1bHQ7XG4gICAgYnV0dG9uU3BhY2luZzogbnVtYmVyID0gMjA7XG4gICAgcmVhZG9ubHkgc2hvd0NhcmQ6IFNob3dDYXJkQWN0aW9uQ29uZmlnID0gbmV3IFNob3dDYXJkQWN0aW9uQ29uZmlnKCk7XG4gICAgcHJlRXhwYW5kU2luZ2xlU2hvd0NhcmRBY3Rpb24/OiBib29sZWFuID0gZmFsc2U7XG4gICAgYWN0aW9uc09yaWVudGF0aW9uOiBFbnVtcy5PcmllbnRhdGlvbiA9IEVudW1zLk9yaWVudGF0aW9uLkhvcml6b250YWw7XG4gICAgYWN0aW9uQWxpZ25tZW50OiBFbnVtcy5BY3Rpb25BbGlnbm1lbnQgPSBFbnVtcy5BY3Rpb25BbGlnbm1lbnQuTGVmdDtcbiAgICBpY29uUGxhY2VtZW50OiBFbnVtcy5BY3Rpb25JY29uUGxhY2VtZW50ID0gRW51bXMuQWN0aW9uSWNvblBsYWNlbWVudC5MZWZ0T2ZUaXRsZTtcbiAgICBhbGxvd1RpdGxlVG9XcmFwOiBib29sZWFuID0gZmFsc2U7XG4gICAgaWNvblNpemU6IG51bWJlciA9IDE2O1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIHRoaXMubWF4QWN0aW9ucyA9IG9ialtcIm1heEFjdGlvbnNcIl0gIT0gbnVsbCA/IG9ialtcIm1heEFjdGlvbnNcIl0gOiB0aGlzLm1heEFjdGlvbnM7XG4gICAgICAgICAgICB0aGlzLnNwYWNpbmcgPSBwYXJzZUhvc3RDb25maWdFbnVtKEVudW1zLlNwYWNpbmcsIG9iai5zcGFjaW5nICYmIG9iai5zcGFjaW5nLCBFbnVtcy5TcGFjaW5nLkRlZmF1bHQpO1xuICAgICAgICAgICAgdGhpcy5idXR0b25TcGFjaW5nID0gb2JqW1wiYnV0dG9uU3BhY2luZ1wiXSAhPSBudWxsID8gb2JqW1wiYnV0dG9uU3BhY2luZ1wiXSA6IHRoaXMuYnV0dG9uU3BhY2luZztcbiAgICAgICAgICAgIHRoaXMuc2hvd0NhcmQgPSBuZXcgU2hvd0NhcmRBY3Rpb25Db25maWcob2JqW1wic2hvd0NhcmRcIl0pO1xuICAgICAgICAgICAgdGhpcy5wcmVFeHBhbmRTaW5nbGVTaG93Q2FyZEFjdGlvbiA9IFV0aWxzLnBhcnNlQm9vbChvYmpbXCJwcmVFeHBhbmRTaW5nbGVTaG93Q2FyZEFjdGlvblwiXSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25zT3JpZW50YXRpb24gPSBwYXJzZUhvc3RDb25maWdFbnVtKEVudW1zLk9yaWVudGF0aW9uLCBvYmpbXCJhY3Rpb25zT3JpZW50YXRpb25cIl0sIEVudW1zLk9yaWVudGF0aW9uLkhvcml6b250YWwpO1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25BbGlnbm1lbnQgPSBwYXJzZUhvc3RDb25maWdFbnVtKEVudW1zLkFjdGlvbkFsaWdubWVudCwgb2JqW1wiYWN0aW9uQWxpZ25tZW50XCJdLCBFbnVtcy5BY3Rpb25BbGlnbm1lbnQuTGVmdCk7XG4gICAgICAgICAgICB0aGlzLmljb25QbGFjZW1lbnQgPSBwYXJzZUhvc3RDb25maWdFbnVtKEVudW1zLkFjdGlvbkljb25QbGFjZW1lbnQsIG9ialtcImljb25QbGFjZW1lbnRcIl0sIEVudW1zLkFjdGlvbkljb25QbGFjZW1lbnQuTGVmdE9mVGl0bGUpO1xuICAgICAgICAgICAgdGhpcy5hbGxvd1RpdGxlVG9XcmFwID0gb2JqW1wiYWxsb3dUaXRsZVRvV3JhcFwiXSAhPSBudWxsID8gb2JqW1wiYWxsb3dUaXRsZVRvV3JhcFwiXSA6IHRoaXMuYWxsb3dUaXRsZVRvV3JhcDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgc2l6ZUFuZFVuaXQgPSBTaGFyZWQuU2l6ZUFuZFVuaXQucGFyc2Uob2JqW1wiaWNvblNpemVcIl0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNpemVBbmRVbml0LnVuaXQgPT0gRW51bXMuU2l6ZVVuaXQuUGl4ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pY29uU2l6ZSA9IHNpemVBbmRVbml0LnBoeXNpY2FsU2l6ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIFN3YWxsb3cgdGhpcywga2VlcCBkZWZhdWx0IGljb24gc2l6ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWF4QWN0aW9uczogdGhpcy5tYXhBY3Rpb25zLFxuICAgICAgICAgICAgc3BhY2luZzogRW51bXMuU3BhY2luZ1t0aGlzLnNwYWNpbmddLFxuICAgICAgICAgICAgYnV0dG9uU3BhY2luZzogdGhpcy5idXR0b25TcGFjaW5nLFxuICAgICAgICAgICAgc2hvd0NhcmQ6IHRoaXMuc2hvd0NhcmQsXG4gICAgICAgICAgICBwcmVFeHBhbmRTaW5nbGVTaG93Q2FyZEFjdGlvbjogdGhpcy5wcmVFeHBhbmRTaW5nbGVTaG93Q2FyZEFjdGlvbixcbiAgICAgICAgICAgIGFjdGlvbnNPcmllbnRhdGlvbjogRW51bXMuT3JpZW50YXRpb25bdGhpcy5hY3Rpb25zT3JpZW50YXRpb25dLFxuICAgICAgICAgICAgYWN0aW9uQWxpZ25tZW50OiBFbnVtcy5BY3Rpb25BbGlnbm1lbnRbdGhpcy5hY3Rpb25BbGlnbm1lbnRdXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb2xvclNldERlZmluaXRpb24ge1xuICAgIHByaXZhdGUgcGFyc2VTaW5nbGVDb2xvcihvYmo6IGFueSwgcHJvcGVydHlOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgKCg8YW55PnRoaXMpW3Byb3BlcnR5TmFtZV0gYXMgVGV4dENvbG9yRGVmaW5pdGlvbikucGFyc2Uob2JqW3Byb3BlcnR5TmFtZV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVmYXVsdDogVGV4dENvbG9yRGVmaW5pdGlvbiA9IG5ldyBUZXh0Q29sb3JEZWZpbml0aW9uKCk7XG4gICAgZGFyazogVGV4dENvbG9yRGVmaW5pdGlvbiA9IG5ldyBUZXh0Q29sb3JEZWZpbml0aW9uKCk7XG4gICAgbGlnaHQ6IFRleHRDb2xvckRlZmluaXRpb24gPSBuZXcgVGV4dENvbG9yRGVmaW5pdGlvbigpO1xuICAgIGFjY2VudDogVGV4dENvbG9yRGVmaW5pdGlvbiA9IG5ldyBUZXh0Q29sb3JEZWZpbml0aW9uKCk7XG4gICAgZ29vZDogVGV4dENvbG9yRGVmaW5pdGlvbiA9IG5ldyBUZXh0Q29sb3JEZWZpbml0aW9uKCk7XG4gICAgd2FybmluZzogVGV4dENvbG9yRGVmaW5pdGlvbiA9IG5ldyBUZXh0Q29sb3JEZWZpbml0aW9uKCk7XG4gICAgYXR0ZW50aW9uOiBUZXh0Q29sb3JEZWZpbml0aW9uID0gbmV3IFRleHRDb2xvckRlZmluaXRpb24oKTtcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICB0aGlzLnBhcnNlKG9iaik7XG4gICAgfVxuXG4gICAgcGFyc2Uob2JqOiBhbnkpIHtcbiAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgdGhpcy5wYXJzZVNpbmdsZUNvbG9yKG9iaiwgXCJkZWZhdWx0XCIpO1xuICAgICAgICAgICAgdGhpcy5wYXJzZVNpbmdsZUNvbG9yKG9iaiwgXCJkYXJrXCIpO1xuICAgICAgICAgICAgdGhpcy5wYXJzZVNpbmdsZUNvbG9yKG9iaiwgXCJsaWdodFwiKTtcbiAgICAgICAgICAgIHRoaXMucGFyc2VTaW5nbGVDb2xvcihvYmosIFwiYWNjZW50XCIpO1xuICAgICAgICAgICAgdGhpcy5wYXJzZVNpbmdsZUNvbG9yKG9iaiwgXCJnb29kXCIpO1xuICAgICAgICAgICAgdGhpcy5wYXJzZVNpbmdsZUNvbG9yKG9iaiwgXCJ3YXJuaW5nXCIpO1xuICAgICAgICAgICAgdGhpcy5wYXJzZVNpbmdsZUNvbG9yKG9iaiwgXCJhdHRlbnRpb25cIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb250YWluZXJTdHlsZURlZmluaXRpb24ge1xuICAgIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcblxuICAgIHJlYWRvbmx5IGZvcmVncm91bmRDb2xvcnM6IENvbG9yU2V0RGVmaW5pdGlvbiA9IG5ldyBDb2xvclNldERlZmluaXRpb24oXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiOiB7IGRlZmF1bHQ6IFwiIzMzMzMzM1wiLCBzdWJ0bGU6IFwiI0VFMzMzMzMzXCIgfSxcbiAgICAgICAgICAgIFwiZGFya1wiOiB7IGRlZmF1bHQ6IFwiIzAwMDAwMFwiLCBzdWJ0bGU6IFwiIzY2MDAwMDAwXCIgfSxcbiAgICAgICAgICAgIFwibGlnaHRcIjogeyBkZWZhdWx0OiBcIiNGRkZGRkZcIiwgc3VidGxlOiBcIiMzMzAwMDAwMFwiIH0sXG4gICAgICAgICAgICBcImFjY2VudFwiOiB7IGRlZmF1bHQ6IFwiIzJFODlGQ1wiLCBzdWJ0bGU6IFwiIzg4MkU4OUZDXCIgfSxcbiAgICAgICAgICAgIFwiZ29vZFwiOiB7IGRlZmF1bHQ6IFwiIzAyOEEwMlwiLCBzdWJ0bGU6IFwiI0REMDI3NTAyXCIgfSxcbiAgICAgICAgICAgIFwid2FybmluZ1wiOiB7IGRlZmF1bHQ6IFwiI0U2OTUwMFwiLCBzdWJ0bGU6IFwiI0RERTY5NTAwXCIgfSxcbiAgICAgICAgICAgIFwiYXR0ZW50aW9uXCI6IHsgZGVmYXVsdDogXCIjQ0MzMzAwXCIsIHN1YnRsZTogXCIjRERDQzMzMDBcIiB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgaGlnaGxpZ2h0QmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xuICAgIGhpZ2hsaWdodEZvcmVncm91bmRDb2xvcj86IHN0cmluZztcbiAgICBib3JkZXJDb2xvcj86IHN0cmluZztcblxuICAgIHBhcnNlKG9iajogYW55KSB7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gb2JqW1wiYmFja2dyb3VuZENvbG9yXCJdO1xuXG4gICAgICAgICAgICB0aGlzLmZvcmVncm91bmRDb2xvcnMucGFyc2Uob2JqW1wiZm9yZWdyb3VuZENvbG9yc1wiXSk7XG5cbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0QmFja2dyb3VuZENvbG9yID0gb2JqW1wiaGlnaGxpZ2h0QmFja2dyb3VuZENvbG9yXCJdO1xuICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRGb3JlZ3JvdW5kQ29sb3IgPSBvYmpbXCJoaWdobGlnaHRGb3JlZ3JvdW5kQ29sb3JcIl07XG5cbiAgICAgICAgICAgIHRoaXMuYm9yZGVyQ29sb3IgPSBvYmpbXCJib3JkZXJDb2xvclwiXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICB0aGlzLnBhcnNlKG9iaik7XG4gICAgfVxuXG4gICAgZ2V0IGlzQnVpbHRJbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuY2xhc3MgQnVpbHRJbkNvbnRhaW5lclN0eWxlRGVmaW5pdGlvbiBleHRlbmRzIENvbnRhaW5lclN0eWxlRGVmaW5pdGlvbiB7XG4gICAgZ2V0IGlzQnVpbHRJbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElMaW5lSGVpZ2h0RGVmaW5pdGlvbnMge1xuICAgIHNtYWxsOiBudW1iZXI7XG4gICAgbWVkaXVtOiBudW1iZXI7XG4gICAgZGVmYXVsdDogbnVtYmVyO1xuICAgIGxhcmdlOiBudW1iZXI7XG4gICAgZXh0cmFMYXJnZTogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyU3R5bGVTZXQge1xuICAgIHByaXZhdGUgX2FsbFN0eWxlczogeyBba2V5OiBzdHJpbmddOiBDb250YWluZXJTdHlsZURlZmluaXRpb24gfSA9IHt9O1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIHRoaXMuX2FsbFN0eWxlc1tFbnVtcy5Db250YWluZXJTdHlsZS5EZWZhdWx0XSA9IG5ldyBCdWlsdEluQ29udGFpbmVyU3R5bGVEZWZpbml0aW9uKCk7XG4gICAgICAgIHRoaXMuX2FsbFN0eWxlc1tFbnVtcy5Db250YWluZXJTdHlsZS5FbXBoYXNpc10gPSBuZXcgQnVpbHRJbkNvbnRhaW5lclN0eWxlRGVmaW5pdGlvbigpO1xuICAgICAgICB0aGlzLl9hbGxTdHlsZXNbRW51bXMuQ29udGFpbmVyU3R5bGUuQWNjZW50XSA9IG5ldyBCdWlsdEluQ29udGFpbmVyU3R5bGVEZWZpbml0aW9uKCk7XG4gICAgICAgIHRoaXMuX2FsbFN0eWxlc1tFbnVtcy5Db250YWluZXJTdHlsZS5Hb29kXSA9IG5ldyBCdWlsdEluQ29udGFpbmVyU3R5bGVEZWZpbml0aW9uKCk7XG4gICAgICAgIHRoaXMuX2FsbFN0eWxlc1tFbnVtcy5Db250YWluZXJTdHlsZS5BdHRlbnRpb25dID0gbmV3IEJ1aWx0SW5Db250YWluZXJTdHlsZURlZmluaXRpb24oKTtcbiAgICAgICAgdGhpcy5fYWxsU3R5bGVzW0VudW1zLkNvbnRhaW5lclN0eWxlLldhcm5pbmddID0gbmV3IEJ1aWx0SW5Db250YWluZXJTdHlsZURlZmluaXRpb24oKTtcblxuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICB0aGlzLl9hbGxTdHlsZXNbRW51bXMuQ29udGFpbmVyU3R5bGUuRGVmYXVsdF0ucGFyc2Uob2JqW0VudW1zLkNvbnRhaW5lclN0eWxlLkRlZmF1bHRdKTtcbiAgICAgICAgICAgIHRoaXMuX2FsbFN0eWxlc1tFbnVtcy5Db250YWluZXJTdHlsZS5FbXBoYXNpc10ucGFyc2Uob2JqW0VudW1zLkNvbnRhaW5lclN0eWxlLkVtcGhhc2lzXSk7XG4gICAgICAgICAgICB0aGlzLl9hbGxTdHlsZXNbRW51bXMuQ29udGFpbmVyU3R5bGUuQWNjZW50XS5wYXJzZShvYmpbRW51bXMuQ29udGFpbmVyU3R5bGUuQWNjZW50XSk7XG4gICAgICAgICAgICB0aGlzLl9hbGxTdHlsZXNbRW51bXMuQ29udGFpbmVyU3R5bGUuR29vZF0ucGFyc2Uob2JqW0VudW1zLkNvbnRhaW5lclN0eWxlLkdvb2RdKTtcbiAgICAgICAgICAgIHRoaXMuX2FsbFN0eWxlc1tFbnVtcy5Db250YWluZXJTdHlsZS5BdHRlbnRpb25dLnBhcnNlKG9ialtFbnVtcy5Db250YWluZXJTdHlsZS5BdHRlbnRpb25dKTtcbiAgICAgICAgICAgIHRoaXMuX2FsbFN0eWxlc1tFbnVtcy5Db250YWluZXJTdHlsZS5XYXJuaW5nXS5wYXJzZShvYmpbRW51bXMuQ29udGFpbmVyU3R5bGUuV2FybmluZ10pO1xuXG4gICAgICAgICAgICBjb25zdCBjdXN0b21TdHlsZUFycmF5ID0gb2JqW1wiY3VzdG9tU3R5bGVzXCJdO1xuXG4gICAgICAgICAgICBpZiAoY3VzdG9tU3R5bGVBcnJheSAmJiBBcnJheS5pc0FycmF5KGN1c3RvbVN0eWxlQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY3VzdG9tU3R5bGUgb2YgY3VzdG9tU3R5bGVBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdHlsZU5hbWUgPSBjdXN0b21TdHlsZVtcIm5hbWVcIl07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZU5hbWUgJiYgdHlwZW9mIHN0eWxlTmFtZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hbGxTdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbGxTdHlsZXNbc3R5bGVOYW1lXS5wYXJzZShjdXN0b21TdHlsZVtcInN0eWxlXCJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FsbFN0eWxlc1tzdHlsZU5hbWVdID0gbmV3IENvbnRhaW5lclN0eWxlRGVmaW5pdGlvbihjdXN0b21TdHlsZVtcInN0eWxlXCJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGxldCBjdXN0b21TdHlsZUFycmF5OiBhbnlbXSA9IFtdO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX2FsbFN0eWxlcykuZm9yRWFjaChcbiAgICAgICAgICAgIChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2FsbFN0eWxlc1trZXldLmlzQnVpbHRJbikge1xuICAgICAgICAgICAgICAgICAgICBjdXN0b21TdHlsZUFycmF5LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHRoaXMuX2FsbFN0eWxlc1trZXldXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGxldCByZXN1bHQ6IGFueSA9IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRoaXMuZGVmYXVsdCxcbiAgICAgICAgICAgIGVtcGhhc2lzOiB0aGlzLmVtcGhhc2lzXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VzdG9tU3R5bGVBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQuY3VzdG9tU3R5bGVzID0gY3VzdG9tU3R5bGVBcnJheTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0U3R5bGVCeU5hbWUobmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkLCBkZWZhdWx0VmFsdWU/OiBDb250YWluZXJTdHlsZURlZmluaXRpb24pOiBDb250YWluZXJTdHlsZURlZmluaXRpb24ge1xuICAgICAgICBpZiAobmFtZSAmJiB0aGlzLl9hbGxTdHlsZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbGxTdHlsZXNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlID8gZGVmYXVsdFZhbHVlIDogdGhpcy5fYWxsU3R5bGVzW0VudW1zLkNvbnRhaW5lclN0eWxlLkRlZmF1bHRdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGRlZmF1bHQoKTogQ29udGFpbmVyU3R5bGVEZWZpbml0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FsbFN0eWxlc1tFbnVtcy5Db250YWluZXJTdHlsZS5EZWZhdWx0XTtcbiAgICB9XG5cbiAgICBnZXQgZW1waGFzaXMoKTogQ29udGFpbmVyU3R5bGVEZWZpbml0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FsbFN0eWxlc1tFbnVtcy5Db250YWluZXJTdHlsZS5FbXBoYXNpc107XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGb250U2l6ZURlZmluaXRpb25zIHtcbiAgICBzbWFsbDogbnVtYmVyO1xuICAgIGRlZmF1bHQ6IG51bWJlcjtcbiAgICBtZWRpdW06IG51bWJlcjtcbiAgICBsYXJnZTogbnVtYmVyO1xuICAgIGV4dHJhTGFyZ2U6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRm9udFdlaWdodERlZmluaXRpb25zIHtcbiAgICBsaWdodGVyOiBudW1iZXI7XG4gICAgZGVmYXVsdDogbnVtYmVyO1xuICAgIGJvbGRlcjogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgRm9udFR5cGVEZWZpbml0aW9uIHtcbiAgICBzdGF0aWMgcmVhZG9ubHkgbW9ub3NwYWNlID0gbmV3IEZvbnRUeXBlRGVmaW5pdGlvbihcIidDb3VyaWVyIE5ldycsIENvdXJpZXIsIG1vbm9zcGFjZVwiKTtcblxuICAgIGZvbnRGYW1pbHk/OiBzdHJpbmcgPSBcIlNlZ29lIFVJLFNlZ29lLFNlZ29lIFdQLEhlbHZldGljYSBOZXVlLEhlbHZldGljYSxzYW5zLXNlcmlmXCI7XG5cbiAgICBmb250U2l6ZXM6IElGb250U2l6ZURlZmluaXRpb25zID0ge1xuICAgICAgICBzbWFsbDogMTIsXG4gICAgICAgIGRlZmF1bHQ6IDE0LFxuICAgICAgICBtZWRpdW06IDE3LFxuICAgICAgICBsYXJnZTogMjEsXG4gICAgICAgIGV4dHJhTGFyZ2U6IDI2XG4gICAgfTtcblxuICAgIGZvbnRXZWlnaHRzOiBJRm9udFdlaWdodERlZmluaXRpb25zID0ge1xuICAgICAgICBsaWdodGVyOiAyMDAsXG4gICAgICAgIGRlZmF1bHQ6IDQwMCxcbiAgICAgICAgYm9sZGVyOiA2MDBcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IoZm9udEZhbWlseT86IHN0cmluZykge1xuICAgICAgICBpZiAoZm9udEZhbWlseSkge1xuICAgICAgICAgICAgdGhpcy5mb250RmFtaWx5ID0gZm9udEZhbWlseTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlKG9iaj86IGFueSkge1xuICAgICAgICB0aGlzLmZvbnRGYW1pbHkgPSBvYmpbXCJmb250RmFtaWx5XCJdIHx8IHRoaXMuZm9udEZhbWlseTtcbiAgICAgICAgdGhpcy5mb250U2l6ZXMgPSB7XG4gICAgICAgICAgICBzbWFsbDogb2JqLmZvbnRTaXplcyAmJiBvYmouZm9udFNpemVzW1wic21hbGxcIl0gfHwgdGhpcy5mb250U2l6ZXMuc21hbGwsXG4gICAgICAgICAgICBkZWZhdWx0OiBvYmouZm9udFNpemVzICYmIG9iai5mb250U2l6ZXNbXCJkZWZhdWx0XCJdIHx8IHRoaXMuZm9udFNpemVzLmRlZmF1bHQsXG4gICAgICAgICAgICBtZWRpdW06IG9iai5mb250U2l6ZXMgJiYgb2JqLmZvbnRTaXplc1tcIm1lZGl1bVwiXSB8fCB0aGlzLmZvbnRTaXplcy5tZWRpdW0sXG4gICAgICAgICAgICBsYXJnZTogb2JqLmZvbnRTaXplcyAmJiBvYmouZm9udFNpemVzW1wibGFyZ2VcIl0gfHwgdGhpcy5mb250U2l6ZXMubGFyZ2UsXG4gICAgICAgICAgICBleHRyYUxhcmdlOiBvYmouZm9udFNpemVzICYmIG9iai5mb250U2l6ZXNbXCJleHRyYUxhcmdlXCJdIHx8IHRoaXMuZm9udFNpemVzLmV4dHJhTGFyZ2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5mb250V2VpZ2h0cyA9IHtcbiAgICAgICAgICAgIGxpZ2h0ZXI6IG9iai5mb250V2VpZ2h0cyAmJiBvYmouZm9udFdlaWdodHNbXCJsaWdodGVyXCJdIHx8IHRoaXMuZm9udFdlaWdodHMubGlnaHRlcixcbiAgICAgICAgICAgIGRlZmF1bHQ6IG9iai5mb250V2VpZ2h0cyAmJiBvYmouZm9udFdlaWdodHNbXCJkZWZhdWx0XCJdIHx8IHRoaXMuZm9udFdlaWdodHMuZGVmYXVsdCxcbiAgICAgICAgICAgIGJvbGRlcjogb2JqLmZvbnRXZWlnaHRzICYmIG9iai5mb250V2VpZ2h0c1tcImJvbGRlclwiXSB8fCB0aGlzLmZvbnRXZWlnaHRzLmJvbGRlclxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZvbnRUeXBlU2V0IHtcbiAgICBkZWZhdWx0OiBGb250VHlwZURlZmluaXRpb247XG4gICAgbW9ub3NwYWNlOiBGb250VHlwZURlZmluaXRpb247XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBhbnkpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0ID0gbmV3IEZvbnRUeXBlRGVmaW5pdGlvbigpO1xuICAgICAgICB0aGlzLm1vbm9zcGFjZSA9IG5ldyBGb250VHlwZURlZmluaXRpb24oXCInQ291cmllciBOZXcnLCBDb3VyaWVyLCBtb25vc3BhY2VcIik7XG5cbiAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgdGhpcy5kZWZhdWx0LnBhcnNlKG9ialtcImRlZmF1bHRcIl0pO1xuICAgICAgICAgICAgdGhpcy5tb25vc3BhY2UucGFyc2Uob2JqW1wibW9ub3NwYWNlXCJdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFN0eWxlRGVmaW5pdGlvbihzdHlsZTogRW51bXMuRm9udFR5cGUgfCB1bmRlZmluZWQpOiBGb250VHlwZURlZmluaXRpb24ge1xuICAgICAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICAgICAgICBjYXNlIEVudW1zLkZvbnRUeXBlLk1vbm9zcGFjZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tb25vc3BhY2U7XG4gICAgICAgICAgICBjYXNlIEVudW1zLkZvbnRUeXBlLkRlZmF1bHQ6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBIb3N0Q29uZmlnIHtcbiAgICByZWFkb25seSBob3N0Q2FwYWJpbGl0aWVzID0gbmV3IEhvc3RDYXBhYmlsaXRpZXMoKTtcblxuICAgIHByaXZhdGUgX2xlZ2FjeUZvbnRUeXBlOiBGb250VHlwZURlZmluaXRpb247XG5cbiAgICBjaG9pY2VTZXRJbnB1dFZhbHVlU2VwYXJhdG9yOiBzdHJpbmcgPSBcIixcIjtcbiAgICBzdXBwb3J0c0ludGVyYWN0aXZpdHk6IGJvb2xlYW4gPSB0cnVlO1xuICAgIGxpbmVIZWlnaHRzPzogSUxpbmVIZWlnaHREZWZpbml0aW9ucztcbiAgICBmb250VHlwZXM/OiBGb250VHlwZVNldDtcblxuICAgIHJlYWRvbmx5IHNwYWNpbmcgPSB7XG4gICAgICAgIHNtYWxsOiAzLFxuICAgICAgICBkZWZhdWx0OiA4LFxuICAgICAgICBtZWRpdW06IDIwLFxuICAgICAgICBsYXJnZTogMzAsXG4gICAgICAgIGV4dHJhTGFyZ2U6IDQwLFxuICAgICAgICBwYWRkaW5nOiAxNVxuICAgIH07XG5cbiAgICByZWFkb25seSBzZXBhcmF0b3IgPSB7XG4gICAgICAgIGxpbmVUaGlja25lc3M6IDEsXG4gICAgICAgIGxpbmVDb2xvcjogXCIjRUVFRUVFXCJcbiAgICB9O1xuXG4gICAgcmVhZG9ubHkgaW1hZ2VTaXplcyA9IHtcbiAgICAgICAgc21hbGw6IDQwLFxuICAgICAgICBtZWRpdW06IDgwLFxuICAgICAgICBsYXJnZTogMTYwXG4gICAgfTtcblxuICAgIHJlYWRvbmx5IGNvbnRhaW5lclN0eWxlczogQ29udGFpbmVyU3R5bGVTZXQgPSBuZXcgQ29udGFpbmVyU3R5bGVTZXQoKTtcbiAgICByZWFkb25seSBpbnB1dHM6IElucHV0Q29uZmlnID0gbmV3IElucHV0Q29uZmlnKCk7XG4gICAgcmVhZG9ubHkgYWN0aW9uczogQWN0aW9uc0NvbmZpZyA9IG5ldyBBY3Rpb25zQ29uZmlnKCk7XG4gICAgcmVhZG9ubHkgYWRhcHRpdmVDYXJkOiBBZGFwdGl2ZUNhcmRDb25maWcgPSBuZXcgQWRhcHRpdmVDYXJkQ29uZmlnKCk7XG4gICAgcmVhZG9ubHkgaW1hZ2VTZXQ6IEltYWdlU2V0Q29uZmlnID0gbmV3IEltYWdlU2V0Q29uZmlnKCk7XG4gICAgcmVhZG9ubHkgbWVkaWE6IE1lZGlhQ29uZmlnID0gbmV3IE1lZGlhQ29uZmlnKCk7XG4gICAgcmVhZG9ubHkgZmFjdFNldDogRmFjdFNldENvbmZpZyA9IG5ldyBGYWN0U2V0Q29uZmlnKCk7XG4gICAgcmVhZG9ubHkgdGFibGU6IFRhYmxlQ29uZmlnID0gbmV3IFRhYmxlQ29uZmlnKCk7XG4gICAgcmVhZG9ubHkgdGV4dFN0eWxlczogVGV4dFN0eWxlU2V0ID0gbmV3IFRleHRTdHlsZVNldCgpO1xuICAgIHJlYWRvbmx5IHRleHRCbG9jazogVGV4dEJsb2NrQ29uZmlnID0gbmV3IFRleHRCbG9ja0NvbmZpZygpO1xuXG4gICAgY3NzQ2xhc3NOYW1lUHJlZml4Pzogc3RyaW5nO1xuICAgIGFsd2F5c0FsbG93QmxlZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIiB8fCBvYmogaW5zdGFuY2VvZiBTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBvYmogPSBKU09OLnBhcnNlKG9iaiBhcyBzdHJpbmcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmNob2ljZVNldElucHV0VmFsdWVTZXBhcmF0b3IgPSAob2JqICYmIHR5cGVvZiBvYmpbXCJjaG9pY2VTZXRJbnB1dFZhbHVlU2VwYXJhdG9yXCJdID09PSBcInN0cmluZ1wiKSA/IG9ialtcImNob2ljZVNldElucHV0VmFsdWVTZXBhcmF0b3JcIl0gOiB0aGlzLmNob2ljZVNldElucHV0VmFsdWVTZXBhcmF0b3I7XG4gICAgICAgICAgICB0aGlzLnN1cHBvcnRzSW50ZXJhY3Rpdml0eSA9IChvYmogJiYgdHlwZW9mIG9ialtcInN1cHBvcnRzSW50ZXJhY3Rpdml0eVwiXSA9PT0gXCJib29sZWFuXCIpID8gb2JqW1wic3VwcG9ydHNJbnRlcmFjdGl2aXR5XCJdIDogdGhpcy5zdXBwb3J0c0ludGVyYWN0aXZpdHk7XG5cbiAgICAgICAgICAgIHRoaXMuX2xlZ2FjeUZvbnRUeXBlID0gbmV3IEZvbnRUeXBlRGVmaW5pdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5fbGVnYWN5Rm9udFR5cGUucGFyc2Uob2JqKTtcblxuICAgICAgICAgICAgaWYgKG9iai5mb250VHlwZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvbnRUeXBlcyA9IG5ldyBGb250VHlwZVNldChvYmouZm9udFR5cGVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9iai5saW5lSGVpZ2h0cykge1xuICAgICAgICAgICAgICAgIHRoaXMubGluZUhlaWdodHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHNtYWxsOiBvYmoubGluZUhlaWdodHNbXCJzbWFsbFwiXSxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogb2JqLmxpbmVIZWlnaHRzW1wiZGVmYXVsdFwiXSxcbiAgICAgICAgICAgICAgICAgICAgbWVkaXVtOiBvYmoubGluZUhlaWdodHNbXCJtZWRpdW1cIl0sXG4gICAgICAgICAgICAgICAgICAgIGxhcmdlOiBvYmoubGluZUhlaWdodHNbXCJsYXJnZVwiXSxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFMYXJnZTogb2JqLmxpbmVIZWlnaHRzW1wiZXh0cmFMYXJnZVwiXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmltYWdlU2l6ZXMgPSB7XG4gICAgICAgICAgICAgICAgc21hbGw6IG9iai5pbWFnZVNpemVzICYmIG9iai5pbWFnZVNpemVzW1wic21hbGxcIl0gfHwgdGhpcy5pbWFnZVNpemVzLnNtYWxsLFxuICAgICAgICAgICAgICAgIG1lZGl1bTogb2JqLmltYWdlU2l6ZXMgJiYgb2JqLmltYWdlU2l6ZXNbXCJtZWRpdW1cIl0gfHwgdGhpcy5pbWFnZVNpemVzLm1lZGl1bSxcbiAgICAgICAgICAgICAgICBsYXJnZTogb2JqLmltYWdlU2l6ZXMgJiYgb2JqLmltYWdlU2l6ZXNbXCJsYXJnZVwiXSB8fCB0aGlzLmltYWdlU2l6ZXMubGFyZ2UsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lclN0eWxlcyA9IG5ldyBDb250YWluZXJTdHlsZVNldChvYmpbXCJjb250YWluZXJTdHlsZXNcIl0pO1xuICAgICAgICAgICAgdGhpcy5zcGFjaW5nID0ge1xuICAgICAgICAgICAgICAgIHNtYWxsOiBvYmouc3BhY2luZyAmJiBvYmouc3BhY2luZ1tcInNtYWxsXCJdIHx8IHRoaXMuc3BhY2luZy5zbWFsbCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBvYmouc3BhY2luZyAmJiBvYmouc3BhY2luZ1tcImRlZmF1bHRcIl0gfHwgdGhpcy5zcGFjaW5nLmRlZmF1bHQsXG4gICAgICAgICAgICAgICAgbWVkaXVtOiBvYmouc3BhY2luZyAmJiBvYmouc3BhY2luZ1tcIm1lZGl1bVwiXSB8fCB0aGlzLnNwYWNpbmcubWVkaXVtLFxuICAgICAgICAgICAgICAgIGxhcmdlOiBvYmouc3BhY2luZyAmJiBvYmouc3BhY2luZ1tcImxhcmdlXCJdIHx8IHRoaXMuc3BhY2luZy5sYXJnZSxcbiAgICAgICAgICAgICAgICBleHRyYUxhcmdlOiBvYmouc3BhY2luZyAmJiBvYmouc3BhY2luZ1tcImV4dHJhTGFyZ2VcIl0gfHwgdGhpcy5zcGFjaW5nLmV4dHJhTGFyZ2UsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogb2JqLnNwYWNpbmcgJiYgb2JqLnNwYWNpbmdbXCJwYWRkaW5nXCJdIHx8IHRoaXMuc3BhY2luZy5wYWRkaW5nXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLnNlcGFyYXRvciA9IHtcbiAgICAgICAgICAgICAgICBsaW5lVGhpY2tuZXNzOiBvYmouc2VwYXJhdG9yICYmIG9iai5zZXBhcmF0b3JbXCJsaW5lVGhpY2tuZXNzXCJdIHx8IHRoaXMuc2VwYXJhdG9yLmxpbmVUaGlja25lc3MsXG4gICAgICAgICAgICAgICAgbGluZUNvbG9yOiBvYmouc2VwYXJhdG9yICYmIG9iai5zZXBhcmF0b3JbXCJsaW5lQ29sb3JcIl0gfHwgdGhpcy5zZXBhcmF0b3IubGluZUNvbG9yXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaW5wdXRzID0gbmV3IElucHV0Q29uZmlnKG9iai5pbnB1dHMgfHwgdGhpcy5pbnB1dHMpO1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gbmV3IEFjdGlvbnNDb25maWcob2JqLmFjdGlvbnMgfHwgdGhpcy5hY3Rpb25zKTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRpdmVDYXJkID0gbmV3IEFkYXB0aXZlQ2FyZENvbmZpZyhvYmouYWRhcHRpdmVDYXJkIHx8IHRoaXMuYWRhcHRpdmVDYXJkKTtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VTZXQgPSBuZXcgSW1hZ2VTZXRDb25maWcob2JqW1wiaW1hZ2VTZXRcIl0pO1xuICAgICAgICAgICAgdGhpcy5mYWN0U2V0ID0gbmV3IEZhY3RTZXRDb25maWcob2JqW1wiZmFjdFNldFwiXSk7XG4gICAgICAgICAgICB0aGlzLnRleHRTdHlsZXMgPSBuZXcgVGV4dFN0eWxlU2V0KG9ialtcInRleHRTdHlsZXNcIl0pO1xuICAgICAgICAgICAgdGhpcy50ZXh0QmxvY2sgPSBuZXcgVGV4dEJsb2NrQ29uZmlnKG9ialtcInRleHRCbG9ja1wiXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRGb250VHlwZURlZmluaXRpb24oc3R5bGU/OiBFbnVtcy5Gb250VHlwZSk6IEZvbnRUeXBlRGVmaW5pdGlvbiB7XG4gICAgICAgIGlmICh0aGlzLmZvbnRUeXBlcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9udFR5cGVzLmdldFN0eWxlRGVmaW5pdGlvbihzdHlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3R5bGUgPT0gRW51bXMuRm9udFR5cGUuTW9ub3NwYWNlID8gRm9udFR5cGVEZWZpbml0aW9uLm1vbm9zcGFjZSA6IHRoaXMuX2xlZ2FjeUZvbnRUeXBlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0RWZmZWN0aXZlU3BhY2luZyhzcGFjaW5nOiBFbnVtcy5TcGFjaW5nKTogbnVtYmVyIHtcbiAgICAgICAgc3dpdGNoIChzcGFjaW5nKSB7XG4gICAgICAgICAgICBjYXNlIEVudW1zLlNwYWNpbmcuU21hbGw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3BhY2luZy5zbWFsbDtcbiAgICAgICAgICAgIGNhc2UgRW51bXMuU3BhY2luZy5EZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNwYWNpbmcuZGVmYXVsdDtcbiAgICAgICAgICAgIGNhc2UgRW51bXMuU3BhY2luZy5NZWRpdW06XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3BhY2luZy5tZWRpdW07XG4gICAgICAgICAgICBjYXNlIEVudW1zLlNwYWNpbmcuTGFyZ2U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3BhY2luZy5sYXJnZTtcbiAgICAgICAgICAgIGNhc2UgRW51bXMuU3BhY2luZy5FeHRyYUxhcmdlOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNwYWNpbmcuZXh0cmFMYXJnZTtcbiAgICAgICAgICAgIGNhc2UgRW51bXMuU3BhY2luZy5QYWRkaW5nOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNwYWNpbmcucGFkZGluZztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYWRkaW5nRGVmaW5pdGlvblRvU3BhY2luZ0RlZmluaXRpb24ocGFkZGluZ0RlZmluaXRpb246IFNoYXJlZC5QYWRkaW5nRGVmaW5pdGlvbik6IFNoYXJlZC5TcGFjaW5nRGVmaW5pdGlvbiB7XG4gICAgICAgIHJldHVybiBuZXcgU2hhcmVkLlNwYWNpbmdEZWZpbml0aW9uKFxuICAgICAgICAgICAgdGhpcy5nZXRFZmZlY3RpdmVTcGFjaW5nKHBhZGRpbmdEZWZpbml0aW9uLnRvcCksXG4gICAgICAgICAgICB0aGlzLmdldEVmZmVjdGl2ZVNwYWNpbmcocGFkZGluZ0RlZmluaXRpb24ucmlnaHQpLFxuICAgICAgICAgICAgdGhpcy5nZXRFZmZlY3RpdmVTcGFjaW5nKHBhZGRpbmdEZWZpbml0aW9uLmJvdHRvbSksXG4gICAgICAgICAgICB0aGlzLmdldEVmZmVjdGl2ZVNwYWNpbmcocGFkZGluZ0RlZmluaXRpb24ubGVmdCkpO1xuICAgIH1cblxuICAgIG1ha2VDc3NDbGFzc05hbWVzKC4uLmNsYXNzTmFtZXM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGNsYXNzTmFtZSBvZiBjbGFzc05hbWVzKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgodGhpcy5jc3NDbGFzc05hbWVQcmVmaXggPyB0aGlzLmNzc0NsYXNzTmFtZVByZWZpeCArIFwiLVwiIDogXCJcIikgKyBjbGFzc05hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBtYWtlQ3NzQ2xhc3NOYW1lKC4uLmNsYXNzTmFtZXM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMubWFrZUNzc0NsYXNzTmFtZXMoLi4uY2xhc3NOYW1lcykuam9pbihcIiBcIik7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdCA/IHJlc3VsdCA6IFwiXCI7XG4gICAgfVxuXG4gICAgZ2V0IGZvbnRGYW1pbHkoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlZ2FjeUZvbnRUeXBlLmZvbnRGYW1pbHk7XG4gICAgfVxuXG4gICAgc2V0IGZvbnRGYW1pbHkodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9sZWdhY3lGb250VHlwZS5mb250RmFtaWx5ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGZvbnRTaXplcygpOiBJRm9udFNpemVEZWZpbml0aW9ucyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sZWdhY3lGb250VHlwZS5mb250U2l6ZXM7XG4gICAgfVxuXG4gICAgZ2V0IGZvbnRXZWlnaHRzKCk6IElGb250V2VpZ2h0RGVmaW5pdGlvbnMge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGVnYWN5Rm9udFR5cGUuZm9udFdlaWdodHM7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdEhvc3RDb25maWc6IEhvc3RDb25maWcgPSBuZXcgSG9zdENvbmZpZyhcbiAgICB7XG4gICAgICAgIHN1cHBvcnRzSW50ZXJhY3Rpdml0eTogdHJ1ZSxcbiAgICAgICAgc3BhY2luZzoge1xuICAgICAgICAgICAgc21hbGw6IDEwLFxuICAgICAgICAgICAgZGVmYXVsdDogMjAsXG4gICAgICAgICAgICBtZWRpdW06IDMwLFxuICAgICAgICAgICAgbGFyZ2U6IDQwLFxuICAgICAgICAgICAgZXh0cmFMYXJnZTogNTAsXG4gICAgICAgICAgICBwYWRkaW5nOiAyMFxuICAgICAgICB9LFxuICAgICAgICBzZXBhcmF0b3I6IHtcbiAgICAgICAgICAgIGxpbmVUaGlja25lc3M6IDEsXG4gICAgICAgICAgICBsaW5lQ29sb3I6IFwiI0VFRUVFRVwiXG4gICAgICAgIH0sXG4gICAgICAgIGZvbnRUeXBlczoge1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiJ1NlZ29lIFVJJywgVGFob21hLCBHZW5ldmEsIFZlcmRhbmEsIHNhbnMtc2VyaWZcIixcbiAgICAgICAgICAgICAgICBmb250U2l6ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgc21hbGw6IDEyLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiAxNCxcbiAgICAgICAgICAgICAgICAgICAgbWVkaXVtOiAxNyxcbiAgICAgICAgICAgICAgICAgICAgbGFyZ2U6IDIxLFxuICAgICAgICAgICAgICAgICAgICBleHRyYUxhcmdlOiAyNlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodHM6IHtcbiAgICAgICAgICAgICAgICAgICAgbGlnaHRlcjogMjAwLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiA0MDAsXG4gICAgICAgICAgICAgICAgICAgIGJvbGRlcjogNjAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vbm9zcGFjZToge1xuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiJ0NvdXJpZXIgTmV3JywgQ291cmllciwgbW9ub3NwYWNlXCIsXG4gICAgICAgICAgICAgICAgZm9udFNpemVzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNtYWxsOiAxMixcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogMTQsXG4gICAgICAgICAgICAgICAgICAgIG1lZGl1bTogMTcsXG4gICAgICAgICAgICAgICAgICAgIGxhcmdlOiAyMSxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFMYXJnZTogMjZcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHRzOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0ZXI6IDIwMCxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogNDAwLFxuICAgICAgICAgICAgICAgICAgICBib2xkZXI6IDYwMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW1hZ2VTaXplczoge1xuICAgICAgICAgICAgc21hbGw6IDQwLFxuICAgICAgICAgICAgbWVkaXVtOiA4MCxcbiAgICAgICAgICAgIGxhcmdlOiAxNjBcbiAgICAgICAgfSxcbiAgICAgICAgY29udGFpbmVyU3R5bGVzOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNGRkZGRkZcIixcbiAgICAgICAgICAgICAgICBmb3JlZ3JvdW5kQ29sb3JzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiIzMzMzMzM1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiNFRTMzMzMzM1wiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhcms6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiM2NjAwMDAwMFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiNGRkZGRkZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjMzMwMDAwMDBcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhY2NlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiIzJFODlGQ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiM4ODJFODlGQ1wiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGF0dGVudGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjY2MzMzAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiI0REY2MzMzAwXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ29vZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjMDI4QTAyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiI0REMDI3NTAyXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgd2FybmluZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjZTY5NTAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiI0REZTY5NTAwXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbXBoYXNpczoge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjMDgwMDAwMDBcIixcbiAgICAgICAgICAgICAgICBmb3JlZ3JvdW5kQ29sb3JzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiIzMzMzMzM1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiNFRTMzMzMzM1wiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhcms6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiM2NjAwMDAwMFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiNGRkZGRkZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjMzMwMDAwMDBcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhY2NlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiIzJFODlGQ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiM4ODJFODlGQ1wiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGF0dGVudGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjY2MzMzAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiI0REY2MzMzAwXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ29vZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjMDI4QTAyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiI0REMDI3NTAyXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgd2FybmluZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjZTY5NTAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiI0REZTY5NTAwXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY2NlbnQ6IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI0M3REVGOVwiLFxuICAgICAgICAgICAgICAgIGZvcmVncm91bmRDb2xvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjMzMzMzMzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiI0VFMzMzMzMzXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGFyazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjMDAwMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiIzY2MDAwMDAwXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbGlnaHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiI0ZGRkZGRlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiMzMzAwMDAwMFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFjY2VudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjMkU4OUZDXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiIzg4MkU4OUZDXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYXR0ZW50aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiNjYzMzMDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjRERjYzMzMDBcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnb29kOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiMwMjhBMDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjREQwMjc1MDJcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiNlNjk1MDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjRERlNjk1MDBcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdvb2Q6IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI0NDRkZDQ1wiLFxuICAgICAgICAgICAgICAgIGZvcmVncm91bmRDb2xvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjMzMzMzMzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiI0VFMzMzMzMzXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGFyazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjMDAwMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiIzY2MDAwMDAwXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbGlnaHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiI0ZGRkZGRlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiMzMzAwMDAwMFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFjY2VudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjMkU4OUZDXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiIzg4MkU4OUZDXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYXR0ZW50aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiNjYzMzMDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjRERjYzMzMDBcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnb29kOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiMwMjhBMDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjREQwMjc1MDJcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB3YXJuaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiNlNjk1MDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjRERlNjk1MDBcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF0dGVudGlvbjoge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjRkZDNUIyXCIsXG4gICAgICAgICAgICAgICAgZm9yZWdyb3VuZENvbG9yczoge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiMzMzMzMzNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjRUUzMzMzMzNcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkYXJrOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjNjYwMDAwMDBcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsaWdodDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjRkZGRkZGXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiIzMzMDAwMDAwXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYWNjZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiMyRTg5RkNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjODgyRTg5RkNcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhdHRlbnRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiI2NjMzMwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiNERGNjMzMwMFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdvb2Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiIzAyOEEwMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiNERDAyNzUwMlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiI2U2OTUwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiNERGU2OTUwMFwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2FybmluZzoge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjRkZFMkIyXCIsXG4gICAgICAgICAgICAgICAgZm9yZWdyb3VuZENvbG9yczoge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiMzMzMzMzNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjRUUzMzMzMzNcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkYXJrOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjNjYwMDAwMDBcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsaWdodDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXCIjRkZGRkZGXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0bGU6IFwiIzMzMDAwMDAwXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYWNjZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIiMyRTg5RkNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRsZTogXCIjODgyRTg5RkNcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhdHRlbnRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiI2NjMzMwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiNERGNjMzMwMFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdvb2Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiIzAyOEEwMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiNERDAyNzUwMlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwiI2U2OTUwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGxlOiBcIiNERGU2OTUwMFwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGlucHV0czoge1xuICAgICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgICAgICByZXF1aXJlZElucHV0czoge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogRW51bXMuVGV4dENvbG9yLkFjY2VudCxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogRW51bXMuVGV4dFNpemUuRXh0cmFMYXJnZSxcbiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiBFbnVtcy5UZXh0V2VpZ2h0LkJvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgaXNTdWJ0bGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHN1ZmZpeDogXCIgKHJlcXVpcmVkKVwiLFxuICAgICAgICAgICAgICAgICAgICBzdWZmaXhDb2xvcjogRW51bXMuVGV4dENvbG9yLkdvb2RcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbmFsSW5wdXRzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBFbnVtcy5UZXh0Q29sb3IuV2FybmluZyxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogRW51bXMuVGV4dFNpemUuTWVkaXVtLFxuICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IEVudW1zLlRleHRXZWlnaHQuTGlnaHRlcixcbiAgICAgICAgICAgICAgICAgICAgaXNTdWJ0bGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZToge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBFbnVtcy5UZXh0Q29sb3IuQWNjZW50LFxuICAgICAgICAgICAgICAgIHNpemU6IEVudW1zLlRleHRTaXplLlNtYWxsLFxuICAgICAgICAgICAgICAgIHdlaWdodDogRW51bXMuVGV4dFdlaWdodC5Cb2xkZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWN0aW9uczoge1xuICAgICAgICAgICAgbWF4QWN0aW9uczogNSxcbiAgICAgICAgICAgIHNwYWNpbmc6IEVudW1zLlNwYWNpbmcuRGVmYXVsdCxcbiAgICAgICAgICAgIGJ1dHRvblNwYWNpbmc6IDEwLFxuICAgICAgICAgICAgc2hvd0NhcmQ6IHtcbiAgICAgICAgICAgICAgICBhY3Rpb25Nb2RlOiBFbnVtcy5TaG93Q2FyZEFjdGlvbk1vZGUuSW5saW5lLFxuICAgICAgICAgICAgICAgIGlubGluZVRvcE1hcmdpbjogMTZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY3Rpb25zT3JpZW50YXRpb246IEVudW1zLk9yaWVudGF0aW9uLkhvcml6b250YWwsXG4gICAgICAgICAgICBhY3Rpb25BbGlnbm1lbnQ6IEVudW1zLkFjdGlvbkFsaWdubWVudC5MZWZ0XG4gICAgICAgIH0sXG4gICAgICAgIGFkYXB0aXZlQ2FyZDoge1xuICAgICAgICAgICAgYWxsb3dDdXN0b21TdHlsZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgaW1hZ2VTZXQ6IHtcbiAgICAgICAgICAgIGltYWdlU2l6ZTogRW51bXMuU2l6ZS5NZWRpdW0sXG4gICAgICAgICAgICBtYXhJbWFnZUhlaWdodDogMTAwXG4gICAgICAgIH0sXG4gICAgICAgIGZhY3RTZXQ6IHtcbiAgICAgICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IEVudW1zLlRleHRDb2xvci5EZWZhdWx0LFxuICAgICAgICAgICAgICAgIHNpemU6IEVudW1zLlRleHRTaXplLkRlZmF1bHQsXG4gICAgICAgICAgICAgICAgaXNTdWJ0bGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdlaWdodDogRW51bXMuVGV4dFdlaWdodC5Cb2xkZXIsXG4gICAgICAgICAgICAgICAgd3JhcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogMTUwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IEVudW1zLlRleHRDb2xvci5EZWZhdWx0LFxuICAgICAgICAgICAgICAgIHNpemU6IEVudW1zLlRleHRTaXplLkRlZmF1bHQsXG4gICAgICAgICAgICAgICAgaXNTdWJ0bGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdlaWdodDogRW51bXMuVGV4dFdlaWdodC5EZWZhdWx0LFxuICAgICAgICAgICAgICAgIHdyYXA6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3BhY2luZzogMTBcbiAgICAgICAgfVxuICAgIH0pO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBDYXJkRWxlbWVudCwgQWN0aW9uIH0gZnJvbSBcIi4vY2FyZC1lbGVtZW50c1wiO1xuaW1wb3J0IHsgU2VyaWFsaXphYmxlT2JqZWN0LCBWZXJzaW9uLCBWZXJzaW9ucyB9IGZyb20gXCIuL3NlcmlhbGl6YXRpb25cIjtcblxuZXhwb3J0IGludGVyZmFjZSBJVHlwZVJlZ2lzdHJhdGlvbjxUIGV4dGVuZHMgU2VyaWFsaXphYmxlT2JqZWN0PiB7XG4gICAgdHlwZU5hbWU6IHN0cmluZyxcbiAgICBvYmplY3RUeXBlOiB7IG5ldygpOiBUIH0sXG4gICAgc2NoZW1hVmVyc2lvbjogVmVyc2lvblxufVxuXG5leHBvcnQgY2xhc3MgQ2FyZE9iamVjdFJlZ2lzdHJ5PFQgZXh0ZW5kcyBTZXJpYWxpemFibGVPYmplY3Q+IHtcbiAgICBwcml2YXRlIF9pdGVtczogeyBbdHlwZU5hbWU6IHN0cmluZ106IElUeXBlUmVnaXN0cmF0aW9uPFQ+IH0gPSB7fTtcblxuICAgIGZpbmRCeU5hbWUodHlwZU5hbWU6IHN0cmluZyk6IElUeXBlUmVnaXN0cmF0aW9uPFQ+IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmhhc093blByb3BlcnR5KHR5cGVOYW1lKSA/IHRoaXMuX2l0ZW1zW3R5cGVOYW1lXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5faXRlbXMgPSB7fTtcbiAgICB9XG5cbiAgICBjb3B5VG8odGFyZ2V0OiBDYXJkT2JqZWN0UmVnaXN0cnk8VD4pIHtcbiAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLl9pdGVtcyk7XG5cbiAgICAgICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcbiAgICAgICAgICAgIGxldCB0eXBlUmVnaXN0cmF0aW9uID0gdGhpcy5faXRlbXNba2V5XTtcblxuICAgICAgICAgICAgdGFyZ2V0LnJlZ2lzdGVyKHR5cGVSZWdpc3RyYXRpb24udHlwZU5hbWUsIHR5cGVSZWdpc3RyYXRpb24ub2JqZWN0VHlwZSwgdHlwZVJlZ2lzdHJhdGlvbi5zY2hlbWFWZXJzaW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZ2lzdGVyKHR5cGVOYW1lOiBzdHJpbmcsIG9iamVjdFR5cGU6IHsgbmV3KCk6IFQgfSwgc2NoZW1hVmVyc2lvbjogVmVyc2lvbiA9IFZlcnNpb25zLnYxXzApIHtcbiAgICAgICAgbGV0IHJlZ2lzdHJhdGlvbkluZm8gPSB0aGlzLmZpbmRCeU5hbWUodHlwZU5hbWUpO1xuXG4gICAgICAgIGlmIChyZWdpc3RyYXRpb25JbmZvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbkluZm8ub2JqZWN0VHlwZSA9IG9iamVjdFR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWdpc3RyYXRpb25JbmZvID0ge1xuICAgICAgICAgICAgICAgIHR5cGVOYW1lOiB0eXBlTmFtZSxcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlOiBvYmplY3RUeXBlLFxuICAgICAgICAgICAgICAgIHNjaGVtYVZlcnNpb246IHNjaGVtYVZlcnNpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2l0ZW1zW3R5cGVOYW1lXSA9IHJlZ2lzdHJhdGlvbkluZm87XG4gICAgfVxuXG4gICAgdW5yZWdpc3Rlcih0eXBlTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9pdGVtc1t0eXBlTmFtZV07XG4gICAgfVxuXG4gICAgY3JlYXRlSW5zdGFuY2UodHlwZU5hbWU6IHN0cmluZywgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbik6IFQgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgcmVnaXN0cmF0aW9uSW5mbyA9IHRoaXMuZmluZEJ5TmFtZSh0eXBlTmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIChyZWdpc3RyYXRpb25JbmZvICYmIHJlZ2lzdHJhdGlvbkluZm8uc2NoZW1hVmVyc2lvbi5jb21wYXJlVG8odGFyZ2V0VmVyc2lvbikgPD0gMCkgPyBuZXcgcmVnaXN0cmF0aW9uSW5mby5vYmplY3RUeXBlKCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZ2V0SXRlbUNvdW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9pdGVtcykubGVuZ3RoO1xuICAgIH1cblxuICAgIGdldEl0ZW1BdChpbmRleDogbnVtYmVyKTogSVR5cGVSZWdpc3RyYXRpb248VD4ge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5faXRlbXMpLm1hcChlID0+IHRoaXMuX2l0ZW1zW2VdKVtpbmRleF07XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgR2xvYmFsUmVnaXN0cnkge1xuICAgIHByaXZhdGUgc3RhdGljIF9lbGVtZW50cz86IENhcmRPYmplY3RSZWdpc3RyeTxDYXJkRWxlbWVudD47XG4gICAgcHJpdmF0ZSBzdGF0aWMgX2FjdGlvbnM/OiBDYXJkT2JqZWN0UmVnaXN0cnk8QWN0aW9uPjtcblxuICAgIHN0YXRpYyBwb3B1bGF0ZVdpdGhEZWZhdWx0RWxlbWVudHMocmVnaXN0cnk6IENhcmRPYmplY3RSZWdpc3RyeTxDYXJkRWxlbWVudD4pIHtcbiAgICAgICAgcmVnaXN0cnkuY2xlYXIoKTtcblxuICAgICAgICBHbG9iYWxSZWdpc3RyeS5kZWZhdWx0RWxlbWVudHMuY29weVRvKHJlZ2lzdHJ5KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcG9wdWxhdGVXaXRoRGVmYXVsdEFjdGlvbnMocmVnaXN0cnk6IENhcmRPYmplY3RSZWdpc3RyeTxBY3Rpb24+KSB7XG4gICAgICAgIHJlZ2lzdHJ5LmNsZWFyKCk7XG5cbiAgICAgICAgR2xvYmFsUmVnaXN0cnkuZGVmYXVsdEFjdGlvbnMuY29weVRvKHJlZ2lzdHJ5KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgZGVmYXVsdEVsZW1lbnRzID0gbmV3IENhcmRPYmplY3RSZWdpc3RyeTxDYXJkRWxlbWVudD4oKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgZGVmYXVsdEFjdGlvbnMgPSBuZXcgQ2FyZE9iamVjdFJlZ2lzdHJ5PEFjdGlvbj4oKTtcblxuICAgIHN0YXRpYyBnZXQgZWxlbWVudHMoKTogQ2FyZE9iamVjdFJlZ2lzdHJ5PENhcmRFbGVtZW50PiB7XG4gICAgICAgIGlmICghR2xvYmFsUmVnaXN0cnkuX2VsZW1lbnRzKSB7XG4gICAgICAgICAgICBHbG9iYWxSZWdpc3RyeS5fZWxlbWVudHMgPSBuZXcgQ2FyZE9iamVjdFJlZ2lzdHJ5PENhcmRFbGVtZW50PigpO1xuICAgICAgICAgICAgR2xvYmFsUmVnaXN0cnkucG9wdWxhdGVXaXRoRGVmYXVsdEVsZW1lbnRzKEdsb2JhbFJlZ2lzdHJ5Ll9lbGVtZW50cyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gR2xvYmFsUmVnaXN0cnkuX2VsZW1lbnRzO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgYWN0aW9ucygpOiBDYXJkT2JqZWN0UmVnaXN0cnk8QWN0aW9uPiB7XG4gICAgICAgIGlmICghR2xvYmFsUmVnaXN0cnkuX2FjdGlvbnMpIHtcbiAgICAgICAgICAgIEdsb2JhbFJlZ2lzdHJ5Ll9hY3Rpb25zID0gbmV3IENhcmRPYmplY3RSZWdpc3RyeTxBY3Rpb24+KCk7XG4gICAgICAgICAgICBHbG9iYWxSZWdpc3RyeS5wb3B1bGF0ZVdpdGhEZWZhdWx0QWN0aW9ucyhHbG9iYWxSZWdpc3RyeS5fYWN0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gR2xvYmFsUmVnaXN0cnkuX2FjdGlvbnM7XG4gICAgfVxuXG4gICAgc3RhdGljIHJlc2V0KCkge1xuICAgICAgICBHbG9iYWxSZWdpc3RyeS5fZWxlbWVudHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIEdsb2JhbFJlZ2lzdHJ5Ll9hY3Rpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbn0iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IEdsb2JhbFNldHRpbmdzLCBTaXplQW5kVW5pdCB9IGZyb20gXCIuL3NoYXJlZFwiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCAqIGFzIEVudW1zIGZyb20gXCIuL2VudW1zXCI7XG5pbXBvcnQgeyBTdHJpbmdzIH0gZnJvbSBcIi4vc3RyaW5nc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElWYWxpZGF0aW9uRXZlbnQge1xuICAgIHNvdXJjZT86IFNlcmlhbGl6YWJsZU9iamVjdCxcbiAgICBwaGFzZTogRW51bXMuVmFsaWRhdGlvblBoYXNlLFxuICAgIGV2ZW50OiBFbnVtcy5WYWxpZGF0aW9uRXZlbnQsXG4gICAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgVmVyc2lvbiB7XG4gICAgcHJpdmF0ZSBfdmVyc2lvblN0cmluZzogc3RyaW5nO1xuICAgIHByaXZhdGUgX21ham9yOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfbWlub3I6IG51bWJlcjtcbiAgICBwcml2YXRlIF9pc1ZhbGlkOiBib29sZWFuID0gdHJ1ZTtcbiAgICBwcml2YXRlIF9sYWJlbD86IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG1ham9yOiBudW1iZXIgPSAxLCBtaW5vcjogbnVtYmVyID0gMSwgbGFiZWw/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fbWFqb3IgPSBtYWpvcjtcbiAgICAgICAgdGhpcy5fbWlub3IgPSBtaW5vcjtcbiAgICAgICAgdGhpcy5fbGFiZWwgPSBsYWJlbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgcGFyc2UodmVyc2lvblN0cmluZzogc3RyaW5nLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpOiBWZXJzaW9uIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKCF2ZXJzaW9uU3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBWZXJzaW9uKCk7XG4gICAgICAgIHJlc3VsdC5fdmVyc2lvblN0cmluZyA9IHZlcnNpb25TdHJpbmc7XG5cbiAgICAgICAgbGV0IHJlZ0V4ID0gLyhcXGQrKS4oXFxkKykvZ2k7XG4gICAgICAgIGxldCBtYXRjaGVzID0gcmVnRXguZXhlYyh2ZXJzaW9uU3RyaW5nKTtcblxuICAgICAgICBpZiAobWF0Y2hlcyAhPSBudWxsICYmIG1hdGNoZXMubGVuZ3RoID09IDMpIHtcbiAgICAgICAgICAgIHJlc3VsdC5fbWFqb3IgPSBwYXJzZUludChtYXRjaGVzWzFdKTtcbiAgICAgICAgICAgIHJlc3VsdC5fbWlub3IgPSBwYXJzZUludChtYXRjaGVzWzJdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyZXN1bHQuX2lzVmFsaWQpIHtcbiAgICAgICAgICAgIGNvbnRleHQubG9nUGFyc2VFdmVudChcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgRW51bXMuVmFsaWRhdGlvbkV2ZW50LkludmFsaWRQcm9wZXJ0eVZhbHVlLFxuICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLmludmFsaWRWZXJzaW9uU3RyaW5nKHJlc3VsdC5fdmVyc2lvblN0cmluZykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gIXRoaXMuX2lzVmFsaWQgPyB0aGlzLl92ZXJzaW9uU3RyaW5nIDogdGhpcy5fbWFqb3IgKyBcIi5cIiArIHRoaXMuX21pbm9yO1xuICAgIH1cblxuICAgIHRvSlNPTigpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGNvbXBhcmVUbyhvdGhlclZlcnNpb246IFZlcnNpb24pOiBudW1iZXIge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXJWZXJzaW9uLmlzVmFsaWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb21wYXJlIGludmFsaWQgdmVyc2lvbi5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tYWpvciA+IG90aGVyVmVyc2lvbi5tYWpvcikge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5tYWpvciA8IG90aGVyVmVyc2lvbi5tYWpvcikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubWlub3IgPiBvdGhlclZlcnNpb24ubWlub3IpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubWlub3IgPCBvdGhlclZlcnNpb24ubWlub3IpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGdldCBsYWJlbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWwgPyB0aGlzLl9sYWJlbCA6IHRoaXMudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBnZXQgbWFqb3IoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ham9yO1xuICAgIH1cblxuICAgIGdldCBtaW5vcigpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWlub3I7XG4gICAgfVxuXG4gICAgZ2V0IGlzVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xuICAgIH1cbn1cblxuZXhwb3J0IHR5cGUgVGFyZ2V0VmVyc2lvbiA9IFZlcnNpb24gfCBcIipcIjtcblxuZXhwb3J0IGNsYXNzIFZlcnNpb25zIHtcbiAgICBzdGF0aWMgcmVhZG9ubHkgdjFfMCA9IG5ldyBWZXJzaW9uKDEsIDApO1xuICAgIHN0YXRpYyByZWFkb25seSB2MV8xID0gbmV3IFZlcnNpb24oMSwgMSk7XG4gICAgc3RhdGljIHJlYWRvbmx5IHYxXzIgPSBuZXcgVmVyc2lvbigxLCAyKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgdjFfMyA9IG5ldyBWZXJzaW9uKDEsIDMpO1xuICAgIHN0YXRpYyByZWFkb25seSB2MV80ID0gbmV3IFZlcnNpb24oMSwgNCk7XG4gICAgc3RhdGljIHJlYWRvbmx5IHYxXzUgPSBuZXcgVmVyc2lvbigxLCA1KTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgbGF0ZXN0ID0gVmVyc2lvbnMudjFfNTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmVyc2lvbkxlc3NPckVxdWFsKHZlcnNpb246IFRhcmdldFZlcnNpb24sIHRhcmdldFZlcnNpb246IFRhcmdldFZlcnNpb24pOiBib29sZWFuIHtcbiAgICBpZiAodmVyc2lvbiBpbnN0YW5jZW9mIFZlcnNpb24pIHtcbiAgICAgICAgaWYgKHRhcmdldFZlcnNpb24gaW5zdGFuY2VvZiBWZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0VmVyc2lvbi5jb21wYXJlVG8odmVyc2lvbikgPj0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRhcmdldCB2ZXJzaW9uIGlzICpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBWZXJzaW9uIGlzICpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0IHtcbiAgICBwcml2YXRlIF92YWxpZGF0aW9uRXZlbnRzOiBJVmFsaWRhdGlvbkV2ZW50W10gPSBbXTtcblxuICAgIHRvSlNPTk9yaWdpbmFsUGFyYW06IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0YXJnZXRWZXJzaW9uOiBWZXJzaW9uID0gVmVyc2lvbnMubGF0ZXN0KSB7fVxuXG4gICAgc2VyaWFsaXplVmFsdWUodGFyZ2V0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBwcm9wZXJ0eU5hbWU6IHN0cmluZywgcHJvcGVydHlWYWx1ZTogYW55LCBkZWZhdWx0VmFsdWU6IGFueSA9IHVuZGVmaW5lZCwgZm9yY2VEZWxldGVJZk51bGxPckRlZmF1bHQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBpZiAocHJvcGVydHlWYWx1ZSA9PT0gbnVsbCB8fCBwcm9wZXJ0eVZhbHVlID09PSB1bmRlZmluZWQgfHwgcHJvcGVydHlWYWx1ZSA9PT0gZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIUdsb2JhbFNldHRpbmdzLmVuYWJsZUZ1bGxKc29uUm91bmRUcmlwIHx8IGZvcmNlRGVsZXRlSWZOdWxsT3JEZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRhcmdldFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByb3BlcnR5VmFsdWUgPT09IGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgZGVsZXRlIHRhcmdldFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0W3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eVZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VyaWFsaXplU3RyaW5nKHRhcmdldDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgcHJvcGVydHlOYW1lOiBzdHJpbmcsIHByb3BlcnR5VmFsdWU/OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IHN0cmluZykge1xuICAgICAgICBpZiAocHJvcGVydHlWYWx1ZSA9PT0gbnVsbCB8fCBwcm9wZXJ0eVZhbHVlID09PSB1bmRlZmluZWQgfHwgcHJvcGVydHlWYWx1ZSA9PT0gZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXJpYWxpemVCb29sKHRhcmdldDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgcHJvcGVydHlOYW1lOiBzdHJpbmcsIHByb3BlcnR5VmFsdWU/OiBib29sZWFuLCBkZWZhdWx0VmFsdWU/OiBib29sZWFuKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eVZhbHVlID09PSBudWxsIHx8IHByb3BlcnR5VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBwcm9wZXJ0eVZhbHVlID09PSBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldFtwcm9wZXJ0eU5hbWVdID0gcHJvcGVydHlWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlcmlhbGl6ZU51bWJlcih0YXJnZXQ6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIHByb3BlcnR5TmFtZTogc3RyaW5nLCBwcm9wZXJ0eVZhbHVlPzogbnVtYmVyLCBkZWZhdWx0VmFsdWU/OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5VmFsdWUgPT09IG51bGwgfHwgcHJvcGVydHlWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHByb3BlcnR5VmFsdWUgPT09IGRlZmF1bHRWYWx1ZSB8fCBpc05hTihwcm9wZXJ0eVZhbHVlKSkge1xuICAgICAgICAgICAgZGVsZXRlIHRhcmdldFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0W3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eVZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VyaWFsaXplRW51bShcbiAgICAgICAgZW51bVR5cGU6IHsgW3M6IG51bWJlcl06IHN0cmluZyB9LFxuICAgICAgICB0YXJnZXQ6IHsgW2tleTogc3RyaW5nXTogYW55IH0sXG4gICAgICAgIHByb3BlcnR5TmFtZTogc3RyaW5nLFxuICAgICAgICBwcm9wZXJ0eVZhbHVlOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eVZhbHVlID09PSBudWxsIHx8IHByb3BlcnR5VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBwcm9wZXJ0eVZhbHVlID09PSBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldFtwcm9wZXJ0eU5hbWVdID0gZW51bVR5cGVbcHJvcGVydHlWYWx1ZV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXJpYWxpemVBcnJheSh0YXJnZXQ6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIHByb3BlcnR5TmFtZTogc3RyaW5nLCBwcm9wZXJ0eVZhbHVlOiBhbnlbXSB8IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgaXRlbXMgPSBbXTtcblxuICAgICAgICBpZiAocHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBwcm9wZXJ0eVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlcmlhbGl6ZWRJdGVtOiBhbnkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFNlcmlhbGl6YWJsZU9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVkSXRlbSA9IGl0ZW0udG9KU09OKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtLnRvSlNPTikge1xuICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVkSXRlbSA9IGl0ZW0udG9KU09OKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVkSXRlbSA9IGl0ZW07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHNlcmlhbGl6ZWRJdGVtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChzZXJpYWxpemVkSXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0Lmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkgJiYgQXJyYXkuaXNBcnJheSh0YXJnZXRbcHJvcGVydHlOYW1lXSkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZVZhbHVlKHRhcmdldCwgcHJvcGVydHlOYW1lLCBpdGVtcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhckV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5fdmFsaWRhdGlvbkV2ZW50cyA9IFtdO1xuICAgIH1cblxuICAgIGxvZ0V2ZW50KFxuICAgICAgICBzb3VyY2U6IFNlcmlhbGl6YWJsZU9iamVjdCB8IHVuZGVmaW5lZCxcbiAgICAgICAgcGhhc2U6IEVudW1zLlZhbGlkYXRpb25QaGFzZSxcbiAgICAgICAgZXZlbnQ6IEVudW1zLlZhbGlkYXRpb25FdmVudCxcbiAgICAgICAgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3ZhbGlkYXRpb25FdmVudHMucHVzaChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICAgICAgICBwaGFzZTogcGhhc2UsXG4gICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgIH1cblxuICAgIGxvZ1BhcnNlRXZlbnQoc291cmNlOiBTZXJpYWxpemFibGVPYmplY3QgfCB1bmRlZmluZWQsIGV2ZW50OiBFbnVtcy5WYWxpZGF0aW9uRXZlbnQsIG1lc3NhZ2U6IHN0cmluZykge1xuICAgICAgICB0aGlzLmxvZ0V2ZW50KHNvdXJjZSwgRW51bXMuVmFsaWRhdGlvblBoYXNlLlBhcnNlLCBldmVudCwgbWVzc2FnZSk7XG4gICAgfVxuXG4gICAgZ2V0RXZlbnRBdChpbmRleDogbnVtYmVyKTogSVZhbGlkYXRpb25FdmVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0aW9uRXZlbnRzW2luZGV4XTtcbiAgICB9XG5cbiAgICBnZXQgZXZlbnRDb3VudCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGlvbkV2ZW50cy5sZW5ndGg7XG4gICAgfVxufVxuXG5jbGFzcyBTaW1wbGVTZXJpYWxpemF0aW9uQ29udGV4dCBleHRlbmRzIEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCB7fVxuXG5leHBvcnQgY2xhc3MgUHJvcGVydHlEZWZpbml0aW9uIHtcbiAgICBwcml2YXRlIHN0YXRpYyBfc2VxdWVudGlhbE51bWJlcjogbnVtYmVyID0gMDtcblxuICAgIGdldEludGVybmFsTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cblxuICAgIHBhcnNlKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCBzb3VyY2U6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpOiBhbnkge1xuICAgICAgICByZXR1cm4gc291cmNlW3RoaXMubmFtZV07XG4gICAgfVxuXG4gICAgdG9KU09OKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCB0YXJnZXQ6IFByb3BlcnR5QmFnLCB2YWx1ZTogYW55LCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpOiB2b2lkIHtcbiAgICAgICAgY29udGV4dC5zZXJpYWxpemVWYWx1ZSh0YXJnZXQsIHRoaXMubmFtZSwgdmFsdWUsIHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgICB9XG5cbiAgICByZWFkb25seSBzZXF1ZW50aWFsTnVtYmVyOiBudW1iZXI7XG5cbiAgICBpc1NlcmlhbGl6YXRpb25FbmFibGVkOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICByZWFkb25seSB0YXJnZXRWZXJzaW9uOiBWZXJzaW9uLFxuICAgICAgICByZWFkb25seSBuYW1lOiBzdHJpbmcsXG4gICAgICAgIHJlYWRvbmx5IGRlZmF1bHRWYWx1ZT86IGFueSxcbiAgICAgICAgcmVhZG9ubHkgb25HZXRJbml0aWFsVmFsdWU/OiAoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QpID0+IGFueSkge1xuICAgICAgICB0aGlzLnNlcXVlbnRpYWxOdW1iZXIgPSBQcm9wZXJ0eURlZmluaXRpb24uX3NlcXVlbnRpYWxOdW1iZXI7XG5cbiAgICAgICAgUHJvcGVydHlEZWZpbml0aW9uLl9zZXF1ZW50aWFsTnVtYmVyKys7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RyaW5nUHJvcGVydHkgZXh0ZW5kcyBQcm9wZXJ0eURlZmluaXRpb24ge1xuICAgIHBhcnNlKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCBzb3VyY2U6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgcGFyc2VkVmFsdWUgPSBVdGlscy5wYXJzZVN0cmluZyhzb3VyY2VbdGhpcy5uYW1lXSwgdGhpcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgICBsZXQgaXNVbmRlZmluZWQgPSBwYXJzZWRWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IChwYXJzZWRWYWx1ZSA9PT0gXCJcIiAmJiB0aGlzLnRyZWF0RW1wdHlBc1VuZGVmaW5lZCk7XG5cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCAmJiB0aGlzLnJlZ0V4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxldCBtYXRjaGVzID0gdGhpcy5yZWdFeC5leGVjKDxzdHJpbmc+cGFyc2VkVmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxvZ1BhcnNlRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgIHNlbmRlcixcbiAgICAgICAgICAgICAgICAgICAgRW51bXMuVmFsaWRhdGlvbkV2ZW50LkludmFsaWRQcm9wZXJ0eVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy5pbnZhbGlkUHJvcGVydHlWYWx1ZShwYXJzZWRWYWx1ZSwgdGhpcy5uYW1lKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlZFZhbHVlO1xuICAgIH1cblxuICAgIHRvSlNPTihzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgdGFyZ2V0OiBQcm9wZXJ0eUJhZywgdmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCwgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuc2VyaWFsaXplU3RyaW5nKFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgdGhpcy5uYW1lLFxuICAgICAgICAgICAgdmFsdWUgPT09IFwiXCIgJiYgdGhpcy50cmVhdEVtcHR5QXNVbmRlZmluZWQgPyB1bmRlZmluZWQgOiB2YWx1ZSxcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVhZG9ubHkgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbixcbiAgICAgICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nLFxuICAgICAgICByZWFkb25seSB0cmVhdEVtcHR5QXNVbmRlZmluZWQ6IGJvb2xlYW4gPSB0cnVlLFxuICAgICAgICByZWFkb25seSByZWdFeD86IFJlZ0V4cCxcbiAgICAgICAgcmVhZG9ubHkgZGVmYXVsdFZhbHVlPzogc3RyaW5nLFxuICAgICAgICByZWFkb25seSBvbkdldEluaXRpYWxWYWx1ZT86IChzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCkgPT4gc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHRhcmdldFZlcnNpb24sIG5hbWUsIGRlZmF1bHRWYWx1ZSwgb25HZXRJbml0aWFsVmFsdWUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJvb2xQcm9wZXJ0eSBleHRlbmRzIFByb3BlcnR5RGVmaW5pdGlvbiB7XG4gICAgcGFyc2Uoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QsIHNvdXJjZTogUHJvcGVydHlCYWcsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCk6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gVXRpbHMucGFyc2VCb29sKHNvdXJjZVt0aGlzLm5hbWVdLCB0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgdG9KU09OKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCB0YXJnZXQ6IG9iamVjdCwgdmFsdWU6IGJvb2xlYW4gfCB1bmRlZmluZWQsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBjb250ZXh0LnNlcmlhbGl6ZUJvb2woXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICB0aGlzLm5hbWUsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVhZG9ubHkgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbixcbiAgICAgICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nLFxuICAgICAgICByZWFkb25seSBkZWZhdWx0VmFsdWU/OiBib29sZWFuLFxuICAgICAgICByZWFkb25seSBvbkdldEluaXRpYWxWYWx1ZT86IChzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCkgPT4gYW55KSB7XG4gICAgICAgIHN1cGVyKHRhcmdldFZlcnNpb24sIG5hbWUsIGRlZmF1bHRWYWx1ZSwgb25HZXRJbml0aWFsVmFsdWUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE51bVByb3BlcnR5IGV4dGVuZHMgUHJvcGVydHlEZWZpbml0aW9uIHtcbiAgICBwYXJzZShzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgc291cmNlOiBQcm9wZXJ0eUJhZywgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIFV0aWxzLnBhcnNlTnVtYmVyKHNvdXJjZVt0aGlzLm5hbWVdLCB0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgdG9KU09OKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCB0YXJnZXQ6IFByb3BlcnR5QmFnLCB2YWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5zZXJpYWxpemVOdW1iZXIoXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICB0aGlzLm5hbWUsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVhZG9ubHkgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbixcbiAgICAgICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nLFxuICAgICAgICByZWFkb25seSBkZWZhdWx0VmFsdWU/OiBudW1iZXIsXG4gICAgICAgIHJlYWRvbmx5IG9uR2V0SW5pdGlhbFZhbHVlPzogKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0KSA9PiBhbnkpIHtcbiAgICAgICAgc3VwZXIodGFyZ2V0VmVyc2lvbiwgbmFtZSwgZGVmYXVsdFZhbHVlLCBvbkdldEluaXRpYWxWYWx1ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGl4ZWxTaXplUHJvcGVydHkgZXh0ZW5kcyBQcm9wZXJ0eURlZmluaXRpb24ge1xuICAgIHBhcnNlKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCBzb3VyY2U6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgcmVzdWx0OiBudW1iZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCB2YWx1ZSA9IHNvdXJjZVt0aGlzLm5hbWVdO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IHNpemUgPSBTaXplQW5kVW5pdC5wYXJzZSh2YWx1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2l6ZS51bml0ID09IEVudW1zLlNpemVVbml0LlBpeGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNpemUucGh5c2ljYWxTaXplO1xuXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nLiBBIHBhcnNlIGVycm9yIGlzIGVtaXR0ZWQgYmVsb3dcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5sb2dQYXJzZUV2ZW50KFxuICAgICAgICAgICAgICAgICAgICBzZW5kZXIsXG4gICAgICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5JbnZhbGlkUHJvcGVydHlWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5ncy5lcnJvcnMuaW52YWxpZFByb3BlcnR5VmFsdWUoc291cmNlW3RoaXMubmFtZV0sIFwibWluSGVpZ2h0XCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdG9KU09OKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCB0YXJnZXQ6IFByb3BlcnR5QmFnLCB2YWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5zZXJpYWxpemVWYWx1ZShcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIHRoaXMubmFtZSxcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4odmFsdWUpID8gdmFsdWUgKyBcInB4XCIgOiB1bmRlZmluZWQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVmVyc2lvbmVkVmFsdWU8VFZhbHVlPiB7XG4gICAgdmFsdWU6IFRWYWx1ZTtcbiAgICB0YXJnZXRWZXJzaW9uPzogVmVyc2lvbjtcbn1cblxuZXhwb3J0IGNsYXNzIFN0cmluZ0FycmF5UHJvcGVydHkgZXh0ZW5kcyBQcm9wZXJ0eURlZmluaXRpb24ge1xuICAgIHBhcnNlKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCBzb3VyY2U6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCBzb3VyY2VWYWx1ZSA9IHNvdXJjZVt0aGlzLm5hbWVdO1xuXG4gICAgICAgIGlmIChzb3VyY2VWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8ICFBcnJheS5pc0FycmF5KHNvdXJjZVZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3VsdDogc3RyaW5nW10gPSBbXTtcblxuICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiBzb3VyY2VWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubG9nUGFyc2VFdmVudChcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyLFxuICAgICAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuSW52YWxpZFByb3BlcnR5VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGBJbnZhbGlkIGFycmF5IHZhbHVlIFwiJHt2YWx1ZX1cIiBvZiB0eXBlIFwiJHt0eXBlb2YgdmFsdWV9XCIgaWdub3JlZCBmb3IgXCIke3RoaXMubmFtZX1cIi5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdG9KU09OKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCB0YXJnZXQ6IFByb3BlcnR5QmFnLCB2YWx1ZTogc3RyaW5nW10gfCB1bmRlZmluZWQsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBjb250ZXh0LnNlcmlhbGl6ZUFycmF5KHRhcmdldCwgdGhpcy5uYW1lLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHJlYWRvbmx5IHRhcmdldFZlcnNpb246IFZlcnNpb24sXG4gICAgICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZyxcbiAgICAgICAgcmVhZG9ubHkgZGVmYXVsdFZhbHVlPzogc3RyaW5nW10sXG4gICAgICAgIHJlYWRvbmx5IG9uR2V0SW5pdGlhbFZhbHVlPzogKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0KSA9PiBzdHJpbmdbXSB8IHVuZGVmaW5lZCkge1xuICAgICAgICBzdXBlcih0YXJnZXRWZXJzaW9uLCBuYW1lLCBkZWZhdWx0VmFsdWUsIG9uR2V0SW5pdGlhbFZhbHVlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWYWx1ZVNldFByb3BlcnR5IGV4dGVuZHMgUHJvcGVydHlEZWZpbml0aW9uIHtcbiAgICBpc1ZhbGlkVmFsdWUodmFsdWU6IHN0cmluZywgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KTogYm9vbGVhbiB7XG4gICAgICAgIGZvciAobGV0IHZlcnNpb25lZFZhbHVlIG9mIHRoaXMudmFsdWVzKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gdmVyc2lvbmVkVmFsdWUudmFsdWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXRWZXJzaW9uID0gdmVyc2lvbmVkVmFsdWUudGFyZ2V0VmVyc2lvbiA/IHZlcnNpb25lZFZhbHVlLnRhcmdldFZlcnNpb24gOiB0aGlzLnRhcmdldFZlcnNpb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0VmVyc2lvbi5jb21wYXJlVG8oY29udGV4dC50YXJnZXRWZXJzaW9uKSA8PSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHBhcnNlKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCBzb3VyY2U6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgc291cmNlVmFsdWUgPSBzb3VyY2VbdGhpcy5uYW1lXTtcblxuICAgICAgICBpZiAoc291cmNlVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VWYWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZm9yIChsZXQgdmVyc2lvbmVkVmFsdWUgb2YgdGhpcy52YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlVmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gdmVyc2lvbmVkVmFsdWUudmFsdWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0VmVyc2lvbiA9IHZlcnNpb25lZFZhbHVlLnRhcmdldFZlcnNpb24gPyB2ZXJzaW9uZWRWYWx1ZS50YXJnZXRWZXJzaW9uIDogdGhpcy50YXJnZXRWZXJzaW9uO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRWZXJzaW9uLmNvbXBhcmVUbyhjb250ZXh0LnRhcmdldFZlcnNpb24pIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZXJzaW9uZWRWYWx1ZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubG9nUGFyc2VFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRW51bXMuVmFsaWRhdGlvbkV2ZW50LkludmFsaWRQcm9wZXJ0eVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLnByb3BlcnR5VmFsdWVOb3RTdXBwb3J0ZWQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFZlcnNpb24udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC50YXJnZXRWZXJzaW9uLnRvU3RyaW5nKCkpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5sb2dQYXJzZUV2ZW50KFxuICAgICAgICAgICAgc2VuZGVyLFxuICAgICAgICAgICAgRW51bXMuVmFsaWRhdGlvbkV2ZW50LkludmFsaWRQcm9wZXJ0eVZhbHVlLFxuICAgICAgICAgICAgU3RyaW5ncy5lcnJvcnMuaW52YWxpZFByb3BlcnR5VmFsdWUoc291cmNlVmFsdWUsIHRoaXMubmFtZSkpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICB0b0pTT04oc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QsIHRhcmdldDogUHJvcGVydHlCYWcsIHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBsZXQgaW52YWxpZFZhbHVlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGludmFsaWRWYWx1ZSA9IHRydWU7XG5cbiAgICAgICAgICAgIGZvciAobGV0IHZlcnNpb25lZFZhbHVlIG9mIHRoaXMudmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZlcnNpb25lZFZhbHVlLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0VmVyc2lvbiA9IHZlcnNpb25lZFZhbHVlLnRhcmdldFZlcnNpb24gPyB2ZXJzaW9uZWRWYWx1ZS50YXJnZXRWZXJzaW9uIDogdGhpcy50YXJnZXRWZXJzaW9uO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRWZXJzaW9uLmNvbXBhcmVUbyhjb250ZXh0LnRhcmdldFZlcnNpb24pIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRWYWx1ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubG9nRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25QaGFzZS5Ub0pTT04sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRW51bXMuVmFsaWRhdGlvbkV2ZW50LkludmFsaWRQcm9wZXJ0eVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLnByb3BlcnR5VmFsdWVOb3RTdXBwb3J0ZWQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFZlcnNpb24udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC50YXJnZXRWZXJzaW9uLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaW52YWxpZFZhbHVlKSB7XG4gICAgICAgICAgICBjb250ZXh0LnNlcmlhbGl6ZVZhbHVlKFxuICAgICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgICAgICAgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVhZG9ubHkgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbixcbiAgICAgICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nLFxuICAgICAgICByZWFkb25seSB2YWx1ZXM6IElWZXJzaW9uZWRWYWx1ZTxzdHJpbmc+W10sXG4gICAgICAgIHJlYWRvbmx5IGRlZmF1bHRWYWx1ZT86IHN0cmluZyxcbiAgICAgICAgcmVhZG9ubHkgb25HZXRJbml0aWFsVmFsdWU/OiAoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QpID0+IHN0cmluZykge1xuICAgICAgICBzdXBlcih0YXJnZXRWZXJzaW9uLCBuYW1lLCBkZWZhdWx0VmFsdWUsIG9uR2V0SW5pdGlhbFZhbHVlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFbnVtUHJvcGVydHk8VEVudW0gZXh0ZW5kcyB7IFtzOiBudW1iZXJdOiBzdHJpbmcgfT4gZXh0ZW5kcyBQcm9wZXJ0eURlZmluaXRpb24ge1xuICAgIHByaXZhdGUgX3ZhbHVlczogSVZlcnNpb25lZFZhbHVlPG51bWJlcj5bXSA9IFtdO1xuXG4gICAgcGFyc2Uoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QsIHNvdXJjZTogUHJvcGVydHlCYWcsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCBzb3VyY2VWYWx1ZSA9IHNvdXJjZVt0aGlzLm5hbWVdO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlVmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbnVtVmFsdWUgPSBVdGlscy5nZXRFbnVtVmFsdWVCeU5hbWUodGhpcy5lbnVtVHlwZSwgc291cmNlVmFsdWUpO1xuXG4gICAgICAgIGlmIChlbnVtVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9yIChsZXQgdmVyc2lvbmVkVmFsdWUgb2YgdGhpcy52YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodmVyc2lvbmVkVmFsdWUudmFsdWUgPT09IGVudW1WYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0VmVyc2lvbiA9IHZlcnNpb25lZFZhbHVlLnRhcmdldFZlcnNpb24gPyB2ZXJzaW9uZWRWYWx1ZS50YXJnZXRWZXJzaW9uIDogdGhpcy50YXJnZXRWZXJzaW9uO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRWZXJzaW9uLmNvbXBhcmVUbyhjb250ZXh0LnRhcmdldFZlcnNpb24pIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbnVtVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxvZ1BhcnNlRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5JbnZhbGlkUHJvcGVydHlWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy5wcm9wZXJ0eVZhbHVlTm90U3VwcG9ydGVkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRWZXJzaW9uLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQudGFyZ2V0VmVyc2lvbi50b1N0cmluZygpKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubG9nUGFyc2VFdmVudChcbiAgICAgICAgICAgIHNlbmRlcixcbiAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5JbnZhbGlkUHJvcGVydHlWYWx1ZSxcbiAgICAgICAgICAgIFN0cmluZ3MuZXJyb3JzLmludmFsaWRQcm9wZXJ0eVZhbHVlKHNvdXJjZVZhbHVlLCB0aGlzLm5hbWUpKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgdG9KU09OKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCB0YXJnZXQ6IFByb3BlcnR5QmFnLCB2YWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgbGV0IGludmFsaWRWYWx1ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbnZhbGlkVmFsdWUgPSB0cnVlO1xuXG4gICAgICAgICAgICBmb3IgKGxldCB2ZXJzaW9uZWRWYWx1ZSBvZiB0aGlzLnZhbHVlcykge1xuICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uZWRWYWx1ZS52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhcmdldFZlcnNpb24gPSB2ZXJzaW9uZWRWYWx1ZS50YXJnZXRWZXJzaW9uID8gdmVyc2lvbmVkVmFsdWUudGFyZ2V0VmVyc2lvbiA6IHRoaXMudGFyZ2V0VmVyc2lvbjtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0VmVyc2lvbi5jb21wYXJlVG8oY29udGV4dC50YXJnZXRWZXJzaW9uKSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkVmFsdWUgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxvZ0V2ZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uUGhhc2UuVG9KU09OLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVudW1zLlZhbGlkYXRpb25FdmVudC5JbnZhbGlkUHJvcGVydHlWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy5pbnZhbGlkUHJvcGVydHlWYWx1ZSh2YWx1ZSwgdGhpcy5uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWludmFsaWRWYWx1ZSkge1xuICAgICAgICAgICAgY29udGV4dC5zZXJpYWxpemVFbnVtKFxuICAgICAgICAgICAgICAgIHRoaXMuZW51bVR5cGUsXG4gICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgIHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVhZG9ubHkgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbixcbiAgICAgICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nLFxuICAgICAgICByZWFkb25seSBlbnVtVHlwZTogVEVudW0sXG4gICAgICAgIHJlYWRvbmx5IGRlZmF1bHRWYWx1ZT86IG51bWJlcixcbiAgICAgICAgdmFsdWVzPzogSVZlcnNpb25lZFZhbHVlPG51bWJlcj5bXSxcbiAgICAgICAgcmVhZG9ubHkgb25HZXRJbml0aWFsVmFsdWU/OiAoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QpID0+IG51bWJlcikge1xuICAgICAgICBzdXBlcih0YXJnZXRWZXJzaW9uLCBuYW1lLCBkZWZhdWx0VmFsdWUsIG9uR2V0SW5pdGlhbFZhbHVlKTtcblxuICAgICAgICBpZiAoIXZhbHVlcykge1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGVudW1UeXBlKSB7XG4gICAgICAgICAgICAgICAgbGV0IGtleUFzTnVtYmVyID0gcGFyc2VJbnQoa2V5LCAxMCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoa2V5QXNOdW1iZXIgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMucHVzaCggeyB2YWx1ZToga2V5QXNOdW1iZXIgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gdmFsdWVzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlcygpOiBJVmVyc2lvbmVkVmFsdWU8bnVtYmVyPltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlcztcbiAgICB9XG59XG5cbmV4cG9ydCB0eXBlIFNlcmlhbGl6YWJsZU9iamVjdFR5cGUgPSB7IG5ldygpOiBTZXJpYWxpemFibGVPYmplY3QgfTtcblxuZXhwb3J0IGNsYXNzIFNlcmlhbGl6YWJsZU9iamVjdFByb3BlcnR5IGV4dGVuZHMgUHJvcGVydHlEZWZpbml0aW9uIHtcbiAgICBwYXJzZShzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgc291cmNlOiBQcm9wZXJ0eUJhZywgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KTogU2VyaWFsaXphYmxlT2JqZWN0IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IHNvdXJjZVZhbHVlID0gc291cmNlW3RoaXMubmFtZV07XG5cbiAgICAgICAgaWYgKHNvdXJjZVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9uR2V0SW5pdGlhbFZhbHVlID8gdGhpcy5vbkdldEluaXRpYWxWYWx1ZShzZW5kZXIpIDogdGhpcy5kZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IHRoaXMub2JqZWN0VHlwZSgpO1xuICAgICAgICByZXN1bHQucGFyc2Uoc291cmNlVmFsdWUsIGNvbnRleHQpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdG9KU09OKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCB0YXJnZXQ6IFByb3BlcnR5QmFnLCB2YWx1ZTogU2VyaWFsaXphYmxlT2JqZWN0IHwgdW5kZWZpbmVkLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgbGV0IHNlcmlhbGl6ZWRWYWx1ZTogb2JqZWN0IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICF2YWx1ZS5oYXNBbGxEZWZhdWx0VmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHNlcmlhbGl6ZWRWYWx1ZSA9IHZhbHVlLnRvSlNPTihjb250ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygc2VyaWFsaXplZFZhbHVlID09PSBcIm9iamVjdFwiICYmIE9iamVjdC5rZXlzKHNlcmlhbGl6ZWRWYWx1ZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0LnNlcmlhbGl6ZVZhbHVlKHRhcmdldCwgdGhpcy5uYW1lLCBzZXJpYWxpemVkVmFsdWUsIHRoaXMuZGVmYXVsdFZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVhZG9ubHkgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbixcbiAgICAgICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nLFxuICAgICAgICByZWFkb25seSBvYmplY3RUeXBlOiBTZXJpYWxpemFibGVPYmplY3RUeXBlLFxuICAgICAgICByZWFkb25seSBudWxsYWJsZTogYm9vbGVhbiA9IGZhbHNlLFxuICAgICAgICBkZWZhdWx0VmFsdWU/OiBTZXJpYWxpemFibGVPYmplY3QpIHtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICB0YXJnZXRWZXJzaW9uLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgIChzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCkgPT4geyByZXR1cm4gdGhpcy5udWxsYWJsZSA/IHVuZGVmaW5lZCA6IG5ldyB0aGlzLm9iamVjdFR5cGUoKTsgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2VyaWFsaXphYmxlT2JqZWN0Q29sbGVjdGlvblByb3BlcnR5IGV4dGVuZHMgUHJvcGVydHlEZWZpbml0aW9uIHtcbiAgICBwYXJzZShzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgc291cmNlOiBQcm9wZXJ0eUJhZywgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KTogU2VyaWFsaXphYmxlT2JqZWN0W10gfCB1bmRlZmluZWQge1xuICAgICAgICBsZXQgcmVzdWx0OiBTZXJpYWxpemFibGVPYmplY3RbXSB8IHVuZGVmaW5lZCA9IFtdO1xuXG4gICAgICAgIGxldCBzb3VyY2VDb2xsZWN0aW9uID0gc291cmNlW3RoaXMubmFtZV07XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlQ29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHNvdXJjZUl0ZW0gb2Ygc291cmNlQ29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtID0gbmV3IHRoaXMub2JqZWN0VHlwZSgpO1xuICAgICAgICAgICAgICAgIGl0ZW0ucGFyc2Uoc291cmNlSXRlbSwgY29udGV4dCk7XG5cbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uSXRlbUFkZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25JdGVtQWRkZWQoc2VuZGVyLCBpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA+IDAgPyByZXN1bHQgOiAodGhpcy5vbkdldEluaXRpYWxWYWx1ZSA/IHRoaXMub25HZXRJbml0aWFsVmFsdWUoc2VuZGVyKSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuXG4gICAgdG9KU09OKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCB0YXJnZXQ6IFByb3BlcnR5QmFnLCB2YWx1ZTogU2VyaWFsaXphYmxlT2JqZWN0W10gfCB1bmRlZmluZWQsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBjb250ZXh0LnNlcmlhbGl6ZUFycmF5KHRhcmdldCwgdGhpcy5uYW1lLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHJlYWRvbmx5IHRhcmdldFZlcnNpb246IFZlcnNpb24sXG4gICAgICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZyxcbiAgICAgICAgcmVhZG9ubHkgb2JqZWN0VHlwZTogU2VyaWFsaXphYmxlT2JqZWN0VHlwZSxcbiAgICAgICAgcmVhZG9ubHkgb25JdGVtQWRkZWQ/OiAoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QsIGl0ZW06IFNlcmlhbGl6YWJsZU9iamVjdCkgPT4gdm9pZCkge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIHRhcmdldFZlcnNpb24sXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0KSA9PiB7IHJldHVybiBbXTsgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ3VzdG9tUHJvcGVydHk8VD4gZXh0ZW5kcyBQcm9wZXJ0eURlZmluaXRpb24ge1xuICAgIHBhcnNlKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCBzb3VyY2U6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpOiBUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub25QYXJzZShzZW5kZXIsIHRoaXMsIHNvdXJjZSwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgdG9KU09OKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCB0YXJnZXQ6IFByb3BlcnR5QmFnLCB2YWx1ZTogVCwgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KSB7XG4gICAgICAgIHRoaXMub25Ub0pTT04oc2VuZGVyLCB0aGlzLCB0YXJnZXQsIHZhbHVlLCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVhZG9ubHkgdGFyZ2V0VmVyc2lvbjogVmVyc2lvbixcbiAgICAgICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nLFxuICAgICAgICByZWFkb25seSBvblBhcnNlOiAoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QsIHByb3BlcnR5OiBQcm9wZXJ0eURlZmluaXRpb24sIHNvdXJjZTogUHJvcGVydHlCYWcsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkgPT4gVCxcbiAgICAgICAgcmVhZG9ubHkgb25Ub0pTT046IChzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgcHJvcGVydHk6IFByb3BlcnR5RGVmaW5pdGlvbiwgdGFyZ2V0OiBQcm9wZXJ0eUJhZywgdmFsdWU6IFQsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkgPT4gdm9pZCxcbiAgICAgICAgcmVhZG9ubHkgZGVmYXVsdFZhbHVlPzogVCxcbiAgICAgICAgcmVhZG9ubHkgb25HZXRJbml0aWFsVmFsdWU/OiAoc2VuZGVyOiBTZXJpYWxpemFibGVPYmplY3QpID0+IFQpIHtcbiAgICAgICAgc3VwZXIodGFyZ2V0VmVyc2lvbiwgbmFtZSwgZGVmYXVsdFZhbHVlLCBvbkdldEluaXRpYWxWYWx1ZSk7XG5cbiAgICAgICAgaWYgKCF0aGlzLm9uUGFyc2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkN1c3RvbVByb3BlcnR5RGVmaW5pdGlvbiBpbnN0YW5jZXMgbXVzdCBoYXZlIGFuIG9uUGFyc2UgaGFuZGxlci5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMub25Ub0pTT04pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkN1c3RvbVByb3BlcnR5RGVmaW5pdGlvbiBpbnN0YW5jZXMgbXVzdCBoYXZlIGFuIG9uVG9KU09OIGhhbmRsZXIuXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2VyaWFsaXphYmxlT2JqZWN0U2NoZW1hIHtcbiAgICBwcml2YXRlIF9wcm9wZXJ0aWVzOiBQcm9wZXJ0eURlZmluaXRpb25bXSA9IFtdO1xuXG4gICAgaW5kZXhPZihwcm9wZXJ0eTogUHJvcGVydHlEZWZpbml0aW9uKTogbnVtYmVyIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJvcGVydGllc1tpXSA9PT0gcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBhZGQoLi4ucHJvcGVydGllczogUHJvcGVydHlEZWZpbml0aW9uW10pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbmRleE9mKHByb3BlcnRpZXNbaV0pID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb3BlcnRpZXMucHVzaChwcm9wZXJ0aWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZSguLi5wcm9wZXJ0aWVzOiBQcm9wZXJ0eURlZmluaXRpb25bXSkge1xuICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuaW5kZXhPZihwcm9wZXJ0eSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9wZXJ0aWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRJdGVtQXQoaW5kZXg6IG51bWJlcik6IFByb3BlcnR5RGVmaW5pdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0aWVzW2luZGV4XTtcbiAgICB9XG5cbiAgICBnZXRDb3VudCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcGVydGllcy5sZW5ndGg7XG4gICAgfVxufVxuXG4vLyBUaGlzIGlzIGEgZGVjb3JhdG9yIGZ1bmN0aW9uLCB1c2VkIHRvIG1hcCBTZXJpYWxpemFibGVPYmplY3QgZGVzY2VuZGFudCBjbGFzcyBtZW1iZXJzIHRvXG4vLyBzY2hlbWEgcHJvcGVydGllc1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BlcnR5KHByb3BlcnR5OiBQcm9wZXJ0eURlZmluaXRpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHx8IHt9O1xuXG4gICAgICAgIGlmICghZGVzY3JpcHRvci5nZXQgJiYgIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICAgICAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uKHRoaXM6IFNlcmlhbGl6YWJsZU9iamVjdCkgeyByZXR1cm4gdGhpcy5nZXRWYWx1ZShwcm9wZXJ0eSk7IH07XG4gICAgICAgICAgICBkZXNjcmlwdG9yLnNldCA9IGZ1bmN0aW9uKHRoaXM6IFNlcmlhbGl6YWJsZU9iamVjdCwgdmFsdWU6IGFueSkgeyB0aGlzLnNldFZhbHVlKHByb3BlcnR5LCB2YWx1ZSk7IH07XG5cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgdHlwZSBQcm9wZXJ0eUJhZyA9IHsgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogYW55IH07XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTZXJpYWxpemFibGVPYmplY3Qge1xuICAgIHN0YXRpYyBvblJlZ2lzdGVyQ3VzdG9tUHJvcGVydGllcz86IChzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgc2NoZW1hOiBTZXJpYWxpemFibGVPYmplY3RTY2hlbWEpID0+IHZvaWQ7XG4gICAgc3RhdGljIGRlZmF1bHRNYXhWZXJzaW9uOiBWZXJzaW9uID0gVmVyc2lvbnMubGF0ZXN0O1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX3NjaGVtYUNhY2hlOiB7IFt0eXBlTmFtZTogc3RyaW5nXTogU2VyaWFsaXphYmxlT2JqZWN0U2NoZW1hIH0gPSB7fTtcblxuICAgIHByaXZhdGUgX3Byb3BlcnR5QmFnOiBQcm9wZXJ0eUJhZyA9IHt9O1xuICAgIHByaXZhdGUgX3Jhd1Byb3BlcnRpZXM6IFByb3BlcnR5QmFnID0ge307XG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0U2NoZW1hS2V5KCk6IHN0cmluZztcblxuICAgIHByb3RlY3RlZCBnZXREZWZhdWx0U2VyaWFsaXphdGlvbkNvbnRleHQoKTogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW1wbGVTZXJpYWxpemF0aW9uQ29udGV4dCgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBwb3B1bGF0ZVNjaGVtYShzY2hlbWE6IFNlcmlhbGl6YWJsZU9iamVjdFNjaGVtYSkge1xuICAgICAgICBsZXQgY3RvciA9IDxhbnk+dGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgbGV0IHByb3BlcnRpZXM6IFByb3BlcnR5RGVmaW5pdGlvbltdID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgcHJvcGVydHlOYW1lIGluIGN0b3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IHByb3BlcnR5VmFsdWUgPSBjdG9yW3Byb3BlcnR5TmFtZV07XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHlWYWx1ZSBpbnN0YW5jZW9mIFByb3BlcnR5RGVmaW5pdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnB1c2gocHJvcGVydHlWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIC8vIElmIGEgcHJvcGVydHkgaGFwcGVucyB0byBoYXZlIGEgZ2V0dGVyIGZ1bmN0aW9uIGFuZFxuICAgICAgICAgICAgICAgIC8vIGl0IHRocm93cyBhbiBleGNlcHRpb24sIHdlIG5lZWQgdG8gY2F0Y2ggaXQgaGVyZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHNvcnRlZFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLnNvcnQoKHAxOiBQcm9wZXJ0eURlZmluaXRpb24sIHAyOiBQcm9wZXJ0eURlZmluaXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocDEuc2VxdWVudGlhbE51bWJlciA+IHAyLnNlcXVlbnRpYWxOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHAxLnNlcXVlbnRpYWxOdW1iZXIgPCBwMi5zZXF1ZW50aWFsTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzY2hlbWEuYWRkKC4uLnNvcnRlZFByb3BlcnRpZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFNlcmlhbGl6YWJsZU9iamVjdC5vblJlZ2lzdGVyQ3VzdG9tUHJvcGVydGllcykge1xuICAgICAgICAgICAgU2VyaWFsaXphYmxlT2JqZWN0Lm9uUmVnaXN0ZXJDdXN0b21Qcm9wZXJ0aWVzKHRoaXMsIHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0VmFsdWUocHJvcGVydHk6IFByb3BlcnR5RGVmaW5pdGlvbik6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9wZXJ0eUJhZy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eS5nZXRJbnRlcm5hbE5hbWUoKSkgPyB0aGlzLl9wcm9wZXJ0eUJhZ1twcm9wZXJ0eS5nZXRJbnRlcm5hbE5hbWUoKV0gOiBwcm9wZXJ0eS5kZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNldFZhbHVlKHByb3BlcnR5OiBQcm9wZXJ0eURlZmluaXRpb24sIHZhbHVlOiBhbnkpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9wcm9wZXJ0eUJhZ1twcm9wZXJ0eS5nZXRJbnRlcm5hbE5hbWUoKV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9wZXJ0eUJhZ1twcm9wZXJ0eS5nZXRJbnRlcm5hbE5hbWUoKV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFBhcnNlKHNvdXJjZTogUHJvcGVydHlCYWcsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICB0aGlzLl9wcm9wZXJ0eUJhZyA9IHt9O1xuICAgICAgICB0aGlzLl9yYXdQcm9wZXJ0aWVzID0gR2xvYmFsU2V0dGluZ3MuZW5hYmxlRnVsbEpzb25Sb3VuZFRyaXAgPyAoc291cmNlID8gc291cmNlIDoge30pIDoge307XG5cbiAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgbGV0IHMgPSB0aGlzLmdldFNjaGVtYSgpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHMuZ2V0Q291bnQoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHByb3BlcnR5ID0gcy5nZXRJdGVtQXQoaSk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkuaXNTZXJpYWxpemF0aW9uRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcHJvcGVydHlWYWx1ZSA9IHByb3BlcnR5Lm9uR2V0SW5pdGlhbFZhbHVlID8gcHJvcGVydHkub25HZXRJbml0aWFsVmFsdWUodGhpcykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5LnRhcmdldFZlcnNpb24uY29tcGFyZVRvKGNvbnRleHQudGFyZ2V0VmVyc2lvbikgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5VmFsdWUgPSBwcm9wZXJ0eS5wYXJzZSh0aGlzLCBzb3VyY2UsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5sb2dQYXJzZUV2ZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbnVtcy5WYWxpZGF0aW9uRXZlbnQuVW5zdXBwb3J0ZWRQcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5ncy5lcnJvcnMucHJvcGVydHlOb3RTdXBwb3J0ZWQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkudGFyZ2V0VmVyc2lvbi50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC50YXJnZXRWZXJzaW9uLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUocHJvcGVydHksIHByb3BlcnR5VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXREZWZhdWx0VmFsdWVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxUb0pTT04odGFyZ2V0OiBQcm9wZXJ0eUJhZywgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KSB7XG4gICAgICAgIGxldCBzID0gdGhpcy5nZXRTY2hlbWEoKTtcbiAgICAgICAgbGV0IHNlcmlhbGl6ZWRQcm9wZXJ0aWVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcy5nZXRDb3VudCgpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eSA9IHMuZ2V0SXRlbUF0KGkpO1xuXG4gICAgICAgICAgICAvLyBBdm9pZCBzZXJpYWxpemluZyB0aGUgc2FtZSBwcm9wZXJ0eSBtdWx0aXBsZSB0aW1lcy4gVGhpcyBpcyBuZWNlc3NhcnlcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugc29tZSBwcm9wZXJ0eSBkZWZpbml0aW9ucyBtYXAgdG8gdGhlIHNhbWUgdW5kZXJseWluZyBzY2hlbWFcbiAgICAgICAgICAgIC8vIHByb3BlcnR5XG4gICAgICAgICAgICBpZiAocHJvcGVydHkuaXNTZXJpYWxpemF0aW9uRW5hYmxlZCAmJiBwcm9wZXJ0eS50YXJnZXRWZXJzaW9uLmNvbXBhcmVUbyhjb250ZXh0LnRhcmdldFZlcnNpb24pIDw9IDAgJiYgc2VyaWFsaXplZFByb3BlcnRpZXMuaW5kZXhPZihwcm9wZXJ0eS5uYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eS50b0pTT04odGhpcywgdGFyZ2V0LCB0aGlzLmdldFZhbHVlKHByb3BlcnR5KSwgY29udGV4dCk7XG5cbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkUHJvcGVydGllcy5wdXNoKHByb3BlcnR5Lm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNob3VsZFNlcmlhbGl6ZShjb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgbWF4VmVyc2lvbjogVmVyc2lvbiA9IFNlcmlhbGl6YWJsZU9iamVjdC5kZWZhdWx0TWF4VmVyc2lvbjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBsZXQgcyA9IHRoaXMuZ2V0U2NoZW1hKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzLmdldENvdW50KCk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHByb3BlcnR5ID0gcy5nZXRJdGVtQXQoaSk7XG5cbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eS5vbkdldEluaXRpYWxWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUocHJvcGVydHksIHByb3BlcnR5Lm9uR2V0SW5pdGlhbFZhbHVlKHRoaXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlKHNvdXJjZTogUHJvcGVydHlCYWcsIGNvbnRleHQ/OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5pbnRlcm5hbFBhcnNlKHNvdXJjZSwgY29udGV4dCA/IGNvbnRleHQgOiBuZXcgU2ltcGxlU2VyaWFsaXphdGlvbkNvbnRleHQoKSk7XG4gICAgfVxuXG4gICAgdG9KU09OKGNvbnRleHQ/OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQpOiBQcm9wZXJ0eUJhZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCBlZmZlY3RpdmVDb250ZXh0OiBCYXNlU2VyaWFsaXphdGlvbkNvbnRleHQ7XG5cbiAgICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dCBpbnN0YW5jZW9mIEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICAgICAgZWZmZWN0aXZlQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlZmZlY3RpdmVDb250ZXh0ID0gdGhpcy5nZXREZWZhdWx0U2VyaWFsaXphdGlvbkNvbnRleHQoKTtcbiAgICAgICAgICAgIGVmZmVjdGl2ZUNvbnRleHQudG9KU09OT3JpZ2luYWxQYXJhbSA9IGNvbnRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zaG91bGRTZXJpYWxpemUoZWZmZWN0aXZlQ29udGV4dCkpIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6IFByb3BlcnR5QmFnO1xuXG4gICAgICAgICAgICBpZiAoR2xvYmFsU2V0dGluZ3MuZW5hYmxlRnVsbEpzb25Sb3VuZFRyaXAgJiYgdGhpcy5fcmF3UHJvcGVydGllcyAmJiB0eXBlb2YgdGhpcy5fcmF3UHJvcGVydGllcyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX3Jhd1Byb3BlcnRpZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbFRvSlNPTihyZXN1bHQsIGVmZmVjdGl2ZUNvbnRleHQpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhc0RlZmF1bHRWYWx1ZShwcm9wZXJ0eTogUHJvcGVydHlEZWZpbml0aW9uKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKHByb3BlcnR5KSA9PT0gcHJvcGVydHkuZGVmYXVsdFZhbHVlO1xuICAgIH1cblxuICAgIGhhc0FsbERlZmF1bHRWYWx1ZXMoKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBzID0gdGhpcy5nZXRTY2hlbWEoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHMuZ2V0Q291bnQoKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcHJvcGVydHkgPSBzLmdldEl0ZW1BdChpKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0RlZmF1bHRWYWx1ZShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXNldERlZmF1bHRWYWx1ZXMoKSB7XG4gICAgICAgIGxldCBzID0gdGhpcy5nZXRTY2hlbWEoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHMuZ2V0Q291bnQoKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcHJvcGVydHkgPSBzLmdldEl0ZW1BdChpKTtcblxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZShwcm9wZXJ0eSwgcHJvcGVydHkuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEN1c3RvbVByb3BlcnR5KG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgICBsZXQgc2hvdWxkRGVsZXRlUHJvcGVydHkgPSAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICF2YWx1ZSkgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbDtcblxuICAgICAgICBpZiAoc2hvdWxkRGVsZXRlUHJvcGVydHkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9yYXdQcm9wZXJ0aWVzW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmF3UHJvcGVydGllc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q3VzdG9tUHJvcGVydHkobmFtZTogc3RyaW5nKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jhd1Byb3BlcnRpZXNbbmFtZV07XG4gICAgfVxuXG4gICAgZ2V0U2NoZW1hKCk6IFNlcmlhbGl6YWJsZU9iamVjdFNjaGVtYSB7XG4gICAgICAgIGxldCBzY2hlbWE6IFNlcmlhbGl6YWJsZU9iamVjdFNjaGVtYSA9IFNlcmlhbGl6YWJsZU9iamVjdC5fc2NoZW1hQ2FjaGVbdGhpcy5nZXRTY2hlbWFLZXkoKV07XG5cbiAgICAgICAgaWYgKCFzY2hlbWEpIHtcbiAgICAgICAgICAgIHNjaGVtYSA9IG5ldyBTZXJpYWxpemFibGVPYmplY3RTY2hlbWEoKTtcblxuICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZVNjaGVtYShzY2hlbWEpO1xuXG4gICAgICAgICAgICBTZXJpYWxpemFibGVPYmplY3QuX3NjaGVtYUNhY2hlW3RoaXMuZ2V0U2NoZW1hS2V5KCldID0gc2NoZW1hO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCAqIGFzIEVudW1zIGZyb20gXCIuL2VudW1zXCI7XG5cbmV4cG9ydCB0eXBlIFJlZnJlc2ggPSB7XG4gICAgbW9kZTogRW51bXMuUmVmcmVzaE1vZGU7XG4gICAgdGltZUJldHdlZW5BdXRvbWF0aWNSZWZyZXNoZXM6IG51bWJlcjtcbiAgICBtYXhpbXVtQ29uc2VjdXRpdmVBdXRvbWF0aWNSZWZyZXNoZXM6IG51bWJlcjtcbiAgICBhbGxvd01hbnVhbFJlZnJlc2hlc0FmdGVyQXV0b21hdGljUmVmcmVzaGVzOiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBBcHBsZXRzU2V0dGluZ3MgPSB7XG4gICAgbG9nRW5hYmxlZDogYm9vbGVhbjtcbiAgICBsb2dMZXZlbDogRW51bXMuTG9nTGV2ZWw7XG4gICAgbWF4aW11bVJldHJ5QXR0ZW1wdHM6IG51bWJlcjtcbiAgICBkZWZhdWx0VGltZUJldHdlZW5SZXRyeUF0dGVtcHRzOiBudW1iZXI7XG4gICAgYXV0aFByb21wdFdpZHRoOiBudW1iZXI7XG4gICAgYXV0aFByb21wdEhlaWdodDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IHJlZnJlc2g6IFJlZnJlc2g7XG4gICAgb25Mb2dFdmVudD86IChsZXZlbDogRW51bXMuTG9nTGV2ZWwsIG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIEdsb2JhbFNldHRpbmdzIHtcbiAgICBzdGF0aWMgdXNlQWR2YW5jZWRUZXh0QmxvY2tUcnVuY2F0aW9uOiBib29sZWFuID0gdHJ1ZTtcbiAgICBzdGF0aWMgdXNlQWR2YW5jZWRDYXJkQm90dG9tVHJ1bmNhdGlvbjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHN0YXRpYyB1c2VNYXJrZG93bkluUmFkaW9CdXR0b25BbmRDaGVja2JveDogYm9vbGVhbiA9IHRydWU7XG4gICAgc3RhdGljIGFsbG93TWFya0ZvclRleHRIaWdobGlnaHRpbmc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBzdGF0aWMgYWx3YXlzQmxlZWRTZXBhcmF0b3JzOiBib29sZWFuID0gZmFsc2U7XG4gICAgc3RhdGljIGVuYWJsZUZ1bGxKc29uUm91bmRUcmlwOiBib29sZWFuID0gZmFsc2U7XG4gICAgc3RhdGljIGRpc3BsYXlJbnB1dFZhbGlkYXRpb25FcnJvcnM6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHN0YXRpYyBhbGxvd1ByZVByb2Nlc3NpbmdQcm9wZXJ0eVZhbHVlczogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHN0YXRpYyBzZXRUYWJJbmRleEF0Q2FyZFJvb3Q6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHN0YXRpYyBlbmFibGVGYWxsYmFjazogYm9vbGVhbiA9IHRydWU7XG4gICAgc3RhdGljIHVzZVdlYmtpdExpbmVDbGFtcDogYm9vbGVhbiA9IHRydWU7XG4gICAgc3RhdGljIGFsbG93TW9yZVRoYW5NYXhBY3Rpb25zSW5PdmVyZmxvd01lbnU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIHN0YXRpYyByZWFkb25seSBhcHBsZXRzOiBBcHBsZXRzU2V0dGluZ3MgPSB7XG4gICAgICAgIGxvZ0VuYWJsZWQ6IHRydWUsXG4gICAgICAgIGxvZ0xldmVsOiBFbnVtcy5Mb2dMZXZlbC5FcnJvcixcbiAgICAgICAgbWF4aW11bVJldHJ5QXR0ZW1wdHM6IDMsXG4gICAgICAgIGRlZmF1bHRUaW1lQmV0d2VlblJldHJ5QXR0ZW1wdHM6IDMwMDAsIC8vIDMgc2Vjb25kc1xuICAgICAgICBhdXRoUHJvbXB0V2lkdGg6IDQwMCxcbiAgICAgICAgYXV0aFByb21wdEhlaWdodDogNjAwLFxuICAgICAgICByZWZyZXNoOiB7XG4gICAgICAgICAgICBtb2RlOiBFbnVtcy5SZWZyZXNoTW9kZS5NYW51YWwsXG4gICAgICAgICAgICB0aW1lQmV0d2VlbkF1dG9tYXRpY1JlZnJlc2hlczogMzAwMCwgLy8gMyBzZWNvbmRzXG4gICAgICAgICAgICBtYXhpbXVtQ29uc2VjdXRpdmVBdXRvbWF0aWNSZWZyZXNoZXM6IDMsXG4gICAgICAgICAgICBhbGxvd01hbnVhbFJlZnJlc2hlc0FmdGVyQXV0b21hdGljUmVmcmVzaGVzOiB0cnVlXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBDb250ZW50VHlwZXMgPSB7XG4gICAgYXBwbGljYXRpb25Kc29uOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICBhcHBsaWNhdGlvblhXd3dGb3JtVXJsZW5jb2RlZDogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTZXBhcmF0aW9uRGVmaW5pdGlvbiB7XG4gICAgc3BhY2luZzogbnVtYmVyLFxuICAgIGxpbmVUaGlja25lc3M/OiBudW1iZXIsXG4gICAgbGluZUNvbG9yPzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUlucHV0IHtcbiAgICBpZD86IHN0cmluZztcbiAgICB2YWx1ZT86IHN0cmluZztcbiAgICB2YWxpZGF0ZVZhbHVlKCk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIERpY3Rpb25hcnk8VD4gPSB7IFtrZXk6IHN0cmluZ106IFQgfTtcblxuZXhwb3J0IGNsYXNzIFN0cmluZ1dpdGhTdWJzdGl0dXRpb25zIHtcbiAgICBwcml2YXRlIF9pc1Byb2Nlc3NlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgX29yaWdpbmFsPzogc3RyaW5nO1xuICAgIHByaXZhdGUgX3Byb2Nlc3NlZD86IHN0cmluZztcblxuICAgIGdldFJlZmVyZW5jZWRJbnB1dHMoaW5wdXRzOiBJSW5wdXRbXSwgcmVmZXJlbmNlZElucHV0czogRGljdGlvbmFyeTxJSW5wdXQ+KSB7XG4gICAgICAgIGlmICghcmVmZXJlbmNlZElucHV0cykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJlZmVyZW5jZWRJbnB1dHMgcGFyYW1ldGVyIGNhbm5vdCBiZSBudWxsLlwiKVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaW5wdXQgb2YgaW5wdXRzKSB7XG4gICAgICAgICAgICBsZXQgbWF0Y2hlcyA9IG5ldyBSZWdFeHAoXCJcXFxce3syfShcIiArIGlucHV0LmlkICsgXCIpLnZhbHVlXFxcXH17Mn1cIiwgXCJnaVwiKS5leGVjKDxzdHJpbmc+dGhpcy5fb3JpZ2luYWwpO1xuXG4gICAgICAgICAgICBpZiAobWF0Y2hlcyAhPSBudWxsICYmIGlucHV0LmlkKSB7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlZElucHV0c1tpbnB1dC5pZF0gPSBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN1YnN0aXR1dGVJbnB1dFZhbHVlcyhpbnB1dHM6IERpY3Rpb25hcnk8SUlucHV0PiwgY29udGVudFR5cGU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9wcm9jZXNzZWQgPSB0aGlzLl9vcmlnaW5hbDtcblxuICAgICAgICBpZiAodGhpcy5fb3JpZ2luYWwpIHtcbiAgICAgICAgICAgIGxldCByZWdFeCA9IC9cXHt7Mn0oW2EtejAtOV8kQF0rKS52YWx1ZVxcfXsyfS9naTtcbiAgICAgICAgICAgIGxldCBtYXRjaGVzO1xuXG4gICAgICAgICAgICB3aGlsZSAoKG1hdGNoZXMgPSByZWdFeC5leGVjKDxzdHJpbmc+dGhpcy5fb3JpZ2luYWwpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhpbnB1dHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PSBtYXRjaGVzWzFdLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaGVkSW5wdXQgPSBpbnB1dHNba2V5XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlRm9yUmVwbGFjZSA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkSW5wdXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUZvclJlcGxhY2UgPSBtYXRjaGVkSW5wdXQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50VHlwZSA9PT0gQ29udGVudFR5cGVzLmFwcGxpY2F0aW9uSnNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlRm9yUmVwbGFjZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlRm9yUmVwbGFjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVGb3JSZXBsYWNlID0gdmFsdWVGb3JSZXBsYWNlLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbnRlbnRUeXBlID09PSBDb250ZW50VHlwZXMuYXBwbGljYXRpb25YV3d3Rm9ybVVybGVuY29kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUZvclJlcGxhY2UgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWVGb3JSZXBsYWNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc2VkID0gKDxzdHJpbmc+dGhpcy5fcHJvY2Vzc2VkKS5yZXBsYWNlKG1hdGNoZXNbMF0sIHZhbHVlRm9yUmVwbGFjZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faXNQcm9jZXNzZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGdldE9yaWdpbmFsKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcmlnaW5hbDtcbiAgICB9XG5cbiAgICBnZXQoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Byb2Nlc3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29yaWdpbmFsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NlZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldCh2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2lzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3BhY2luZ0RlZmluaXRpb24ge1xuICAgIGxlZnQ6IG51bWJlciA9IDA7XG4gICAgdG9wOiBudW1iZXIgPSAwO1xuICAgIHJpZ2h0OiBudW1iZXIgPSAwO1xuICAgIGJvdHRvbTogbnVtYmVyID0gMDtcblxuICAgIGNvbnN0cnVjdG9yKHRvcDogbnVtYmVyID0gMCxcbiAgICAgICAgcmlnaHQ6IG51bWJlciA9IDAsXG4gICAgICAgIGJvdHRvbTogbnVtYmVyID0gMCxcbiAgICAgICAgbGVmdDogbnVtYmVyID0gMCkge1xuICAgICAgICB0aGlzLnRvcCA9IHRvcDtcbiAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgICAgICB0aGlzLmJvdHRvbSA9IGJvdHRvbTtcbiAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYWRkaW5nRGVmaW5pdGlvbiB7XG4gICAgdG9wOiBFbnVtcy5TcGFjaW5nID0gRW51bXMuU3BhY2luZy5Ob25lO1xuICAgIHJpZ2h0OiBFbnVtcy5TcGFjaW5nID0gRW51bXMuU3BhY2luZy5Ob25lO1xuICAgIGJvdHRvbTogRW51bXMuU3BhY2luZyA9IEVudW1zLlNwYWNpbmcuTm9uZTtcbiAgICBsZWZ0OiBFbnVtcy5TcGFjaW5nID0gRW51bXMuU3BhY2luZy5Ob25lO1xuXG4gICAgY29uc3RydWN0b3IodG9wOiBFbnVtcy5TcGFjaW5nID0gRW51bXMuU3BhY2luZy5Ob25lLFxuICAgICAgICByaWdodDogRW51bXMuU3BhY2luZyA9IEVudW1zLlNwYWNpbmcuTm9uZSxcbiAgICAgICAgYm90dG9tOiBFbnVtcy5TcGFjaW5nID0gRW51bXMuU3BhY2luZy5Ob25lLFxuICAgICAgICBsZWZ0OiBFbnVtcy5TcGFjaW5nID0gRW51bXMuU3BhY2luZy5Ob25lKSB7XG4gICAgICAgIHRoaXMudG9wID0gdG9wO1xuICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgICAgIHRoaXMuYm90dG9tID0gYm90dG9tO1xuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNpemVBbmRVbml0IHtcbiAgICBwaHlzaWNhbFNpemU6IG51bWJlcjtcbiAgICB1bml0OiBFbnVtcy5TaXplVW5pdDtcblxuICAgIHN0YXRpYyBwYXJzZShpbnB1dDogc3RyaW5nLCByZXF1aXJlVW5pdFNwZWNpZmllcjogYm9vbGVhbiA9IGZhbHNlKTogU2l6ZUFuZFVuaXQge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IFNpemVBbmRVbml0KDAsIEVudW1zLlNpemVVbml0LldlaWdodCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmVzdWx0LnBoeXNpY2FsU2l6ZSA9IGlucHV0O1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbGV0IHJlZ0V4cCA9IC9eKFswLTldKykocHh8XFwqKT8kL2c7XG4gICAgICAgICAgICBsZXQgbWF0Y2hlcyA9IHJlZ0V4cC5leGVjKGlucHV0KTtcbiAgICAgICAgICAgIGxldCBleHBlY3RlZE1hdGNoQ291bnQgPSByZXF1aXJlVW5pdFNwZWNpZmllciA/IDMgOiAyO1xuXG4gICAgICAgICAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA+PSBleHBlY3RlZE1hdGNoQ291bnQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucGh5c2ljYWxTaXplID0gcGFyc2VJbnQobWF0Y2hlc1sxXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPT0gMykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlc1syXSA9PSBcInB4XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC51bml0ID0gRW51bXMuU2l6ZVVuaXQuUGl4ZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzaXplOiBcIiArIGlucHV0KTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihwaHlzaWNhbFNpemU6IG51bWJlciwgdW5pdDogRW51bXMuU2l6ZVVuaXQpIHtcbiAgICAgICAgdGhpcy5waHlzaWNhbFNpemUgPSBwaHlzaWNhbFNpemU7XG4gICAgICAgIHRoaXMudW5pdCA9IHVuaXQ7XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSZXNvdXJjZUluZm9ybWF0aW9uIHtcbiAgICB1cmw6IHN0cmluZztcbiAgICBtaW1lVHlwZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEZhc3QgVVVJRCBnZW5lcmF0b3IsIFJGQzQxMjIgdmVyc2lvbiA0IGNvbXBsaWFudC5cbiAqIEBhdXRob3IgSmVmZiBXYXJkIChqY3dhcmQuY29tKS5cbiAqIEBsaWNlbnNlIE1JVCBsaWNlbnNlXG4gKiBAbGluayBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9ob3ctdG8tY3JlYXRlLWEtZ3VpZC11dWlkLWluLWphdmFzY3JpcHQvMjE5NjMxMzYjMjE5NjMxMzZcbiAqKi9cbmV4cG9ydCBjbGFzcyBVVUlEIHtcbiAgICBwcml2YXRlIHN0YXRpYyBsdXQ6IHN0cmluZ1tdID0gW107XG5cbiAgICBzdGF0aWMgZ2VuZXJhdGUoKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGQwID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuICAgICAgICBsZXQgZDEgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG4gICAgICAgIGxldCBkMiA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcbiAgICAgICAgbGV0IGQzID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuXG4gICAgICAgIHJldHVybiBVVUlELmx1dFtkMCAmIDB4ZmZdICsgVVVJRC5sdXRbZDAgPj4gOCAmIDB4ZmZdICsgVVVJRC5sdXRbZDAgPj4gMTYgJiAweGZmXSArIFVVSUQubHV0W2QwID4+IDI0ICYgMHhmZl0gKyAnLScgK1xuICAgICAgICAgICAgVVVJRC5sdXRbZDEgJiAweGZmXSArIFVVSUQubHV0W2QxID4+IDggJiAweGZmXSArICctJyArIFVVSUQubHV0W2QxID4+IDE2ICYgMHgwZiB8IDB4NDBdICsgVVVJRC5sdXRbZDEgPj4gMjQgJiAweGZmXSArICctJyArXG4gICAgICAgICAgICBVVUlELmx1dFtkMiAmIDB4M2YgfCAweDgwXSArIFVVSUQubHV0W2QyID4+IDggJiAweGZmXSArICctJyArIFVVSUQubHV0W2QyID4+IDE2ICYgMHhmZl0gKyBVVUlELmx1dFtkMiA+PiAyNCAmIDB4ZmZdICtcbiAgICAgICAgICAgIFVVSUQubHV0W2QzICYgMHhmZl0gKyBVVUlELmx1dFtkMyA+PiA4ICYgMHhmZl0gKyBVVUlELmx1dFtkMyA+PiAxNiAmIDB4ZmZdICsgVVVJRC5sdXRbZDMgPj4gMjQgJiAweGZmXTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgICAgICAgVVVJRC5sdXRbaV0gPSAoaSA8IDE2ID8gJzAnIDogJycpICsgaS50b1N0cmluZygxNik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblVVSUQuaW5pdGlhbGl6ZSgpO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmV4cG9ydCBjbGFzcyBTdHJpbmdzIHtcbiAgICBzdGF0aWMgcmVhZG9ubHkgZXJyb3JzID0ge1xuICAgICAgICB1bmtub3duRWxlbWVudFR5cGU6ICh0eXBlTmFtZTogc3RyaW5nKSA9PiBgVW5rbm93biBlbGVtZW50IHR5cGUgXCIke3R5cGVOYW1lfVwiLiBGYWxsYmFjayB3aWxsIGJlIHVzZWQgaWYgcHJlc2VudC5gLFxuICAgICAgICB1bmtub3duQWN0aW9uVHlwZTogKHR5cGVOYW1lOiBzdHJpbmcpID0+IGBVbmtub3duIGFjdGlvbiB0eXBlIFwiJHt0eXBlTmFtZX1cIi4gRmFsbGJhY2sgd2lsbCBiZSB1c2VkIGlmIHByZXNlbnQuYCxcbiAgICAgICAgZWxlbWVudFR5cGVOb3RBbGxvd2VkOiAodHlwZU5hbWU6IHN0cmluZykgPT4gYEVsZW1lbnQgdHlwZSBcIiR7dHlwZU5hbWV9XCIgaXMgbm90IGFsbG93ZWQgaW4gdGhpcyBjb250ZXh0LmAsXG4gICAgICAgIGFjdGlvblR5cGVOb3RBbGxvd2VkOiAodHlwZU5hbWU6IHN0cmluZykgPT4gYEFjdGlvbiB0eXBlIFwiJHt0eXBlTmFtZX1cIiBpcyBub3QgYWxsb3dlZCBpbiB0aGlzIGNvbnRleHQuYCxcbiAgICAgICAgaW52YWxpZFByb3BlcnR5VmFsdWU6ICh2YWx1ZTogYW55LCBwcm9wZXJ0eU5hbWU6IHN0cmluZykgPT4gYEludmFsaWQgdmFsdWUgXCIke3ZhbHVlfVwiIGZvciBwcm9wZXJ0eSBcIiR7cHJvcGVydHlOYW1lfVwiLmAsXG4gICAgICAgIHNob3dDYXJkTXVzdEhhdmVDYXJkOiAoKSA9PiBgXCJBbiBBY3Rpb24uU2hvd0NhcmQgbXVzdCBoYXZlIGl0cyBcImNhcmRcIiBwcm9wZXJ0eSBzZXQgdG8gYSB2YWxpZCBBZGFwdGl2ZUNhcmQgb2JqZWN0LmAsXG4gICAgICAgIGludmFsaWRDb2x1bW5XaWR0aDogKGludmFsaWRXaWR0aDogc3RyaW5nKSA9PiBgSW52YWxpZCBjb2x1bW4gd2lkdGggXCIke2ludmFsaWRXaWR0aH1cIiAtIGRlZmF1bHRpbmcgdG8gXCJhdXRvXCIuYCxcbiAgICAgICAgaW52YWxpZENhcmRWZXJzaW9uOiAoZGVmYXVsdGluZ1RvVmVyc2lvbjogc3RyaW5nKSA9PiBgSW52YWxpZCBjYXJkIHZlcnNpb24uIERlZmF1bHRpbmcgdG8gXCIke2RlZmF1bHRpbmdUb1ZlcnNpb259XCIuYCxcbiAgICAgICAgaW52YWxpZFZlcnNpb25TdHJpbmc6ICh2ZXJzaW9uU3RyaW5nOiBzdHJpbmcpID0+IGBJbnZhbGlkIHZlcnNpb24gc3RyaW5nIFwiJHt2ZXJzaW9uU3RyaW5nfVwiLmAsXG4gICAgICAgIHByb3BlcnR5VmFsdWVOb3RTdXBwb3J0ZWQ6ICh2YWx1ZTogYW55LCBwcm9wZXJ0eU5hbWU6IHN0cmluZywgc3VwcG9ydGVkSW5WZXJzaW9uOiBzdHJpbmcsIHZlcnNpb25Vc2VkOiBzdHJpbmcpID0+IGBWYWx1ZSBcIiR7dmFsdWV9XCIgZm9yIHByb3BlcnR5IFwiJHtwcm9wZXJ0eU5hbWV9XCIgaXMgc3VwcG9ydGVkIGluIHZlcnNpb24gJHtzdXBwb3J0ZWRJblZlcnNpb259LCBidXQgeW91IGFyZSB1c2luZyB2ZXJzaW9uICR7dmVyc2lvblVzZWR9LmAsXG4gICAgICAgIHByb3BlcnR5Tm90U3VwcG9ydGVkOiAocHJvcGVydHlOYW1lOiBzdHJpbmcsIHN1cHBvcnRlZEluVmVyc2lvbjogc3RyaW5nLCB2ZXJzaW9uVXNlZDogc3RyaW5nKSA9PiBgUHJvcGVydHkgXCIke3Byb3BlcnR5TmFtZX1cIiBpcyBzdXBwb3J0ZWQgaW4gdmVyc2lvbiAke3N1cHBvcnRlZEluVmVyc2lvbn0sIGJ1dCB5b3UgYXJlIHVzaW5nIHZlcnNpb24gJHt2ZXJzaW9uVXNlZH0uYCxcbiAgICAgICAgaW5kZXhPdXRPZlJhbmdlOiAoaW5kZXg6IG51bWJlcikgPT4gYEluZGV4IG91dCBvZiByYW5nZSAoJHtpbmRleH0pLmAsXG4gICAgICAgIGVsZW1lbnRDYW5ub3RCZVVzZWRBc0lubGluZTogKCkgPT4gXCJSaWNoVGV4dEJsb2NrLmFkZElubGluZTogdGhlIHNwZWNpZmllZCBjYXJkIGVsZW1lbnQgY2Fubm90IGJlIHVzZWQgYXMgYSBSaWNoVGV4dEJsb2NrIGlubGluZS5cIixcbiAgICAgICAgaW5saW5lQWxyZWFkeVBhcmVudGVkOiAoKSA9PiBcIlJpY2hUZXh0QmxvY2suYWRkSW5saW5lOiB0aGUgc3BlY2lmaWVkIGlubGluZSBhbHJlYWR5IGJlbG9uZ3MgdG8gYW5vdGhlciBSaWNoVGV4dEJsb2NrLlwiLFxuICAgICAgICBpbnRlcmFjdGl2aXR5Tm90QWxsb3dlZDogKCkgPT4gXCJJbnRlcmFjdGl2aXR5IGlzIG5vdCBhbGxvd2VkLlwiLFxuICAgICAgICBpbnB1dHNNdXN0SGF2ZVVuaXF1ZUlkOiAoKSA9PiBcIkFsbCBpbnB1dHMgbXVzdCBoYXZlIGEgdW5pcXVlIElkLlwiLFxuICAgICAgICBjaG9pY2VTZXRNdXN0SGF2ZUF0TGVhc3RPbmVDaG9pY2U6ICgpID0+IFwiQW4gSW5wdXQuQ2hvaWNlU2V0IG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgY2hvaWNlIGRlZmluZWQuXCIsXG4gICAgICAgIGNob2ljZVNldENob2ljZXNNdXN0SGF2ZVRpdGxlQW5kVmFsdWU6ICgpID0+IFwiQWxsIGNob2ljZXMgaW4gYW4gSW5wdXQuQ2hvaWNlU2V0IG11c3QgaGF2ZSB0aGVpciB0aXRsZSBhbmQgdmFsdWUgcHJvcGVydGllcyBzZXQuXCIsXG4gICAgICAgIHByb3BlcnR5TXVzdEJlU2V0OiAocHJvcGVydHlOYW1lOiBzdHJpbmcpID0+IGBQcm9wZXJ0eSBcIiR7cHJvcGVydHlOYW1lfVwiIG11c3QgYmUgc2V0LmAsXG4gICAgICAgIGFjdGlvbkh0dHBIZWFkZXJzTXVzdEhhdmVOYW1lQW5kVmFsdWU6ICgpID0+IFwiQWxsIGhlYWRlcnMgb2YgYW4gQWN0aW9uLkh0dHAgbXVzdCBoYXZlIHRoZWlyIG5hbWUgYW5kIHZhbHVlIHByb3BlcnRpZXMgc2V0LlwiLFxuICAgICAgICB0b29NYW55QWN0aW9uczogKG1heGltdW1BY3Rpb25zOiBudW1iZXIpID0+IGBNYXhpbXVtIG51bWJlciBvZiBhY3Rpb25zIGV4Y2VlZGVkICgke21heGltdW1BY3Rpb25zfSkuYCxcbiAgICAgICAgY29sdW1uQWxyZWFkeUJlbG9uZ3NUb0Fub3RoZXJTZXQ6ICgpID0+IFwiVGhpcyBjb2x1bW4gYWxyZWFkeSBiZWxvbmdzIHRvIGFub3RoZXIgQ29sdW1uU2V0LlwiLFxuICAgICAgICBpbnZhbGlkQ2FyZFR5cGU6ICgpID0+IGBJbnZhbGlkIG9yIG1pc3NpbmcgY2FyZCB0eXBlLiBNYWtlIHN1cmUgdGhlIGNhcmQncyB0eXBlIHByb3BlcnR5IGlzIHNldCB0byBcIkFkYXB0aXZlQ2FyZFwiLmAsXG4gICAgICAgIHVuc3VwcG9ydGVkQ2FyZFZlcnNpb246ICh2ZXJzaW9uOiBzdHJpbmcsIG1heFN1cHBvcnRlZFZlcnNpb246IHN0cmluZykgPT4gYFRoZSBzcGVjaWZpZWQgY2FyZCB2ZXJzaW9uICgke3ZlcnNpb259KSBpcyBub3Qgc3VwcG9ydGVkLiBUaGUgbWF4aW11bSBzdXBwb3J0ZWQgY2FyZCB2ZXJzaW9uIGlzICR7bWF4U3VwcG9ydGVkVmVyc2lvbn0uYCxcbiAgICAgICAgZHVwbGljYXRlSWQ6IChpZDogc3RyaW5nKSA9PiBgRHVwbGljYXRlIElkIFwiJHtpZH1cIi5gLFxuICAgICAgICBtYXJrZG93blByb2Nlc3NpbmdOb3RFbmFibGVkOiAoKSA9PiBcIk1hcmtkb3duIHByb2Nlc3NpbmcgaXNuJ3QgZW5hYmxlZC4gUGxlYXNlIHNlZSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9hZGFwdGl2ZWNhcmRzI3N1cHBvcnRpbmctbWFya2Rvd25cIixcbiAgICAgICAgcHJvY2Vzc01hcmtkb3duRXZlbnRSZW1vdmVkOiAoKSA9PiBcIlRoZSBwcm9jZXNzTWFya2Rvd24gZXZlbnQgaGFzIGJlZW4gcmVtb3ZlZC4gUGxlYXNlIHVwZGF0ZSB5b3VyIGNvZGUgYW5kIHNldCBvblByb2Nlc3NNYXJrZG93biBpbnN0ZWFkLlwiLFxuICAgICAgICBlbGVtZW50QWxyZWFkeVBhcmVudGVkOiAoKSA9PiBcIlRoZSBlbGVtZW50IGFscmVhZHkgYmVsb25ncyB0byBhbm90aGVyIGNvbnRhaW5lci5cIixcbiAgICAgICAgYWN0aW9uQWxyZWFkeVBhcmVudGVkOiAoKSA9PiBcIlRoZSBhY3Rpb24gYWxyZWFkeSBiZWxvbmdzIHRvIGFub3RoZXIgZWxlbWVudC5cIixcbiAgICAgICAgZWxlbWVudFR5cGVOb3RTdGFuZGFsb25lOiAodHlwZU5hbWU6IHN0cmluZykgPT4gYEVsZW1lbnRzIG9mIHR5cGUgJHt0eXBlTmFtZX0gY2Fubm90IGJlIHVzZWQgYXMgc3RhbmRhbG9uZSBlbGVtZW50cy5gXG4gICAgfTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgbWFnaWNDb2RlSW5wdXRDYXJkID0ge1xuICAgICAgICB0cnlBZ2FpbjogKCkgPT4gXCJUaGF0IGRpZG4ndCB3b3JrLi4uIGxldCdzIHRyeSBhZ2Fpbi5cIixcbiAgICAgICAgcGxlYXNlTG9naW46ICgpID0+IFwiUGxlYXNlIGxvZ2luIGluIHRoZSBwb3B1cC4gWW91IHdpbGwgb2J0YWluIGEgbWFnaWMgY29kZS4gUGFzdGUgdGhhdCBjb2RlIGJlbG93IGFuZCBzZWxlY3QgXFxcIlN1Ym1pdFxcXCJcIixcbiAgICAgICAgZW50ZXJNYWdpY0NvZGU6ICgpID0+IFwiRW50ZXIgbWFnaWMgY29kZVwiLFxuICAgICAgICBwbGVhc2VFbnRlck1hZ2ljQ29kZVlvdVJlY2VpdmVkOiAoKSA9PiBcIlBsZWFzZSBlbnRlciB0aGUgbWFnaWMgY29kZSB5b3UgcmVjZWl2ZWQuXCIsXG4gICAgICAgIHN1Ym1pdDogKCkgPT4gXCJTdWJtaXRcIixcbiAgICAgICAgY2FuY2VsOiAoKSA9PiBcIkNhbmNlbFwiLFxuICAgICAgICBzb21ldGhpbmdXZW50V3Jvbmc6ICgpID0+IFwiU29tZXRoaW5nIHdlbnQgd3JvbmcuIFRoaXMgYWN0aW9uIGNhbid0IGJlIGhhbmRsZWQuXCIsXG4gICAgICAgIGF1dGhlbnRpY2F0aW9uRmFpbGVkOiAoKSA9PiBcIkF1dGhlbnRpY2F0aW9uIGZhaWxlZC5cIlxuICAgIH07XG4gICAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWUgPSB7XG4gICAgICAgIGF1dG9tYXRpY1JlZnJlc2hQYXVzZWQ6ICgpID0+IFwiQXV0b21hdGljIHJlZnJlc2ggcGF1c2VkLlwiLFxuICAgICAgICBjbGNrVG9SZXN0YXJ0QXV0b21hdGljUmVmcmVzaDogKCkgPT4gXCJDbGljayB0byByZXN0YXJ0LlwiLFxuICAgICAgICByZWZyZXNoVGhpc0NhcmQ6ICgpID0+IFwiUmVmcmVzaCB0aGlzIGNhcmRcIlxuICAgIH07XG4gICAgc3RhdGljIHJlYWRvbmx5IGhpbnRzID0ge1xuICAgICAgICBkb250VXNlV2VpZ2h0ZWRBbmRTdHJlY3RoZWRDb2x1bW5zSW5TYW1lU2V0OiAoKSA9PiBcIkl0IGlzIG5vdCByZWNvbW1lbmRlZCB0byB1c2Ugd2VpZ2h0ZWQgYW5kIHN0cmV0Y2hlZCBjb2x1bW5zIGluIHRoZSBzYW1lIENvbHVtblNldCwgYmVjYXVzZSBpbiBzdWNoIGEgc2l0dWF0aW9uIHN0cmV0Y2hlZCBjb2x1bW5zIHdpbGwgYWx3YXlzIGdldCB0aGUgbWluaW11bSBhbW91bnQgb2Ygc3BhY2UuXCJcbiAgICB9O1xuICAgIHN0YXRpYyByZWFkb25seSBkZWZhdWx0cyA9IHtcbiAgICAgICAgaW5saW5lQWN0aW9uVGl0bGU6ICgpID0+IFwiSW5saW5lIEFjdGlvblwiLFxuICAgICAgICBvdmVyZmxvd0J1dHRvblRleHQ6ICgpID0+IFwiLi4uXCIsXG4gICAgICAgIG1lZGlhUGxheWVyQXJpYUxhYmVsOiAoKSA9PiBcIk1lZGlhIGNvbnRlbnRcIixcbiAgICAgICAgbWVkaWFQbGF5ZXJQbGF5TWVkaWE6ICgpID0+IFwiUGxheSBtZWRpYVwiXG4gICAgfTtcbn1cbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgQ2FyZEVsZW1lbnQsIFN0eWxhYmxlQ2FyZEVsZW1lbnRDb250YWluZXIsIFNlcmlhbGl6YXRpb25Db250ZXh0LCBDb250YWluZXIsIENvbnRhaW5lclN0eWxlUHJvcGVydHkgfSBmcm9tIFwiLi9jYXJkLWVsZW1lbnRzXCI7XG5pbXBvcnQgeyBIb3Jpem9udGFsQWxpZ25tZW50LCBWZXJ0aWNhbEFsaWdubWVudCwgU2l6ZVVuaXQsIFZhbGlkYXRpb25FdmVudCwgVHlwZUVycm9yVHlwZSwgU3BhY2luZyB9IGZyb20gXCIuL2VudW1zXCI7XG5pbXBvcnQgeyBUZXh0U3R5bGVEZWZpbml0aW9uIH0gZnJvbSBcIi4vaG9zdC1jb25maWdcIjtcbmltcG9ydCB7IEdsb2JhbFJlZ2lzdHJ5IH0gZnJvbSBcIi4vcmVnaXN0cnlcIjtcbmltcG9ydCB7IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCwgQm9vbFByb3BlcnR5LCBDdXN0b21Qcm9wZXJ0eSwgRW51bVByb3BlcnR5LCBwcm9wZXJ0eSwgUHJvcGVydHlCYWcsXG4gICAgUHJvcGVydHlEZWZpbml0aW9uLCBTZXJpYWxpemFibGVPYmplY3QsIFNlcmlhbGl6YWJsZU9iamVjdENvbGxlY3Rpb25Qcm9wZXJ0eSwgVmVyc2lvbnMgfSBmcm9tIFwiLi9zZXJpYWxpemF0aW9uXCI7XG5pbXBvcnQgeyBTaXplQW5kVW5pdCwgUGFkZGluZ0RlZmluaXRpb24gfSBmcm9tIFwiLi9zaGFyZWRcIjtcbmltcG9ydCB7IFN0cmluZ3MgfSBmcm9tIFwiLi9zdHJpbmdzXCI7XG5pbXBvcnQgeyBzdHJpbmdUb0Nzc0NvbG9yIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIFRhYmxlQ29sdW1uRGVmaW5pdGlvbiBleHRlbmRzIFNlcmlhbGl6YWJsZU9iamVjdCB7XG4gICAgLy8jcmVnaW9uIFNjaGVtYVxuXG4gICAgc3RhdGljIHJlYWRvbmx5IGhvcml6b250YWxDZWxsQ29udGVudEFsaWdubWVudFByb3BlcnR5ID0gbmV3IEVudW1Qcm9wZXJ0eShWZXJzaW9ucy52MV81LCBcImhvcml6b250YWxDZWxsQ29udGVudEFsaWdubWVudFwiLCBIb3Jpem9udGFsQWxpZ25tZW50KTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgdmVydGljYWxDZWxsQ29udGVudEFsaWdubWVudFByb3BlcnR5ID0gbmV3IEVudW1Qcm9wZXJ0eShWZXJzaW9ucy52MV81LCBcInZlcnRpY2FsQ2VsbENvbnRlbnRBbGlnbm1lbnRcIiwgVmVydGljYWxBbGlnbm1lbnQpO1xuXG4gICAgc3RhdGljIHJlYWRvbmx5IHdpZHRoUHJvcGVydHkgPSBuZXcgQ3VzdG9tUHJvcGVydHk8U2l6ZUFuZFVuaXQ+KFxuICAgICAgICBWZXJzaW9ucy52MV81LFxuICAgICAgICBcIndpZHRoXCIsXG4gICAgICAgIChzZW5kZXI6IFNlcmlhbGl6YWJsZU9iamVjdCwgcHJvcGVydHk6IFByb3BlcnR5RGVmaW5pdGlvbiwgc291cmNlOiBQcm9wZXJ0eUJhZywgY29udGV4dDogQmFzZVNlcmlhbGl6YXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OiBTaXplQW5kVW5pdCA9IHByb3BlcnR5LmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHNvdXJjZVtwcm9wZXJ0eS5uYW1lXTtcbiAgICAgICAgICAgIGxldCBpbnZhbGlkV2lkdGggPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFNpemVBbmRVbml0KHZhbHVlLCBTaXplVW5pdC5XZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gU2l6ZUFuZFVuaXQucGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkV2lkdGggPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGludmFsaWRXaWR0aCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbnZhbGlkV2lkdGgpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxvZ1BhcnNlRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgIHNlbmRlcixcbiAgICAgICAgICAgICAgICAgICAgVmFsaWRhdGlvbkV2ZW50LkludmFsaWRQcm9wZXJ0eVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBTdHJpbmdzLmVycm9ycy5pbnZhbGlkQ29sdW1uV2lkdGgodmFsdWUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgKHNlbmRlcjogU2VyaWFsaXphYmxlT2JqZWN0LCBwcm9wZXJ0eTogUHJvcGVydHlEZWZpbml0aW9uLCB0YXJnZXQ6IFByb3BlcnR5QmFnLCB2YWx1ZTogU2l6ZUFuZFVuaXQsIGNvbnRleHQ6IEJhc2VTZXJpYWxpemF0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlLnVuaXQgPT09IFNpemVVbml0LlBpeGVsKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zZXJpYWxpemVWYWx1ZSh0YXJnZXQsIFwid2lkdGhcIiwgdmFsdWUucGh5c2ljYWxTaXplICsgXCJweFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc2VyaWFsaXplTnVtYmVyKHRhcmdldCwgXCJ3aWR0aFwiLCB2YWx1ZS5waHlzaWNhbFNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBuZXcgU2l6ZUFuZFVuaXQoMSwgU2l6ZVVuaXQuV2VpZ2h0KSk7XG5cbiAgICBAcHJvcGVydHkoVGFibGVDb2x1bW5EZWZpbml0aW9uLmhvcml6b250YWxDZWxsQ29udGVudEFsaWdubWVudFByb3BlcnR5KVxuICAgIGhvcml6b250YWxDZWxsQ29udGVudEFsaWdubWVudD86IEhvcml6b250YWxBbGlnbm1lbnQ7XG5cbiAgICBAcHJvcGVydHkoVGFibGVDb2x1bW5EZWZpbml0aW9uLnZlcnRpY2FsQ2VsbENvbnRlbnRBbGlnbm1lbnRQcm9wZXJ0eSlcbiAgICB2ZXJ0aWNhbENlbGxDb250ZW50QWxpZ25tZW50PzogVmVydGljYWxBbGlnbm1lbnQ7XG5cbiAgICBAcHJvcGVydHkoVGFibGVDb2x1bW5EZWZpbml0aW9uLndpZHRoUHJvcGVydHkpXG4gICAgd2lkdGg6IFNpemVBbmRVbml0ID0gbmV3IFNpemVBbmRVbml0KDEsIFNpemVVbml0LldlaWdodCk7XG5cbiAgICBnZXRTY2hlbWFLZXkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiQ29sdW1uRGVmaW5pdGlvblwiO1xuICAgIH1cblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgY29tcHV0ZWRXaWR0aDogU2l6ZUFuZFVuaXQ7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdHlsYWJsZUNvbnRhaW5lcjxUIGV4dGVuZHMgQ2FyZEVsZW1lbnQ+IGV4dGVuZHMgU3R5bGFibGVDYXJkRWxlbWVudENvbnRhaW5lciB7XG4gICAgcHJpdmF0ZSBfaXRlbXM6IFRbXSA9IFtdO1xuXG4gICAgcHJpdmF0ZSBwYXJzZUl0ZW0oc291cmNlOiBhbnksIGNvbnRleHQ6IFNlcmlhbGl6YXRpb25Db250ZXh0KTogVCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LnBhcnNlQ2FyZE9iamVjdDxUPihcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICBbXSwgLy8gRm9yYmlkZGVuIHR5cGVzIG5vdCBzdXBwb3J0ZWQgZm9yIGVsZW1lbnRzIGZvciBub3dcbiAgICAgICAgICAgICF0aGlzLmlzRGVzaWduTW9kZSgpLFxuICAgICAgICAgICAgKHR5cGVOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVJdGVtSW5zdGFuY2UodHlwZU5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICh0eXBlTmFtZTogc3RyaW5nLCBlcnJvclR5cGU6IFR5cGVFcnJvclR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxvZ1BhcnNlRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgVmFsaWRhdGlvbkV2ZW50LkVsZW1lbnRUeXBlTm90QWxsb3dlZCxcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5ncy5lcnJvcnMuZWxlbWVudFR5cGVOb3RBbGxvd2VkKHR5cGVOYW1lKSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0Q29sbGVjdGlvblByb3BlcnR5TmFtZSgpOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGNyZWF0ZUl0ZW1JbnN0YW5jZSh0eXBlTmFtZTogc3RyaW5nKTogVCB8IHVuZGVmaW5lZDtcblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbEFkZEl0ZW0oaXRlbTogVCkge1xuICAgICAgICBpZiAoIWl0ZW0ucGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9pdGVtcy5wdXNoKGl0ZW0pO1xuXG4gICAgICAgICAgICBpdGVtLnNldFBhcmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihTdHJpbmdzLmVycm9ycy5lbGVtZW50QWxyZWFkeVBhcmVudGVkKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUmVtb3ZlSXRlbShpdGVtOiBUKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBpdGVtSW5kZXggPSB0aGlzLl9pdGVtcy5pbmRleE9mKGl0ZW0pO1xuXG4gICAgICAgIGlmIChpdGVtSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5faXRlbXMuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG5cbiAgICAgICAgICAgIGl0ZW0uc2V0UGFyZW50KHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGF5b3V0KCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFBhcnNlKHNvdXJjZTogYW55LCBjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFBhcnNlKHNvdXJjZSwgY29udGV4dCk7XG5cbiAgICAgICAgdGhpcy5faXRlbXMgPSBbXTtcblxuICAgICAgICBsZXQgaXRlbXMgPSBzb3VyY2VbdGhpcy5nZXRDb2xsZWN0aW9uUHJvcGVydHlOYW1lKCldO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW1zKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgICAgIGxldCBpbnN0YW5jZSA9IHRoaXMucGFyc2VJdGVtKGl0ZW0sIGNvbnRleHQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zLnB1c2goaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFRvSlNPTih0YXJnZXQ6IFByb3BlcnR5QmFnLCBjb250ZXh0OiBTZXJpYWxpemF0aW9uQ29udGV4dCkge1xuICAgICAgICBzdXBlci5pbnRlcm5hbFRvSlNPTih0YXJnZXQsIGNvbnRleHQpO1xuXG4gICAgICAgIGNvbnRleHQuc2VyaWFsaXplQXJyYXkodGFyZ2V0LCB0aGlzLmdldENvbGxlY3Rpb25Qcm9wZXJ0eU5hbWUoKSwgdGhpcy5faXRlbXMpO1xuICAgIH1cblxuICAgIHJlbW92ZUl0ZW0oaXRlbTogVCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbFJlbW92ZUl0ZW0oaXRlbSk7XG4gICAgfVxuXG4gICAgZ2V0SXRlbUNvdW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0SXRlbUF0KGluZGV4OiBudW1iZXIpOiBUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW2luZGV4XTtcbiAgICB9XG5cbiAgICBnZXRGaXJzdFZpc2libGVSZW5kZXJlZEl0ZW0oKTogVCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEl0ZW1Db3VudCgpID4gMCA/IHRoaXMuZ2V0SXRlbUF0KDApIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGdldExhc3RWaXNpYmxlUmVuZGVyZWRJdGVtKCk6IFQgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRJdGVtQ291bnQoKSA+IDAgPyB0aGlzLmdldEl0ZW1BdCh0aGlzLmdldEl0ZW1Db3VudCgpIC0gMSkgOiB1bmRlZmluZWQ7XG4gICAgfVxufVxuXG5leHBvcnQgdHlwZSBDZWxsVHlwZSA9IFwiZGF0YVwiIHwgXCJoZWFkZXJcIjtcblxuZXhwb3J0IGNsYXNzIFRhYmxlQ2VsbCBleHRlbmRzIENvbnRhaW5lciB7XG4gICAgcHJpdmF0ZSBfY29sdW1uSW5kZXg6IG51bWJlciA9IC0xO1xuICAgIHByaXZhdGUgX2NlbGxUeXBlOiBDZWxsVHlwZSA9IFwiZGF0YVwiO1xuXG4gICAgcHJvdGVjdGVkIGdldEhhc0JvcmRlcigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Um93LnBhcmVudFRhYmxlLnNob3dHcmlkTGluZXM7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFwcGx5Qm9yZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5yZW5kZXJlZEVsZW1lbnQgJiYgdGhpcy5nZXRIYXNCb3JkZXIoKSkge1xuICAgICAgICAgICAgbGV0IHN0eWxlRGVmaW5pdGlvbiA9IHRoaXMuaG9zdENvbmZpZy5jb250YWluZXJTdHlsZXMuZ2V0U3R5bGVCeU5hbWUodGhpcy5wYXJlbnRSb3cucGFyZW50VGFibGUuZ3JpZFN0eWxlKTtcblxuICAgICAgICAgICAgaWYgKHN0eWxlRGVmaW5pdGlvbi5ib3JkZXJDb2xvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvcmRlckNvbG9yID0gPHN0cmluZz5zdHJpbmdUb0Nzc0NvbG9yKHN0eWxlRGVmaW5pdGlvbi5ib3JkZXJDb2xvcik7XG5cbiAgICAgICAgICAgICAgICBpZiAoYm9yZGVyQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQuc3R5bGUuYm9yZGVyUmlnaHQgPSBcIjFweCBzb2xpZCBcIiArIGJvcmRlckNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudC5zdHlsZS5ib3JkZXJCb3R0b20gPSBcIjFweCBzb2xpZCBcIiArIGJvcmRlckNvbG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXREZWZhdWx0UGFkZGluZygpOiBQYWRkaW5nRGVmaW5pdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEhhc0JhY2tncm91bmQoKSB8fCB0aGlzLmdldEhhc0JvcmRlcigpID9cbiAgICAgICAgICAgIG5ldyBQYWRkaW5nRGVmaW5pdGlvbihcbiAgICAgICAgICAgICAgICBTcGFjaW5nLlNtYWxsLFxuICAgICAgICAgICAgICAgIFNwYWNpbmcuU21hbGwsXG4gICAgICAgICAgICAgICAgU3BhY2luZy5TbWFsbCxcbiAgICAgICAgICAgICAgICBTcGFjaW5nLlNtYWxsKSA6IHN1cGVyLmdldERlZmF1bHRQYWRkaW5nKCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUmVuZGVyKCk6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IGNlbGxFbGVtZW50ID0gc3VwZXIuaW50ZXJuYWxSZW5kZXIoKTtcblxuICAgICAgICBpZiAoY2VsbEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNlbGxFbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgdGhpcy5jZWxsVHlwZSA9PT0gXCJkYXRhXCIgPyBcImNlbGxcIiA6IFwiY29sdW1uaGVhZGVyXCIpO1xuICAgICAgICAgICAgY2VsbEVsZW1lbnQuc3R5bGUubWluV2lkdGggPSBcIjBcIjtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY2VsbFR5cGUgPT09IFwiaGVhZGVyXCIpIHtcbiAgICAgICAgICAgICAgICBjZWxsRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzY29wZVwiLCBcImNvbFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjZWxsRWxlbWVudDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2hvdWxkU2VyaWFsaXplKGNvbnRleHQ6IFNlcmlhbGl6YXRpb25Db250ZXh0KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGdldEpzb25UeXBlTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJUYWJsZUNlbGxcIjtcbiAgICB9XG5cbiAgICBnZXRFZmZlY3RpdmVUZXh0U3R5bGVEZWZpbml0aW9uKCk6IFRleHRTdHlsZURlZmluaXRpb24ge1xuICAgICAgICBpZiAodGhpcy5jZWxsVHlwZSA9PT0gXCJoZWFkZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdENvbmZpZy50ZXh0U3R5bGVzLmNvbHVtbkhlYWRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFZmZlY3RpdmVUZXh0U3R5bGVEZWZpbml0aW9uKCk7XG4gICAgfVxuXG4gICAgZ2V0RWZmZWN0aXZlSG9yaXpvbnRhbEFsaWdubWVudCgpOiBIb3Jpem9udGFsQWxpZ25tZW50IHtcbiAgICAgICAgaWYgKHRoaXMuaG9yaXpvbnRhbEFsaWdubWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3Jpem9udGFsQWxpZ25tZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucGFyZW50Um93Lmhvcml6b250YWxDZWxsQ29udGVudEFsaWdubWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnRSb3cuaG9yaXpvbnRhbENlbGxDb250ZW50QWxpZ25tZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29sdW1uSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgbGV0IGhvcml6b250YWxBbGlnbm1lbnQgPSB0aGlzLnBhcmVudFJvdy5wYXJlbnRUYWJsZS5nZXRDb2x1bW5BdCh0aGlzLmNvbHVtbkluZGV4KS5ob3Jpem9udGFsQ2VsbENvbnRlbnRBbGlnbm1lbnQ7XG5cbiAgICAgICAgICAgIGlmIChob3Jpem9udGFsQWxpZ25tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG9yaXpvbnRhbEFsaWdubWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnBhcmVudFJvdy5wYXJlbnRUYWJsZS5ob3Jpem9udGFsQ2VsbENvbnRlbnRBbGlnbm1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Um93LnBhcmVudFRhYmxlLmhvcml6b250YWxDZWxsQ29udGVudEFsaWdubWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFZmZlY3RpdmVIb3Jpem9udGFsQWxpZ25tZW50KCk7XG4gICAgfVxuXG4gICAgZ2V0RWZmZWN0aXZlVmVydGljYWxDb250ZW50QWxpZ25tZW50KCk6IFZlcnRpY2FsQWxpZ25tZW50IHtcbiAgICAgICAgaWYgKHRoaXMudmVydGljYWxDb250ZW50QWxpZ25tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZlcnRpY2FsQ29udGVudEFsaWdubWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnBhcmVudFJvdy52ZXJ0aWNhbENlbGxDb250ZW50QWxpZ25tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudFJvdy52ZXJ0aWNhbENlbGxDb250ZW50QWxpZ25tZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29sdW1uSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgbGV0IHZlcnRpY2FsQWxpZ25tZW50ID0gdGhpcy5wYXJlbnRSb3cucGFyZW50VGFibGUuZ2V0Q29sdW1uQXQodGhpcy5jb2x1bW5JbmRleCkudmVydGljYWxDZWxsQ29udGVudEFsaWdubWVudDtcblxuICAgICAgICAgICAgaWYgKHZlcnRpY2FsQWxpZ25tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmVydGljYWxBbGlnbm1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wYXJlbnRSb3cucGFyZW50VGFibGUudmVydGljYWxDZWxsQ29udGVudEFsaWdubWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnRSb3cucGFyZW50VGFibGUudmVydGljYWxDZWxsQ29udGVudEFsaWdubWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdXBlci5nZXRFZmZlY3RpdmVWZXJ0aWNhbENvbnRlbnRBbGlnbm1lbnQoKTtcbiAgICB9XG5cbiAgICBnZXQgY29sdW1uSW5kZXgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbkluZGV4O1xuICAgIH1cblxuICAgIGdldCBjZWxsVHlwZSgpOiBDZWxsVHlwZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jZWxsVHlwZTtcbiAgICB9XG5cbiAgICBnZXQgcGFyZW50Um93KCk6IFRhYmxlUm93IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50IGFzIFRhYmxlUm93O1xuICAgIH1cblxuICAgIGdldCBpc1N0YW5kYWxvbmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUYWJsZVJvdyBleHRlbmRzIFN0eWxhYmxlQ29udGFpbmVyPFRhYmxlQ2VsbD4ge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHN0YXRpYyByZWFkb25seSBzdHlsZVByb3BlcnR5ID0gbmV3IENvbnRhaW5lclN0eWxlUHJvcGVydHkoVmVyc2lvbnMudjFfNSwgXCJzdHlsZVwiKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgaG9yaXpvbnRhbENlbGxDb250ZW50QWxpZ25tZW50UHJvcGVydHkgPSBuZXcgRW51bVByb3BlcnR5KFZlcnNpb25zLnYxXzUsIFwiaG9yaXpvbnRhbENlbGxDb250ZW50QWxpZ25tZW50XCIsIEhvcml6b250YWxBbGlnbm1lbnQpO1xuICAgIHN0YXRpYyByZWFkb25seSB2ZXJ0aWNhbENlbGxDb250ZW50QWxpZ25tZW50UHJvcGVydHkgPSBuZXcgRW51bVByb3BlcnR5KFZlcnNpb25zLnYxXzUsIFwidmVydGljYWxDZWxsQ29udGVudEFsaWdubWVudFwiLCBWZXJ0aWNhbEFsaWdubWVudCk7XG5cbiAgICBAcHJvcGVydHkoVGFibGVSb3cuaG9yaXpvbnRhbENlbGxDb250ZW50QWxpZ25tZW50UHJvcGVydHkpXG4gICAgaG9yaXpvbnRhbENlbGxDb250ZW50QWxpZ25tZW50PzogSG9yaXpvbnRhbEFsaWdubWVudDtcblxuICAgIEBwcm9wZXJ0eShUYWJsZVJvdy52ZXJ0aWNhbENlbGxDb250ZW50QWxpZ25tZW50UHJvcGVydHkpXG4gICAgdmVydGljYWxDZWxsQ29udGVudEFsaWdubWVudD86IFZlcnRpY2FsQWxpZ25tZW50O1xuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICBwcm90ZWN0ZWQgZ2V0RGVmYXVsdFBhZGRpbmcoKTogUGFkZGluZ0RlZmluaXRpb24ge1xuICAgICAgICByZXR1cm4gbmV3IFBhZGRpbmdEZWZpbml0aW9uKFxuICAgICAgICAgICAgU3BhY2luZy5Ob25lLFxuICAgICAgICAgICAgU3BhY2luZy5Ob25lLFxuICAgICAgICAgICAgU3BhY2luZy5Ob25lLFxuICAgICAgICAgICAgU3BhY2luZy5Ob25lKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXBwbHlCYWNrZ3JvdW5kKCkge1xuICAgICAgICBpZiAodGhpcy5yZW5kZXJlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGxldCBzdHlsZURlZmluaXRpb24gPSB0aGlzLmhvc3RDb25maWcuY29udGFpbmVyU3R5bGVzLmdldFN0eWxlQnlOYW1lKHRoaXMuc3R5bGUsIHRoaXMuaG9zdENvbmZpZy5jb250YWluZXJTdHlsZXMuZ2V0U3R5bGVCeU5hbWUodGhpcy5kZWZhdWx0U3R5bGUpKTtcblxuICAgICAgICAgICAgaWYgKHN0eWxlRGVmaW5pdGlvbi5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiZ0NvbG9yID0gPHN0cmluZz5zdHJpbmdUb0Nzc0NvbG9yKHN0eWxlRGVmaW5pdGlvbi5iYWNrZ3JvdW5kQ29sb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGJnQ29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0Q29sbGVjdGlvblByb3BlcnR5TmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJjZWxsc1wiO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBjcmVhdGVJdGVtSW5zdGFuY2UodHlwZU5hbWU6IHN0cmluZyk6IFRhYmxlQ2VsbCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiAhdHlwZU5hbWUgfHwgdHlwZU5hbWUgPT09IFwiVGFibGVDZWxsXCIgPyBuZXcgVGFibGVDZWxsKCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIFxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFJlbmRlcigpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCBpc0ZpcnN0Um93ID0gdGhpcy5nZXRJc0ZpcnN0Um93KCk7XG4gICAgICAgIGxldCBjZWxsU3BhY2luZyA9IHRoaXMuaG9zdENvbmZpZy50YWJsZS5jZWxsU3BhY2luZztcblxuICAgICAgICBsZXQgcm93RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHJvd0VsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInJvd1wiKTtcbiAgICAgICAgcm93RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgIHJvd0VsZW1lbnQuc3R5bGUuZmxleERpcmVjdGlvbiA9IFwicm93XCI7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLm1pbih0aGlzLmdldEl0ZW1Db3VudCgpLCB0aGlzLnBhcmVudFRhYmxlLmdldENvbHVtbkNvdW50KCkpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjZWxsID0gdGhpcy5nZXRJdGVtQXQoaSk7XG5cbiAgICAgICAgICAgIC8vIENoZWF0aW5nIGEgYml0IGluIG9yZGVyIHRvIGtlZXAgY2VsbFR5cGUgcmVhZC1vbmx5XG4gICAgICAgICAgICBjZWxsW1wiX2NvbHVtbkluZGV4XCJdID0gaTtcbiAgICAgICAgICAgIGNlbGxbXCJfY2VsbFR5cGVcIl0gPSAodGhpcy5wYXJlbnRUYWJsZS5maXJzdFJvd0FzSGVhZGVycyAmJiBpc0ZpcnN0Um93KSA/IFwiaGVhZGVyXCIgOiBcImRhdGFcIjtcblxuICAgICAgICAgICAgbGV0IHJlbmRlcmVkQ2VsbCA9IGNlbGwucmVuZGVyKCk7XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJlZENlbGwpIHtcbiAgICAgICAgICAgICAgICBsZXQgY29sdW1uID0gdGhpcy5wYXJlbnRUYWJsZS5nZXRDb2x1bW5BdChpKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW4uY29tcHV0ZWRXaWR0aC51bml0ID09PSBTaXplVW5pdC5QaXhlbCkge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJlZENlbGwuc3R5bGUuZmxleCA9IFwiMCAwIFwiICsgY29sdW1uLmNvbXB1dGVkV2lkdGgucGh5c2ljYWxTaXplICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWRDZWxsLnN0eWxlLmZsZXggPSBcIjEgMSBcIiArIGNvbHVtbi5jb21wdXRlZFdpZHRoLnBoeXNpY2FsU2l6ZSArIFwiJVwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpID4gMCAmJiAhdGhpcy5wYXJlbnRUYWJsZS5zaG93R3JpZExpbmVzICYmIGNlbGxTcGFjaW5nID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJlZENlbGwuc3R5bGUubWFyZ2luTGVmdCA9IGNlbGxTcGFjaW5nICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJvd0VsZW1lbnQuYXBwZW5kQ2hpbGQocmVuZGVyZWRDZWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByb3dFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA+IDAgPyByb3dFbGVtZW50IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzaG91bGRTZXJpYWxpemUoY29udGV4dDogU2VyaWFsaXphdGlvbkNvbnRleHQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgYWRkQ2VsbChjZWxsOiBUYWJsZUNlbGwpIHtcbiAgICAgICAgdGhpcy5pbnRlcm5hbEFkZEl0ZW0oY2VsbCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlQ2VsbEF0KGNvbHVtbkluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKGNvbHVtbkluZGV4ID49IDAgJiYgY29sdW1uSW5kZXggPCB0aGlzLmdldEl0ZW1Db3VudCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVJdGVtKHRoaXMuZ2V0SXRlbUF0KGNvbHVtbkluZGV4KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZW5zdXJlSGFzRW5vdWdoQ2VsbHMoY2VsbENvdW50OiBudW1iZXIpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuZ2V0SXRlbUNvdW50KCkgPCBjZWxsQ291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkQ2VsbChuZXcgVGFibGVDZWxsKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0SnNvblR5cGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIlRhYmxlUm93XCI7XG4gICAgfVxuXG4gICAgZ2V0SXNGaXJzdFJvdygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50VGFibGUuZ2V0SXRlbUF0KDApID09PSB0aGlzO1xuICAgIH1cblxuICAgIGdldCBwYXJlbnRUYWJsZSgpOiBUYWJsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCBhcyBUYWJsZTtcbiAgICB9XG5cbiAgICBnZXQgaXNTdGFuZGFsb25lKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGFibGUgZXh0ZW5kcyBTdHlsYWJsZUNvbnRhaW5lcjxUYWJsZVJvdz4ge1xuICAgIC8vI3JlZ2lvbiBTY2hlbWFcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGNvbHVtbnNQcm9wZXJ0eSA9IG5ldyBTZXJpYWxpemFibGVPYmplY3RDb2xsZWN0aW9uUHJvcGVydHkoVmVyc2lvbnMudjFfNSwgXCJjb2x1bW5zXCIsIFRhYmxlQ29sdW1uRGVmaW5pdGlvbik7XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgZmlyc3RSb3dBc0hlYWRlcnNQcm9wZXJ0eSA9IG5ldyBCb29sUHJvcGVydHkoVmVyc2lvbnMudjFfNSwgXCJmaXJzdFJvd0FzSGVhZGVyc1wiLCB0cnVlKTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgc2hvd0dyaWRMaW5lc1Byb3BlcnR5ID0gbmV3IEJvb2xQcm9wZXJ0eShWZXJzaW9ucy52MV81LCBcInNob3dHcmlkTGluZXNcIiwgdHJ1ZSk7XG4gICAgc3RhdGljIHJlYWRvbmx5IGdyaWRTdHlsZVByb3BlcnR5ID0gbmV3IENvbnRhaW5lclN0eWxlUHJvcGVydHkoVmVyc2lvbnMudjFfNSwgXCJncmlkU3R5bGVcIik7XG4gICAgc3RhdGljIHJlYWRvbmx5IGhvcml6b250YWxDZWxsQ29udGVudEFsaWdubWVudFByb3BlcnR5ID0gbmV3IEVudW1Qcm9wZXJ0eShWZXJzaW9ucy52MV81LCBcImhvcml6b250YWxDZWxsQ29udGVudEFsaWdubWVudFwiLCBIb3Jpem9udGFsQWxpZ25tZW50KTtcbiAgICBzdGF0aWMgcmVhZG9ubHkgdmVydGljYWxDZWxsQ29udGVudEFsaWdubWVudFByb3BlcnR5ID0gbmV3IEVudW1Qcm9wZXJ0eShWZXJzaW9ucy52MV81LCBcInZlcnRpY2FsQ2VsbENvbnRlbnRBbGlnbm1lbnRcIiwgVmVydGljYWxBbGlnbm1lbnQpO1xuXG4gICAgQHByb3BlcnR5KFRhYmxlLmNvbHVtbnNQcm9wZXJ0eSlcbiAgICBwcml2YXRlIF9jb2x1bW5zOiBUYWJsZUNvbHVtbkRlZmluaXRpb25bXSA9IFtdO1xuXG4gICAgQHByb3BlcnR5KFRhYmxlLmZpcnN0Um93QXNIZWFkZXJzUHJvcGVydHkpXG4gICAgZmlyc3RSb3dBc0hlYWRlcnM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgQHByb3BlcnR5KFRhYmxlLnNob3dHcmlkTGluZXNQcm9wZXJ0eSlcbiAgICBzaG93R3JpZExpbmVzOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIEBwcm9wZXJ0eShUYWJsZS5ncmlkU3R5bGVQcm9wZXJ0eSlcbiAgICBnZXQgZ3JpZFN0eWxlKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCBzdHlsZSA9IHRoaXMuZ2V0VmFsdWUoVGFibGUuZ3JpZFN0eWxlUHJvcGVydHkpO1xuXG4gICAgICAgIGlmIChzdHlsZSAmJiB0aGlzLmhvc3RDb25maWcuY29udGFpbmVyU3R5bGVzLmdldFN0eWxlQnlOYW1lKHN0eWxlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBzZXQgZ3JpZFN0eWxlKHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZShUYWJsZS5ncmlkU3R5bGVQcm9wZXJ0eSwgdmFsdWUpO1xuICAgIH1cblxuICAgIEBwcm9wZXJ0eShUYWJsZS5ob3Jpem9udGFsQ2VsbENvbnRlbnRBbGlnbm1lbnRQcm9wZXJ0eSlcbiAgICBob3Jpem9udGFsQ2VsbENvbnRlbnRBbGlnbm1lbnQ/OiBIb3Jpem9udGFsQWxpZ25tZW50O1xuXG4gICAgQHByb3BlcnR5KFRhYmxlLnZlcnRpY2FsQ2VsbENvbnRlbnRBbGlnbm1lbnRQcm9wZXJ0eSlcbiAgICB2ZXJ0aWNhbENlbGxDb250ZW50QWxpZ25tZW50PzogVmVydGljYWxBbGlnbm1lbnQ7XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIHByaXZhdGUgZW5zdXJlUm93c0hhdmVFbm91Z2hDZWxscygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdldEl0ZW1Db3VudCgpOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0SXRlbUF0KGkpLmVuc3VyZUhhc0Vub3VnaENlbGxzKHRoaXMuZ2V0Q29sdW1uQ291bnQoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZUNlbGxzRnJvbUNvbHVtbihjb2x1bW5JbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5nZXRJdGVtQ291bnQoKTsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmdldEl0ZW1BdChpKS5yZW1vdmVDZWxsQXQoY29sdW1uSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldENvbGxlY3Rpb25Qcm9wZXJ0eU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwicm93c1wiO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBjcmVhdGVJdGVtSW5zdGFuY2UodHlwZU5hbWU6IHN0cmluZyk6IFRhYmxlUm93IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuICF0eXBlTmFtZSB8fCB0eXBlTmFtZSA9PT0gXCJUYWJsZVJvd1wiID8gbmV3IFRhYmxlUm93KCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGludGVybmFsUGFyc2Uoc291cmNlOiBQcm9wZXJ0eUJhZywgY29udGV4dDogU2VyaWFsaXphdGlvbkNvbnRleHQpIHtcbiAgICAgICAgc3VwZXIuaW50ZXJuYWxQYXJzZShzb3VyY2UsIGNvbnRleHQpO1xuXG4gICAgICAgIHRoaXMuZW5zdXJlUm93c0hhdmVFbm91Z2hDZWxscygpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbnRlcm5hbFJlbmRlcigpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmICh0aGlzLmdldEl0ZW1Db3VudCgpID4gMCkge1xuICAgICAgICAgICAgbGV0IHRvdGFsV2VpZ2h0czogbnVtYmVyID0gMDtcblxuICAgICAgICAgICAgZm9yIChsZXQgY29sdW1uIG9mIHRoaXMuX2NvbHVtbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLndpZHRoLnVuaXQgPT09IFNpemVVbml0LldlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbFdlaWdodHMgKz0gY29sdW1uLndpZHRoLnBoeXNpY2FsU2l6ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGNvbHVtbiBvZiB0aGlzLl9jb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi53aWR0aC51bml0ID09PSBTaXplVW5pdC5QaXhlbCkge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uY29tcHV0ZWRXaWR0aCA9IG5ldyBTaXplQW5kVW5pdChjb2x1bW4ud2lkdGgucGh5c2ljYWxTaXplLCBTaXplVW5pdC5QaXhlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uY29tcHV0ZWRXaWR0aCA9IG5ldyBTaXplQW5kVW5pdCgxMDAgLyB0b3RhbFdlaWdodHMgKiBjb2x1bW4ud2lkdGgucGh5c2ljYWxTaXplLCBTaXplVW5pdC5XZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHRhYmxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB0YWJsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInRhYmxlXCIpO1xuICAgICAgICAgICAgdGFibGVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgICAgIHRhYmxlRWxlbWVudC5zdHlsZS5mbGV4RGlyZWN0aW9uID0gXCJjb2x1bW5cIjtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0dyaWRMaW5lcykge1xuICAgICAgICAgICAgICAgIGxldCBzdHlsZURlZmluaXRpb24gPSB0aGlzLmhvc3RDb25maWcuY29udGFpbmVyU3R5bGVzLmdldFN0eWxlQnlOYW1lKHRoaXMuZ3JpZFN0eWxlKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdHlsZURlZmluaXRpb24uYm9yZGVyQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyQ29sb3IgPSA8c3RyaW5nPnN0cmluZ1RvQ3NzQ29sb3Ioc3R5bGVEZWZpbml0aW9uLmJvcmRlckNvbG9yKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvcmRlckNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUVsZW1lbnQuc3R5bGUuYm9yZGVyVG9wID0gXCIxcHggc29saWQgXCIgKyBib3JkZXJDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRWxlbWVudC5zdHlsZS5ib3JkZXJMZWZ0ID0gXCIxcHggc29saWQgXCIgKyBib3JkZXJDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGNlbGxTcGFjaW5nID0gdGhpcy5ob3N0Q29uZmlnLnRhYmxlLmNlbGxTcGFjaW5nO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ2V0SXRlbUNvdW50KCk7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCByZW5kZXJlZFJvdyA9IHRoaXMuZ2V0SXRlbUF0KGkpLnJlbmRlcigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlbmRlcmVkUm93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gMCAmJiAhdGhpcy5zaG93R3JpZExpbmVzICYmIGNlbGxTcGFjaW5nID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlcGFyYXRvclJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3JSb3cuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yUm93LnN0eWxlLmhlaWdodCA9IGNlbGxTcGFjaW5nICsgXCJweFwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoc2VwYXJhdG9yUm93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlRWxlbWVudC5hcHBlbmRDaGlsZChyZW5kZXJlZFJvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGFibGVFbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBhZGRDb2x1bW4oY29sdW1uOiBUYWJsZUNvbHVtbkRlZmluaXRpb24pIHtcbiAgICAgICAgdGhpcy5fY29sdW1ucy5wdXNoKGNvbHVtbik7XG5cbiAgICAgICAgdGhpcy5lbnN1cmVSb3dzSGF2ZUVub3VnaENlbGxzKCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlQ29sdW1uKGNvbHVtbjogVGFibGVDb2x1bW5EZWZpbml0aW9uKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuX2NvbHVtbnMuaW5kZXhPZihjb2x1bW4pO1xuXG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNlbGxzRnJvbUNvbHVtbihpbmRleCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2NvbHVtbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldENvbHVtbkNvdW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2x1bW5zLmxlbmd0aDtcbiAgICB9XG5cbiAgICBnZXRDb2x1bW5BdChpbmRleDogbnVtYmVyKTogVGFibGVDb2x1bW5EZWZpbml0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbnNbaW5kZXhdO1xuICAgIH1cblxuICAgIGFkZFJvdyhyb3c6IFRhYmxlUm93KSB7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxBZGRJdGVtKHJvdyk7XG5cbiAgICAgICAgcm93LmVuc3VyZUhhc0Vub3VnaENlbGxzKHRoaXMuZ2V0Q29sdW1uQ291bnQoKSk7XG4gICAgfVxuXG4gICAgZ2V0SnNvblR5cGVOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIlRhYmxlXCI7XG4gICAgfVxufVxuXG5HbG9iYWxSZWdpc3RyeS5kZWZhdWx0RWxlbWVudHMucmVnaXN0ZXIoXCJUYWJsZVwiLCBUYWJsZSwgVmVyc2lvbnMudjFfNSk7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmFic3RyYWN0IGNsYXNzIEFic3RyYWN0VGV4dEZvcm1hdHRlciB7XG4gICAgcHJpdmF0ZSBfcmVndWxhckV4cHJlc3Npb246IFJlZ0V4cDtcblxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBpbnRlcm5hbEZvcm1hdChsYW5nOiBzdHJpbmcgfCB1bmRlZmluZWQsIG1hdGNoZXM6IFJlZ0V4cEV4ZWNBcnJheSk6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHJlZ3VsYXJFeHByZXNzaW9uOiBSZWdFeHApIHtcbiAgICAgICAgdGhpcy5fcmVndWxhckV4cHJlc3Npb24gPSByZWd1bGFyRXhwcmVzc2lvbjtcbiAgICB9XG5cbiAgICBmb3JtYXQobGFuZzogc3RyaW5nIHwgdW5kZWZpbmVkLCBpbnB1dDogc3RyaW5nIHwgdW5kZWZpbmVkKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgbGV0IG1hdGNoZXM7XG5cbiAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gaW5wdXQ7XG5cbiAgICAgICAgICAgIHdoaWxlICgobWF0Y2hlcyA9IHRoaXMuX3JlZ3VsYXJFeHByZXNzaW9uLmV4ZWMoaW5wdXQpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UobWF0Y2hlc1swXSwgdGhpcy5pbnRlcm5hbEZvcm1hdChsYW5nLCBtYXRjaGVzKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBEYXRlRm9ybWF0dGVyIGV4dGVuZHMgQWJzdHJhY3RUZXh0Rm9ybWF0dGVyIHtcbiAgICBwcm90ZWN0ZWQgaW50ZXJuYWxGb3JtYXQobGFuZzogc3RyaW5nIHwgdW5kZWZpbmVkLCBtYXRjaGVzOiBSZWdFeHBFeGVjQXJyYXkpOiBzdHJpbmcge1xuICAgICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKERhdGUucGFyc2UobWF0Y2hlc1sxXSkpO1xuICAgICAgICBsZXQgZm9ybWF0ID0gbWF0Y2hlc1syXSAhPSB1bmRlZmluZWQgPyBtYXRjaGVzWzJdLnRvTG93ZXJDYXNlKCkgOiBcImNvbXBhY3RcIjtcblxuICAgICAgICBpZiAoZm9ybWF0ICE9IFwiY29tcGFjdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcobGFuZywgeyBkYXk6IFwibnVtZXJpY1wiLCB3ZWVrZGF5OiBmb3JtYXQsIG1vbnRoOiBmb3JtYXQsIHllYXI6IFwibnVtZXJpY1wiIH0gYXMgSW50bC5EYXRlVGltZUZvcm1hdE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFRpbWVGb3JtYXR0ZXIgZXh0ZW5kcyBBYnN0cmFjdFRleHRGb3JtYXR0ZXIge1xuICAgIHByb3RlY3RlZCBpbnRlcm5hbEZvcm1hdChsYW5nOiBzdHJpbmcgfCB1bmRlZmluZWQsIG1hdGNoZXM6IFJlZ0V4cEV4ZWNBcnJheSk6IHN0cmluZyB7XG4gICAgICAgIGxldCBkYXRlID0gbmV3IERhdGUoRGF0ZS5wYXJzZShtYXRjaGVzWzFdKSk7XG5cbiAgICAgICAgcmV0dXJuIGRhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKGxhbmcsIHsgaG91cjogJ251bWVyaWMnLCBtaW51dGU6ICcyLWRpZ2l0JyB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRUZXh0KGxhbmc6IHN0cmluZyB8IHVuZGVmaW5lZCwgdGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBmb3JtYXR0ZXJzOiBBYnN0cmFjdFRleHRGb3JtYXR0ZXJbXSA9IFtcbiAgICAgICAgbmV3IERhdGVGb3JtYXR0ZXIoL1xce3syfURBVEVcXCgoXFxkezR9LVxcZHsyfS1cXGR7Mn1UXFxkezJ9OlxcZHsyfTpcXGR7Mn0oPzpafCg/Oig/Oi18XFwrKVxcZHsyfTpcXGR7Mn0pKSkoPzosID8oQ09NUEFDVHxMT05HfFNIT1JUKSk/XFwpXFx9ezJ9L2cpLFxuICAgICAgICBuZXcgVGltZUZvcm1hdHRlcigvXFx7ezJ9VElNRVxcKChcXGR7NH0tXFxkezJ9LVxcZHsyfVRcXGR7Mn06XFxkezJ9OlxcZHsyfSg/Olp8KD86KD86LXxcXCspXFxkezJ9OlxcZHsyfSkpKVxcKVxcfXsyfS9nKVxuICAgIF07XG5cbiAgICBsZXQgcmVzdWx0ID0gdGV4dDtcblxuICAgIGZvciAobGV0IGZvcm1hdHRlciBvZiBmb3JtYXR0ZXJzKSB7XG4gICAgICAgIHJlc3VsdCA9IGZvcm1hdHRlci5mb3JtYXQobGFuZywgcmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgKiBhcyBFbnVtcyBmcm9tIFwiLi9lbnVtc1wiO1xuaW1wb3J0ICogYXMgU2hhcmVkIGZyb20gXCIuL3NoYXJlZFwiO1xuXG4vLyBUbyB3b3JrIGFyb3VuZCBUeXBlU2NyaXB0IGNvbXBsYWluaW5nIGFib3V0IGRvY3VtZW50TW9kZSBub3QgYmVpbmcgZGVjbGFyZWRcbi8vIG9uIHR5cGUgRG9jdW1lbnRcbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgRG9jdW1lbnQge1xuICAgICAgICBkb2N1bWVudE1vZGU/OiBhbnk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlcm5ldEV4cGxvcmVyKCk6IGJvb2xlYW4ge1xuICAgIC8vIFRoZSBkb2N1bWVudE1vZGUgcHJvcGVydHkgb25seSBleGlzdHMgaW4gSUVcbiAgICByZXR1cm4gd2luZG93LmRvY3VtZW50LmRvY3VtZW50TW9kZSAhPT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNb2JpbGVPUygpOiBib29sZWFuIHtcbiAgICBsZXQgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgICByZXR1cm4gISF1c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQvaSkgfHwgISF1c2VyQWdlbnQubWF0Y2goL2lQYWQvaSkgfHwgISF1c2VyQWdlbnQubWF0Y2goL2lQaG9uZS9pKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIFVVSUQgcHJlcGVuZGVkIHdpdGggXCJfX2FjLVwiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVVuaXF1ZUlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiX19hYy1cIiArIFNoYXJlZC5VVUlELmdlbmVyYXRlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRDaGlsZChub2RlOiBOb2RlLCBjaGlsZDogTm9kZSB8IHVuZGVmaW5lZCkge1xuICAgIGlmIChjaGlsZCkge1xuICAgICAgICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN0cmluZyhvYmo6IGFueSwgZGVmYXVsdFZhbHVlPzogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIiA/IG9iaiA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTnVtYmVyKG9iajogYW55LCBkZWZhdWx0VmFsdWU/OiBudW1iZXIpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm51bWJlclwiID8gb2JqIDogZGVmYXVsdFZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VCb29sKHZhbHVlOiBhbnksIGRlZmF1bHRWYWx1ZT86IGJvb2xlYW4pOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBzd2l0Y2ggKHZhbHVlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0cnVlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBjYXNlIFwiZmFsc2VcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW51bVZhbHVlQnlOYW1lKGVudW1UeXBlOiB7IFtzOiBudW1iZXJdOiBzdHJpbmcgfSwgbmFtZTogc3RyaW5nKSA6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgZm9yIChsZXQga2V5IGluIGVudW1UeXBlKSB7XG4gICAgICAgIGxldCBrZXlBc051bWJlciA9IHBhcnNlSW50KGtleSwgMTApO1xuXG4gICAgICAgIGlmIChrZXlBc051bWJlciA+PSAwKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBlbnVtVHlwZVtrZXldO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXlBc051bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUVudW0oZW51bVR5cGU6IHsgW3M6IG51bWJlcl06IHN0cmluZyB9LCBuYW1lOiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IG51bWJlcik6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgbGV0IGVudW1WYWx1ZSA9IGdldEVudW1WYWx1ZUJ5TmFtZShlbnVtVHlwZSwgbmFtZSk7XG5cbiAgICByZXR1cm4gZW51bVZhbHVlICE9PSB1bmRlZmluZWQgPyBlbnVtVmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdUb0Nzc0NvbG9yKGNvbG9yOiBzdHJpbmcgfCB1bmRlZmluZWQpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmIChjb2xvcikge1xuICAgICAgICBsZXQgcmVnRXggPSAvIyhbMC05QS1GXXsyfSkoWzAtOUEtRl17Mn0pKFswLTlBLUZdezJ9KShbMC05QS1GXXsyfSk/L2dpO1xuICAgICAgICBsZXQgbWF0Y2hlcyA9IHJlZ0V4LmV4ZWMoY29sb3IpO1xuXG4gICAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXNbNF0pIHtcbiAgICAgICAgICAgIGxldCBhID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTYpIC8gMjU1O1xuICAgICAgICAgICAgbGV0IHIgPSBwYXJzZUludChtYXRjaGVzWzJdLCAxNik7XG4gICAgICAgICAgICBsZXQgZyA9IHBhcnNlSW50KG1hdGNoZXNbM10sIDE2KTtcbiAgICAgICAgICAgIGxldCBiID0gcGFyc2VJbnQobWF0Y2hlc1s0XSwgMTYpO1xuXG4gICAgICAgICAgICByZXR1cm4gXCJyZ2JhKFwiICsgciArIFwiLFwiICsgZyArIFwiLFwiICsgYiArIFwiLFwiICsgYSArIFwiKVwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJ1bmNhdGUoZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgbWF4SGVpZ2h0OiBudW1iZXIsXG4gICAgbGluZUhlaWdodD86IG51bWJlcikge1xuICAgIGxldCBmaXRzID0gKCkgPT4ge1xuICAgICAgICAvLyBBbGxvdyBhIG9uZSBwaXhlbCBvdmVyZmxvdyB0byBhY2NvdW50IGZvciByb3VuZGluZyBkaWZmZXJlbmNlc1xuICAgICAgICAvLyBiZXR3ZWVuIGJyb3dzZXJzXG4gICAgICAgIHJldHVybiBtYXhIZWlnaHQgLSBlbGVtZW50LnNjcm9sbEhlaWdodCA+PSAtMS4wO1xuICAgIH07XG5cbiAgICBpZiAoZml0cygpKSByZXR1cm47XG5cbiAgICBsZXQgZnVsbFRleHQgPSBlbGVtZW50LmlubmVySFRNTDtcbiAgICBsZXQgdHJ1bmNhdGVBdCA9IChpZHg6IGFueSkgPT4ge1xuICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGZ1bGxUZXh0LnN1YnN0cmluZygwLCBpZHgpICsgJy4uLic7XG4gICAgfVxuXG4gICAgbGV0IGJyZWFrYWJsZUluZGljZXMgPSBmaW5kQnJlYWthYmxlSW5kaWNlcyhmdWxsVGV4dCk7XG4gICAgbGV0IGxvID0gMDtcbiAgICBsZXQgaGkgPSBicmVha2FibGVJbmRpY2VzLmxlbmd0aDtcbiAgICBsZXQgYmVzdEJyZWFrSWR4ID0gMDtcblxuICAgIC8vIERvIGEgYmluYXJ5IHNlYXJjaCBmb3IgdGhlIGxvbmdlc3Qgc3RyaW5nIHRoYXQgZml0c1xuICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIGxldCBtaWQgPSBNYXRoLmZsb29yKChsbyArIGhpKSAvIDIpO1xuICAgICAgICB0cnVuY2F0ZUF0KGJyZWFrYWJsZUluZGljZXNbbWlkXSk7XG5cbiAgICAgICAgaWYgKGZpdHMoKSkge1xuICAgICAgICAgICAgYmVzdEJyZWFrSWR4ID0gYnJlYWthYmxlSW5kaWNlc1ttaWRdO1xuICAgICAgICAgICAgbG8gPSBtaWQgKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGkgPSBtaWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0cnVuY2F0ZUF0KGJlc3RCcmVha0lkeCk7XG5cbiAgICAvLyBJZiB3ZSBoYXZlIGV4dHJhIHJvb20sIHRyeSB0byBleHBhbmQgdGhlIHN0cmluZyBsZXR0ZXIgYnkgbGV0dGVyXG4gICAgLy8gKGNvdmVycyB0aGUgY2FzZSB3aGVyZSB3ZSBoYXZlIHRvIGJyZWFrIGluIHRoZSBtaWRkbGUgb2YgYSBsb25nIHdvcmQpXG4gICAgaWYgKGxpbmVIZWlnaHQgJiYgbWF4SGVpZ2h0IC0gZWxlbWVudC5zY3JvbGxIZWlnaHQgPj0gbGluZUhlaWdodCAtIDEuMCkge1xuICAgICAgICBsZXQgaWR4ID0gZmluZE5leHRDaGFyYWN0ZXIoZnVsbFRleHQsIGJlc3RCcmVha0lkeCk7XG5cbiAgICAgICAgd2hpbGUgKGlkeCA8IGZ1bGxUZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdHJ1bmNhdGVBdChpZHgpO1xuXG4gICAgICAgICAgICBpZiAoZml0cygpKSB7XG4gICAgICAgICAgICAgICAgYmVzdEJyZWFrSWR4ID0gaWR4O1xuICAgICAgICAgICAgICAgIGlkeCA9IGZpbmROZXh0Q2hhcmFjdGVyKGZ1bGxUZXh0LCBpZHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0cnVuY2F0ZUF0KGJlc3RCcmVha0lkeCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmaW5kQnJlYWthYmxlSW5kaWNlcyhodG1sOiBzdHJpbmcpOiBudW1iZXJbXSB7XG4gICAgbGV0IHJlc3VsdHM6IG51bWJlcltdID0gW107XG4gICAgbGV0IGlkeCA9IGZpbmROZXh0Q2hhcmFjdGVyKGh0bWwsIC0xKTtcblxuICAgIHdoaWxlIChpZHggPCBodG1sLmxlbmd0aCkge1xuICAgICAgICBpZiAoaHRtbFtpZHhdID09ICcgJykge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGlkeCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZHggPSBmaW5kTmV4dENoYXJhY3RlcihodG1sLCBpZHgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBmaW5kTmV4dENoYXJhY3RlcihodG1sOiBzdHJpbmcsIGN1cnJJZHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgY3VycklkeCArPSAxO1xuXG4gICAgLy8gSWYgd2UgZm91bmQgdGhlIHN0YXJ0IG9mIGFuIEhUTUwgdGFnLCBrZWVwIGFkdmFuY2luZyB1bnRpbCB3ZSBnZXRcbiAgICAvLyBwYXN0IGl0LCBzbyB3ZSBkb24ndCBlbmQgdXAgdHJ1bmNhdGluZyBpbiB0aGUgbWlkZGxlIG9mIHRoZSB0YWdcbiAgICB3aGlsZSAoY3VycklkeCA8IGh0bWwubGVuZ3RoICYmIGh0bWxbY3VycklkeF0gPT0gJzwnKSB7XG4gICAgICAgIHdoaWxlIChjdXJySWR4IDwgaHRtbC5sZW5ndGggJiYgaHRtbFtjdXJySWR4KytdICE9ICc+Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJJZHg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaXRTdGF0dXMoZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbnRhaW5lckVuZDogbnVtYmVyKTogRW51bXMuQ29udGFpbmVyRml0U3RhdHVzIHtcbiAgICBsZXQgc3RhcnQgPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICBsZXQgZW5kID0gc3RhcnQgKyBlbGVtZW50LmNsaWVudEhlaWdodDtcblxuICAgIGlmIChlbmQgPD0gY29udGFpbmVyRW5kKSB7XG4gICAgICAgIHJldHVybiBFbnVtcy5Db250YWluZXJGaXRTdGF0dXMuRnVsbHlJbkNvbnRhaW5lcjtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3RhcnQgPCBjb250YWluZXJFbmQpIHtcbiAgICAgICAgcmV0dXJuIEVudW1zLkNvbnRhaW5lckZpdFN0YXR1cy5PdmVyZmxvd2luZztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBFbnVtcy5Db250YWluZXJGaXRTdGF0dXMuRnVsbHlPdXRPZkNvbnRhaW5lcjtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JvbGxYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHdpbmRvdy5wYWdlWE9mZnNldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcm9sbFkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gd2luZG93LnBhZ2VZT2Zmc2V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJFbGVtZW50Q2hpbGRyZW4oZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICB3aGlsZSAoZWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvYWRhcHRpdmVjYXJkcy50c1wiKTtcbiIsIiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==